<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: operating systems | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/operating-systems/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-10-07T20:02:57-07:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Process synchronization in OS]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os/"/>
    <updated>2013-10-07T11:54:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os</id>
    <content type="html"><![CDATA[<h3>What is a Process?</h3>
<p>OS objective is to keep as many as of the computer resources as busy as possible. It is used to keep track of all the things an OS must remember about the state of user program.</p>

<p>Process = Code + Allocated Resources + Book keeping information</p>

<p>Process is like a box, a complete entity in itself which does a step by step task written in progam. More formally it is called program in execution.</p>

<p>Lets consider a very basic operating system with very least complexity. This operating system can run only one process at a time. Since, only one process is working at a time, it may happen that all the resources occupied by process will not be used at the same time.</p>

<p>To maximize the resource utilization, we need to have entities running at the same time. When its said multiple entities it is logical that either we need to have multiple process running at the same time or light weight multiple entities running inside process.</p>

<p>Lets explore the second option, now consider process is like a box and it has resources inside the box. We create multiple child of process which is called thread.</p>

<p>Thread is a child of process and hence it will use resource Process have. Theoretically, there is no limit on number of child threads a process can have but it seems logical that process should have enough resource for administrative purpose for these threads. </p>

<p>Once there are multiple threads they are going to ask for same resource at the same time. For example, if two children are in one room then they will always fight for same toy. Same applies to threads.</p>

<p><br /></p>
<h3>3 Issues with Sharing </h3>
<ol>
  <li>How to Share data?</li>
  <li>How to ensure threads in a process, executes on at a time?</li>
  <li>How to ensure proper sequencing of events?</li>
</ol>

<p>To understand it better, lets take a real world example
<br /><br /></p>
<h3>Carl’s Jr. Restaurant</h3>
<p>Process</p>

<ol>
  <li>Customer arrives</li>
  <li>Employee takes order</li>
  <li>Employee cooks food</li>
  <li>Employee bag food</li>
  <li>Employee takes money</li>
  <li>Customer gets food and leaves</li>
</ol>

<p>If a single employee is doing steps from 1-6 then all other customers have to wait in line and its going to be long wait.
Instead, lets have multiple employees for taking order, cook food, bag food, take money. Each of these ‘employees’ are multiple threads on Process ‘Restaurant’. Each thread is responsible for doing specialized task.</p>

<p>Lets associate 3 issues in current situation</p>

<ol>
  <li>What is shared data? - In step 2-3, Quantity of food. In step 3-4, how much food to bag</li>
  <li>Does sequence matters? -  Cook can’t cook food until order arrives. Employee can’t bag food until it is cooked. So, sequencing matters.</li>
</ol>

<p>Shared data can be distributed either using message passing or storing that data in global memory of process and each thread read from that memory location.</p>

<p>The next logical question is, How to ensure threads in a process, executes on at a time?
More formally there are three types of solution categories</p>

<ol>
  <li>Algorithmic approach</li>
  <li>Software Primitives</li>
  <li>Concurrent programming construct</li>
</ol>

<h3>Algorithmic approach</h3>
<p>The algorithmic approach to process synchronization does not use any assistance from the computer architecture or the OS kernel. Instead it uses an arrangement of logical conditions to satisfy the desired synchronization requirements. <a href="http://books.google.com/books/about/Operating_Systems.html?id=kbBn4X9x2mcC" target="_blank">[Dhamdhere]</a></p>

<ul>
  <li>Two process algorithms</li>
  <li><a href="http://en.wikipedia.org/wiki/Dekker's_algorithm" target="_blank">Dekker’s Algorithm</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Peterson's_algorithm" target="_blank">Peterson’s Algorithm</a></li>
  <li>n process algorithm</li>
  <li><a href="http://en.wikipedia.org/wiki/Lamport's_bakery_algorithm" target="_blank">Bakery’s Algorithm</a></li>
</ul>

<h3>Software Primitives</h3>
<p>A set of software primitives for mutual exclusion e.g Semaphore, Locks etc. were developed to overcome the logical complexity of algorithmic implementations. This is implemented using some special architectural features of computer systems. But, ease of use and correctness still remained the major obstacle in a development of large concurrent systems.</p>

<h3>Semaphores</h3>
<p>It is a shared integer variable with non-negative values that have Initialization, wait and signal as a indivisible operation.</p>

<p>Semaphore Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Semaphore</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Constructor</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        Semaphore(char *debugName, int initialValue);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Destructor</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ~Semaphore();
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        int value;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span style="color:#036;font-weight:bold">List</span> *waitQueue;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        char *name;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>};
</pre></div>
</div>
</div>

<p>Semaphore Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Semaphore(char * debugName, int initialValue) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    name      = debugName;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    value     = initialValue;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    waitQueue = newList;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Destructors</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>~Semaphore() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    delete waitQueue;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Wait</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>P() - <span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Wait</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::P() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Disable</span> interrupts
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#080;font-weight:bold">not</span> available
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">while</span> (value == <span style="color:#00D">0</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        waitQueue-&gt;Append((void *)currentThread);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        currentThread-&gt;Sleep();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> now availble
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    value--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Signal</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Signal</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::V() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">Thread</span> *thread;  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Remove</span> first thread from wait queue
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    thread-&gt;(<span style="color:#036;font-weight:bold">Thread</span> *)waitQueue-&gt;Remove();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (thread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        scheduler-&gt;ReadyToRun(thread);  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<h3> </h3>

<h3> </h3>

<h3> </h3>
]]></content>
  </entry>
  
</feed>
