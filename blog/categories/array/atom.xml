<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: array | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-02-27T00:00:22-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers</a></li>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</a></li>
      <li><a href="#merge-two-sorted-array">Merge two sorted array</a></li>
      <li><a href="#merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</a></li>
      <li><a href="#sort-array-based-on-count">Sort array based on count</a></li>
    </ul>
  </li>
  <li><a href="#string-problems">String Problems</a>    <ul>
      <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
      <li><a href="#duplicates-and-count">Duplicates and Count</a></li>
      <li><a href="#remove-duplicate-spaces">Remove duplicate spaces</a></li>
      <li><a href="#remove-spaces">Remove spaces</a></li>
      <li><a href="#remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</a></li>
      <li><a href="#rotate-a-string">Rotate a string</a></li>
      <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input [2,1, 3, 2, 3, 1, 4]</p>

<p>Output  [2,1,3] </p>

<p><br /></p>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. <br /><br />
Give a Θ(n) way of solving this problem. Prove its running time and correctness. <br />Your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p><strong>Other variant of the same problem</strong> <br />
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
Input [6,4,5,7,9,1,2]<br />
Sum = 10 <br />
Then the pairs are  [6,4] , [9,1]
<!-- more --></p>

<p><br />
<strong>Solution</strong></p>

<p>There are three solutions<br /></p>

<p><strong>Sorted array</strong> <br />
1. When array is sorted, take two index variable. Indx1 point to fisrt index and Indx2 points to the last index<br />
2. If Indx1 + Indx2 &lt; sum then increment the Indx1<br />
3. Else if Indx1 + Indx2 &gt; sum then decrement Indx 2<br />
4. If Indx 1 &gt; Indx 2 then halt -&gt; No pairs found<br /></p>

<p>If pair found then keep doing the same to find next pair.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Sorted array</span>  <a href='http://ideone.com/fmKgvW' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> front = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> back = arr_size - <span class="integer">1</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">while</span> (front &amp;lt; back) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">if</span> (arr[front] + arr[back] &amp;lt; sum) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        front++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (arr[front] + arr[back] &amp;gt; sum) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        back--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                sum, arr[front], arr[back]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        back--;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>} }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>&lt;p&gt;<span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>{
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">12</span>, <span class="integer">12</span>};
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Hashing/Binary Map</strong><br />
Another solution works for both <em>sorted</em> and <em>unsorted</em> array. 
In this approach we not actually using the hash function fundamental idea is to maintain the occurrence of number i.e. Binary Map</p>

<blockquote>
  <p>The caveat is that we need extra memory.</p>
</blockquote>

<ol>
  <li>Get the number from input array<br /></li>
  <li>Num2 = Sum - arr[i]<br /></li>
  <li>If we have encountered Num2 already in input array then we found a pair i.e.<br /> if(binMap[Num2] == 1)<br /></li>
  <li>Else record input element in Binary map i.e. binMap[arr[i]] = 1;<br /></li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Binary Map</span>  <a href='http://ideone.com/S0CNlO' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#define</span> MAX <span class="integer">100000</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> temp = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> binMap[MAX] = {<span class="integer">0</span>}; /&lt;em&gt;initialize hash map as <span class="integer">0</span>&lt;/em&gt;/&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span>(i = <span class="integer">0</span>; i &amp;lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>{
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">if</span>(temp &amp;gt;= <span class="integer">0</span> &amp;amp;&amp;amp; binMap[temp] == <span class="integer">1</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                sum, arr[i], temp);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    binMap[arr[i]] = <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>} }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;p&gt;<span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>{
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">12</span>, <span class="integer">4</span>, <span class="integer">45</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">12</span>};
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Bit Vector</strong><br /></p>

<p>This approach is similar to Binary map except using array for extra space we use bit vector to save some of extra space.</p>

<blockquote>
  <p>This program works for max for 31 as bit map is <em>int</em> which is 32 bits. For numbers more than 31 more memory could be allocated.</p>
</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Bit Vector</span>  <a href='http://ideone.com/iFDimZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> temp = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> bitmap = <span class="integer">0</span>; <span class="comment">// all bits are 0</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> bitmask = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span>(i = <span class="integer">0</span>; i &amp;lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>{
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    bitmask = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    bitmask = <span class="integer">1</span> &amp;lt;&amp;lt; temp;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="keyword">if</span>(temp &amp;gt;= <span class="integer">0</span> &amp;amp;&amp;amp; (bitmap &amp;amp; bitmask))
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>               sum, arr[i], temp);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    bitmap |= <span class="integer">1</span> &amp;lt;&amp;lt; arr[i];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>} }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>&lt;p&gt;<span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>{
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">12</span>, <span class="integer">4</span>, <span class="integer">13</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">3</span>};
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] &gt;= k. <br /></p>

<p>Your algorithm should also output all the pairs of indices i, j such that A[i] + A[j] &gt;= k </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-two-sorted-array">Merge two sorted array</h4>
<p>Input array1 [1, 3, 6, 7] <br />
Input array2 [1, 2, 4]</p>

<p>Output [1, 1, 2, 3, 4, 6, 7]</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Merge Sorted Arrays</span>  <a href='http://ideone.com/WaTPEt' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="predefined-type">int</span> lSize = <span class="integer">4</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="predefined-type">int</span> rSize = <span class="integer">3</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> L[<span class="integer">4</span>] = {<span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">6</span>, <span class="integer">7</span>};
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> R[<span class="integer">4</span>] = {<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">4</span>};
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="predefined-type">int</span> finalArray[<span class="integer">7</span>];&lt;/p&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>&lt;p&gt;<span class="directive">void</span> merge()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>{
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="predefined-type">int</span> lIndx = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="predefined-type">int</span> rIndx = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; (lSize + rSize); i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">if</span> (L[lIndx] &amp;lt;= R[rIndx]) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        finalArray[i] = L[lIndx++];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="keyword">if</span> (lIndx == lSize) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        finalArray[i] = R[rIndx++];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">if</span> (rIndx == rSize) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>}
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>i++;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="keyword">if</span> (lIndx != lSize) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        finalArray[i++] = L[lIndx++];
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        <span class="keyword">if</span> (lIndx == lSize) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>}
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span class="keyword">if</span> (rIndx != rSize) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        finalArray[i++] = R[rIndx++];
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span class="keyword">if</span> (rIndx == rSize) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>} }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>&lt;p&gt;<span class="directive">void</span> display()
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>{
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>&lt;pre&gt;&lt;code&gt;printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="content">Array1: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n56" name="n56">56</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; lSize; i++) {
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, L[i]);
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>}
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Array2: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n61" name="n61">61</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; rSize; i++) {
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, R[i]);
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>}
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Merge array: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n66" name="n66">66</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; lSize+rSize; i++) {
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, finalArray[i]);
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>} }
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>{
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>    <span class="comment">// Test 1</span>
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>    merge();
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>    display();&lt;/p&gt;
<span class="line-numbers"><a href="#n76" name="n76">76</a></span>
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// Test 2</span>
<span class="line-numbers"><a href="#n78" name="n78">78</a></span>R[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>R[<span class="integer">1</span>] = <span class="integer">3</span>;
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span>R[<span class="integer">2</span>] = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>R[<span class="integer">3</span>] = <span class="integer">7</span>;
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>L[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>L[<span class="integer">1</span>] = <span class="integer">2</span>;
<span class="line-numbers"><a href="#n84" name="n84">84</a></span>L[<span class="integer">2</span>] = <span class="integer">4</span>;
<span class="line-numbers"><a href="#n85" name="n85">85</a></span>lSize = <span class="integer">3</span>;
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>rSize = <span class="integer">4</span>;
<span class="line-numbers"><a href="#n87" name="n87">87</a></span>merge();
<span class="line-numbers"><a href="#n88" name="n88">88</a></span>display();
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span><span class="comment">// test 3</span>
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>L[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>R[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>lSize = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n94" name="n94">94</a></span>rSize = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n95" name="n95">95</a></span>merge();
<span class="line-numbers"><a href="#n96" name="n96">96</a></span>display();
<span class="line-numbers"><a href="#n97" name="n97">97</a></span>
<span class="line-numbers"><a href="#n98" name="n98">98</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</h4>

<p>Input array1 [6, 3, 6, 1, 7] <br />
Input array2 [5, 1, 2, 4, 6]</p>

<p>Output could be in sorted order or non-sorted order based on algorithm you choose to solve it.</p>

<p>Output [1, 2, 3, 4, 5, 6, 7]  OR<br />
 Output [6, 3, 1, 7, 5, 2, 4] OR <br />
 Output [5, 1, 2, 4, 6, 3, 7] OR <br />
 Output [6, 5, 3, 1, 2, 4, 7] etc…</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sort-array-based-on-count">Sort array based on count</h4>

<p>Given number in array [2, 1, 3, 2, 1, 4] sort array based on count of numbers.</p>

<p>Sort them as [1, 1, 2, 2, 3, 4]</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>String Reverse</span>  <a href='http://ideone.com/vfTxcr' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;string.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span class="predefined-type">int</span> main(<span class="directive">void</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">char</span> str[] = <span class="error">“</span>testString<span class="error">”</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> len = strlen(str);&lt;/p&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span>(i = <span class="integer">0</span>; i &amp;lt; len/<span class="integer">2</span>; i++){
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    str[i] ^= str[len - i - <span class="integer">1</span>];
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Reverse String %s </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, str);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span> 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div>
<br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="duplicates-and-count">Duplicates and Count</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-duplicate-spaces">Remove duplicate spaces</h4>
<p>Remove all duplicate spaces from the string</p>

<p>Input string<br />
Hi^^^There!!!^^Wassup<br />
 ^ - Represents  space</p>

<p>Output<br />
Hi^There!!!^Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-spaces">Remove spaces</h4>
<p>Remove all the spaces from a string</p>

<p>Input string<br />
Hi there!!! Wassup</p>

<p>Output<br />
Hithere!!!Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</h4>
<p>Remove all consequtive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="rotate-a-string">Rotate a string</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

]]></content>
  </entry>
  
</feed>
