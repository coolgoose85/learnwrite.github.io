<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: binary numbers | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/binary-numbers/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-03-12T00:16:57-07:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[World of Bits and Bytes]]></title>
    <link href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/"/>
    <updated>2013-10-08T13:17:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#basics">Basics</a></li>
  <li><a href="#bitwise-operators">Bitwise Operators</a></li>
  <li><a href="#bit-fields">Bit Fields</a></li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</a></li>
      <li><a href="#how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</a></li>
      <li><a href="#one-function-to-set-and-unset">One function to set and unset</a></li>
      <li><a href="#unset-range-of-bits">Unset range of bits</a></li>
    </ul>
  </li>
  <li><a href="#step1">Step1</a></li>
  <li><a href="#step-2">Step 2</a></li>
  <li><a href="#step-3">Step 3</a>    <ul>
      <li><a href="#set-range-of-bits">Set range of bits</a></li>
      <li><a href="#recomended-readings">Recomended readings</a></li>
    </ul>
  </li>
</ul>

<p>Recently, I have realized that no matter how much C, C++ or other high level languages you know it all comes down to bit and bytes view of program.<br />
I started realizing that after all it’s not that easy to actually think and write in bit/byte manipulation. This is my attempt to learn and be more comfortable about thinking in bit/bytes.</p>

<!-- more -->

<h3 id="basics">Basics</h3>

<p>Introduction <a href="http://www.codeproject.com/Articles/2247/An-introduction-to-bitwise-operators" target="_blank">here</a>
<br /><br /><br /><br /></p>

<p>{% coderay lang:cplusplus linenos:true Bit &amp; Byte %}
 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 1 0 1 0 0 0 1 1 1 1 0 0 0
||              |               |               |              ||
|+- bit 31      |               |               |       bit 0 -+|
|               |               |               |               |
+– BYTE 3 —–+— BYTE 2 —-+— BYTE 1 —-+– BYTE 0 —–+
|                               |                               |
+———– WORD 1 ————+———– WORD 0 ————+
|                                                               |
+————————— DWORD —————————–+</p>

<p>Hexadecimal Numbers
0 1 2 3 4 5 6 7 8 9 A B C D E F
{% endcoderay %}</p>

<p><br /></p>

<h3 id="bitwise-operators">Bitwise Operators</h3>

<p>{% coderay lang:cplusplus linenos:true Operators http://distkeys.com/blog/2013/10/08/binary-number-operations/ Bitwise Operations %}
The &amp; operator (AND)
1   &amp;   1   ==   1
1   &amp;   0   ==   0
0   &amp;   1   ==   0
0   &amp;   0   ==   0</p>

<table>
  <tbody>
    <tr>
      <td>The</td>
      <td>operator (OR)</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1   ==   1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0   ==   1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1   ==   1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0   ==   0</td>
    </tr>
  </tbody>
</table>

<p>The ^ operator (XOR)
1   ^   1   ==   0
1   ^   0   ==   1
0   ^   1   ==   1
0   ^   0   ==   0</p>

<p>The ~ operator
The ~ (Ones Complement or inversion) operator acts only on one value
and it inverts it.</p>

<p>The « (Left Shift)
00001100  - b 
00110000  - b « 2</p>

<p>The » (Right Shift)
00001100  - b
00000011  - b » 2</p>

<p>Another example is
1«4; 0001 0000
{% endcoderay %}</p>

<p><br /></p>

<h3 id="bit-fields">Bit Fields</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>struct date-struct {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="constant">BYTE</span> day   : <span class="integer">5</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">31</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>     month : <span class="integer">4</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">12</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>     year  : <span class="integer">14</span>;  <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> to <span class="integer">9999</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} date
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> |
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  |                           |       |         |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  +------ year ---------------+ month +-- day --+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>date.day = <span class="integer">12</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>dateptr = &amp;date;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>dateptr-&gt;year = <span class="integer">1852</span>;
</pre></div>
</div>
</div>

<p><a href="http://distkeys.com/blog/2013/10/08/binary-number-operations/">Basics of Binary Arithmetic</a></p>

<p><br /></p>

<h3 id="problems">Problems</h3>

<h4 id="how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</h4>

<p>For e.g In byte 0000 1000 set bit no 6 will produce 0100 1000<br />
(Remember bit number starts with 0-7)</p>

<p>{% coderay lang:cplusplus linenos:true Set Bit %}
//For problems where certain bit values needs to be changed, first we
//need to create a bit mask.
//Bit mask is a temporary variable with some value. Using this value
//we will access and change specific bits in a byte of data.</p>

<p>//For e.g.
//To set 6th bit in a byte 0000 1000
//We have             MASK 0100 0000  (OR)
//                    ——————————————
//                         0100 1000</p>

<p>//To turn on certain bit in a byte (OR) is used.</p>

<p>int set-bit(int val, int num, bool bitval)
{
    return (val | (bitval « num));
}
//Here, val    = 0000 1000 = 8
//      num    = 6 (set 6th bit)
//      bitval = 1 (set to 1)</p>

<p>//      0000 1000
//(OR)  0100 0000  (1 « 6)
//      ————————-
//      0100 0000
{% endcoderay %}</p>

<p><br /></p>

<h4 id="how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</h4>

<p>For e.g In byte 0100 1000 unset bit no 6 will produce 0000 1000<br />
(Remember bit number starts with 0-7)</p>

<p>{% coderay lang:cplusplus linenos:true Unset Bit %}
//To unset specific bit we will use (AND) operation.
//Mask value need to be ‘0’ for the bit to unset but rest of the bits
//need to ‘1’. The reason for rest of the bits to set as ‘1’ is as
//we are doing (AND), we don’t want to unset other bits which are
//already set.
//
//For e.g.
//To unset 6th bit 0100 1000
//            MASK 1011 1111 (AND)
//                ——————————-
//                 0000 1000   (Result)
int unset-bit(int val, int num, bool bitval)
{
    return (val &amp; ~(bitval « num));
}</p>

<p>//Here, val    = 0100 1000
//      num    = 6
//      bitval = 0
//      (bitval « num) = 0100 0000
//     ~(bitval « num) = 1011 1111
//
//      0100 1000
//      1011 1111 (AND)
//      —————————-
//      0000 1000    (Result)
{% endcoderay %}</p>

<p><br /></p>

<h4 id="one-function-to-set-and-unset">One function to set and unset</h4>

<p>{% coderay lang:cplusplus linenos:true Set &amp; Unset Bit %}
int change-bit(int val, int num, bool bitval)
{
    return (((val &amp; ~(bitval « num)) | (bitval « num));
}
{% endcoderay %}</p>

<p><br /></p>

<h4 id="unset-range-of-bits">Unset range of bits</h4>

<p>{% coderay lang:cplusplus linenos:false Unset range of bits http://distkeys.com/blog/2013/10/08/binary-number-operations/ Bitwise Operations %}
Unset range of bits
For e.g. 1001 1001
Unset bits from 2 to 5 i.e. 1 0 0 1 1 0 0 1 =&gt; 10 0000 01
                               |- - - -| 
                      Bits  7 6 5 4 3 2 1 0          </p>

<h2 id="step1">Step1</h2>
<p>To unset range of bits we need to create MASK
 val  = 1001 1001
 Mask = 1100 0011 (AND)
      <strong>__</strong><strong>__</strong>_
        1000 0001</p>

<h2 id="step-2">Step 2</h2>
<p>We need to construct MASK
In MASK, bits in range are 0 i.e. bits from 2-5 is 0 and
rest of the bits are 1
 MASK 1 1 0 0 0 0 1 1
         |- - - -|
 Bits 7 6 5 4 3 2 1 0</p>

<h2 id="step-3">Step 3</h2>
<p>0 0 0 1  1 1 1 1  ((1 « 5) - 1) i.e. (1 « j) - 1</p>

<p>MAX  1 1 1 1  1 1 1 1
     0 0 1 1  1 1 1 1  (-)
    ——————
     1 1 0 0  0 0 0 0         =====&gt; (1)</p>

<p>(1 « 2) - 1 i.e. (1 « i) - 1
 0 0 0 0 0 1 0 0
 0 0 0 0 0 0 0 1 (-)
——————
 0 0 0 0 0 0 1 1                   =======&gt; (2)</p>

<p>(1) OR (2)
 1 1 0 0 0 0 0 0
 0 0 0 0 0 0 1 1   (OR)
——————-
 1 1 0 0 0 0 1 1 </p>

<p>Final Step
 val  = 1001 1001
 Mask = 1100 0011 (AND)
      <strong>__</strong><strong>__</strong>_
        1000 0001
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true unsetBitsInRange http://distkeys.com/blog/2013/10/08/binary-number-operations/ Bitwise Operations %}
// i is start of range
// j is end of range
int unsetBitsInRange(int val, int i, int j) {
    int max = ~0;</p>

<pre><code>int left = max - ((1 &lt;&lt; j) - 1);

int right = (1 &lt;&lt; i) - 1;

int mask = left | right;

return (val &amp; mask); } {% endcoderay %}
</code></pre>

<p><br /></p>

<h4 id="set-range-of-bits">Set range of bits</h4>

<p>{% coderay lang:cplusplus linenos:false Set range https://gist.github.com/coolgoose85/458a1f67d61f8def1120 Range Unset Mask %}
This mask is similar to Range Unset Mask created earlier with an ‘exception’
in last</p>

<p>/<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>***
//In “Range UNset Mask” we created following
//For e.g. 1001 1001
//Unset bits from 2 to 5 i.e. 1 0 0 1 1 0 0 1 =&gt; 10 0000 01
//                               |- - - -| 
//                      Bits  7 6 5 4 3 2 1 0  <br />
//Step1
//——
//To unset range of bits we need to create MASK
// val  = 1001 1001
// Mask = 1100 0011 (AND)
//      _____________
//        1000 0001
**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>*/</p>

<p>We will be creating the same mask in addition we will 
TOGGLE the bits of “unset mask”</p>

<p>Unset MASK = 1100 0011
 TOGGLE     = 0011 1100    ~(Unset Mask)</p>

<p>Now perform OR will val
 val  = 1001 1001
 Mask = 0011 1100 (OR)
      <strong>__</strong><strong>__</strong>_
        1011 1101
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true setBitsInRange %}
// i is start of the range
// j is end of the range
int setBitsInRange(int val, int i, int j) {
    int max = ~0;</p>

<pre><code>int left = max - ((1 &lt;&lt; j) - 1);
int right = (1 &lt;&lt; i) - 1;

int mask = left | right;

return (val | ~mask);   } {% endcoderay %}
</code></pre>

<p><br /></p>

<h3 id="recomended-readings">Recomended readings</h3>

<ul>
  <li><a href="http://www.gamedev.net/page/resources/_/technical/general-programming/bitwise-operations-in-c-r1563" target="_blank">Gamedev</a></li>
  <li><a href="http://www.vipan.com/htdocs/bitwisehelp.html" target="_blank">Vipan</a></li>
  <li><a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank">Stanford</a></li>
  <li><a href="http://stackoverflow.com/questions/1167956/resources-to-learn-bitwise-programming" target="_blank">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
