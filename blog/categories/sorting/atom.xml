<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sorting | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/sorting/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2014-01-04T11:50:05-08:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comparison based Sorting]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/13/comparison-based-sorting/"/>
    <updated>2013-10-13T01:43:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/13/comparison-based-sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#merge-sort">Merge Sort</a></li>
  <li><a href="#table-based-comparison">Table based comparison</a></li>
  <li><a href="#merge-sort-code">Merge sort code</a></li>
  <li><a href="#define-eoa-100000--end-of-array">define EOA 100000  //End of array</a></li>
  <li><a href="#ifdef-debug">ifdef DEBUG</a>    <ul>
      <li><a href="#quick-sort-code">Quick sort code</a></li>
    </ul>
  </li>
  <li><a href="#ifdef-debug-1">ifdef DEBUG</a>    <ul>
      <li><a href="#references">References</a></li>
    </ul>
  </li>
</ul>

<h3 id="merge-sort">Merge Sort</h3>

<p>Merge sort follows <code>divide-and-conquer</code> approach.</p>

<p><br /><br /></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="constant">MERGE</span>-SORT(<span class="constant">A</span>, p, r) /<span class="regexp"><span class="delimiter">/</span><span class="content"> A is array of numbers</span></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="content">{                   </span><span class="delimiter">/</span></span>/ p is starting index of array
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>                    <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> r is last index of array
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="keyword">if</span> p &lt; r
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">then</span> q &lt;- ⌊(p + r)⌋ / <span class="integer">2</span>;  
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="constant">MERGE</span>-SORT(<span class="constant">A</span>, p, q)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span class="constant">MERGE</span>-SORT(<span class="constant">A</span>, q + <span class="integer">1</span>, r)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        MERGE(<span class="constant">A</span>, p, q, r)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<p>Merge Sort</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>MERGE(<span class="constant">A</span>, p, q, r)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>n1 &lt;- q - p + <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>n2 &lt;- r - q
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>create arrays <span class="constant">L</span>[<span class="integer">1</span>...n1 + <span class="integer">1</span>] <span class="keyword">and</span> <span class="constant">R</span>[<span class="integer">1</span>... n2 + <span class="integer">1</span>] /<span class="regexp"><span class="delimiter">/</span><span class="content"> It took O(n) space</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="regexp"><span class="content"></span></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="regexp"><span class="content"></span><span class="delimiter">/</span></span>/<span class="constant">Assign</span> elements to new sub arrays
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">for</span> i &lt;- <span class="integer">1</span> to n1
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">do</span> <span class="constant">L</span>[i] &lt;- <span class="constant">A</span>[p + i - <span class="integer">1</span>]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>     
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">for</span> j &lt;- <span class="integer">1</span> to n2
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">do</span> <span class="constant">R</span>[j] &lt;- <span class="constant">A</span>[q + j]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Mark</span> <span class="keyword">end</span> of array
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="constant">L</span>[n1 + <span class="integer">1</span>] &lt;- ∞
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="constant">R</span>[n2 + <span class="integer">1</span>] &lt;- ∞
</pre></div>
</div>
</div>

<p><br /></p>

<p>Merging two arrays L[] and R[]</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>i &lt;- <span class="integer">1</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>j &lt;- <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">for</span> k &lt;- p to r
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">do</span> <span class="keyword">if</span> <span class="constant">L</span>[i] &lt;= <span class="constant">R</span>[j]
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span class="keyword">then</span> <span class="constant">A</span>[k] &lt;- <span class="constant">L</span>[i]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>            i &lt;- i + <span class="integer">1</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">else</span> <span class="constant">A</span>[k] &lt;- <span class="constant">R</span>[j]
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            j &lt;- j + <span class="integer">1</span>
</pre></div>
</div>
</div>

<p><br /></p>

<p><strong>Analysis</strong></p>

<p>Time complexity</p>

<p>Fully expanded recursion tree has <code>logn + 1</code> levels.<br />
Each level contributes to total cost of <code>cn</code></p>

<p>Total cost = <em>cn logn + cn = O(nlogn)</em> </p>

<h3 id="table-based-comparison">Table based comparison</h3>

<table>
<thead>
<tr>
    <th><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge Sort</a></th><th><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heap Sort</a></th><th><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quick Sort</a></th>
</tr>
</thead>
<tbody>
<tr>
    <td>Space O(n)</td>
    <td><code class="mygreen">In place</code></td>
    <td><code class="mygreen">In place</code></td>
</tr>
<tr>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(nlogn)</td>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(nlogn)</td>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
</tr>
<tr>
    <td>Divide and Conquer</td>
    <td />
    <td>Divide and Conquer</td>
</tr>
<tr>
    <td>Runs better than heapsort<br /> in data cache if its on array</td>
    <td>Runs faster in small data cache</td>
    <td>Works really well in<br /> virtual memory env/Caches</td>
</tr>
<tr>
    <td>Access frequent contiguous<br /> memory locations</td>
    <td>Spread throughout the heap</td>
    <td>Access frequent contiguous<br /> memory locations</td>
</tr>
<tr>
    <td>Stable</td>
    <td>Not Stable</td>
    <td>Not Stable</td>
</tr>
<tr>
    <td>Parallelize well</td>
    <td>Do not Parallelize well</td>
    <td>Parallelize well</td>
</tr>
<tr>
    <td>Used in external sort</td>
    <td>Can not be used in external sort.<br /> <code class="myred">Locality of ref is issue.</code></td>
    <td>Used in external sort</td>
</tr>
</tbody>
</table>

<p><br /></p>

<h3 id="merge-sort-code">Merge sort code</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Merge Sort</span>  <a href='http://ideone.com/BuLW5z' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="comment">// Merge Sort example</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="comment">// For input array</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span><span class="comment">// 2 8 7 1 3 5 6 4 9 0</span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span class="comment">//</span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="comment">// First partion in L[] and R[] will be</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="comment">// L[] = 2 8 7 1 3 ==&amp;gt; L[] = 2 8 7 | R[] = 1 3 ==&amp;gt; L[] = 2 8 | R[] = 7</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="comment">// R[] = 5 6 4 9 0</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span><span class="comment">//</span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span>
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">define-eoa-100000--end-of-array</span><span class="delimiter">&quot;</span></span>&gt;define EOA <span class="integer">100000</span>  <span class="comment">//End of array&lt;/h1&gt;</span>
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span>
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>&lt;p&gt;<span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span><span class="comment">// #define DEBUG 1&lt;/p&gt;</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span>
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">ifdef-debug</span><span class="delimiter">&quot;</span></span>&gt;ifdef DEBUG&lt;/h1&gt;
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>&lt;p&gt;<span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="preprocessor">#endif</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>&lt;p&gt;<span class="directive">void</span> mergesort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span><span class="directive">void</span> merge(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> q, <span class="predefined-type">int</span> r); &lt;/p&gt;
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>&lt;p&gt;<span class="predefined-type">int</span> arr[<span class="integer">10</span>] = {<span class="integer">2</span>, <span class="integer">8</span>, <span class="integer">7</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">4</span>, <span class="integer">9</span>, <span class="integer">0</span>}; &lt;/p&gt;
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>{
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>    printf(<span class="error">“</span>Input array<span class="error">\</span>n<span class="error">”</span>);
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>        printf(<span class="error">“</span>%d <span class="error">“</span>, arr[i]);
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>    } &lt;br /&gt;
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>    printf(<span class="error">“</span><span class="error">\</span>n<span class="error">\</span>n<span class="error">”</span>);&lt;/p&gt;
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span>
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>&lt;pre&gt;&lt;code&gt;mergesort(arr, <span class="integer">0</span>, <span class="integer">9</span>); 
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sorted output</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>}   
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span> 
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>&lt;p&gt;<span class="directive">void</span> mergesort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>{
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>    <span class="keyword">if</span> (p &amp;lt; r) {
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>        <span class="predefined-type">int</span> q = (p + r) / <span class="integer">2</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span>&lt;pre&gt;&lt;code&gt;    mergesort(arr, p, q);
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span>    mergesort(arr, q+<span class="integer">1</span>, r);
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>    merge(arr, p, q, r);
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>} }
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>&lt;p&gt;<span class="directive">void</span> merge(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> q, <span class="predefined-type">int</span> r)
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>{
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>    <span class="predefined-type">int</span> n1 = q - p + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>    <span class="predefined-type">int</span> n2 = r - q;
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>&lt;pre&gt;&lt;code&gt;<span class="predefined-type">int</span> L[<span class="integer">15</span>];
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span><span class="predefined-type">int</span> R[<span class="integer">15</span>];
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span> 
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span class="comment">//Copy elements from p to n1 in L[]</span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; n1; i++) {
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>    L[i] = arr[p + i];
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>}
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>L[i] = EOA;
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span> 
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span><span class="keyword">for</span> (j = <span class="integer">0</span>; j &amp;lt; n2; j++) {
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>    R[j] = arr[q + j + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>}
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>R[j] = EOA;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span> 
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span><span class="predefined-type">int</span> lindx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span><span class="predefined-type">int</span> rindx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span><span class="comment">//Merge array L[] and R[]</span>
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span><span class="keyword">for</span> (i = p; i &amp;lt;= r; i++) {
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>    <span class="keyword">if</span>(L[lindx] &amp;lt;= R[rindx]) {
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>        arr[i] = L[lindx++];
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>        arr[i] = R[rindx++];
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>    }
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>}
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span> 
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span><span class="comment">// Print debug statements</span>
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">######################</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Left array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span> 
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; n1; i++) {
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, L[i]));
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>}
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span> 
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Right array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; n2; i++) {
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, R[i]));
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>}
<span class="line-numbers"><a href="#n103" name="n103">103</a></span> 
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">After Merge</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n105" name="n105">105</a></span><span class="keyword">for</span> (i = p; i &amp;lt;= r; i++) {
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]));
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>}
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>)); } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<h3 id="quick-sort-code">Quick sort code</h3>
<p><a href="https://www.dropbox.com/s/czbcc6seqfl1eir/Quicksort%20Example.pdf" target="_blank">Quicksort explanation</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Quick Sort</span>  <a href='http://ideone.com/qGqmLR' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// Quick Sort example</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">// For input array</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">// 2 8 7 1 3 5 6 4</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> IPSIZE <span class="integer">8</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;p&gt;<span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// #define DEBUG 1&lt;/p&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">ifdef-debug-1</span><span class="delimiter">&quot;</span></span>&gt;ifdef DEBUG&lt;/h1&gt;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>&lt;p&gt;<span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="preprocessor">#endif</span>&lt;/p&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;p&gt;<span class="directive">void</span> quicksort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="predefined-type">int</span> partition(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> swap(<span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j); &lt;/p&gt;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>&lt;p&gt;<span class="predefined-type">int</span> arr[IPSIZE] = {<span class="integer">2</span>, <span class="integer">8</span>, <span class="integer">7</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">4</span>}; &lt;/p&gt;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>{
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    printf(<span class="error">“</span>Input array<span class="error">\</span>n<span class="error">”</span>);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= IPSIZE - <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        printf(<span class="error">“</span>%d <span class="error">“</span>, arr[i]);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    } &lt;br /&gt;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    printf(<span class="error">“</span><span class="error">\</span>n<span class="error">\</span>n<span class="error">”</span>);&lt;/p&gt;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>&lt;pre&gt;&lt;code&gt;quicksort(arr, <span class="integer">0</span>, IPSIZE - <span class="integer">1</span>); 
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sorted output</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= IPSIZE - <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>}   
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span> 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>&lt;p&gt;<span class="directive">void</span> quicksort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>{
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    <span class="keyword">if</span> (p &amp;lt; r) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="predefined-type">int</span> pivotIndx = partition(arr, p, r);&lt;/p&gt;
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;pre&gt;&lt;code&gt;    quicksort(arr, p, pivotIndx - <span class="integer">1</span>);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>    quicksort(arr, pivotIndx + <span class="integer">1</span>, r);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>} }
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>&lt;p&gt;<span class="predefined-type">int</span> partition(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>{
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>    <span class="predefined-type">int</span> pivot = arr[r];
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    <span class="predefined-type">int</span> i = p - <span class="integer">1</span>;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// Debug messages</span>
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">############</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Partition</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">p=%d, r=%d, pivot=%d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, p, r, pivot));
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Elements</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n65" name="n65">65</a></span><span class="keyword">for</span> (j = p; j &amp;lt;= r; j++) {
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[j]));
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>}
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n69" name="n69">69</a></span> 
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span><span class="keyword">for</span> (j = p; j &amp;lt;= r - <span class="integer">1</span>; j++) {
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>    <span class="keyword">if</span> (arr[j] &amp;lt;= pivot) {
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>        i++;
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>        swap(i, j);
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>    }
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>}
<span class="line-numbers"><a href="#n76" name="n76">76</a></span> 
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>swap(i + <span class="integer">1</span>, r);
<span class="line-numbers"><a href="#n78" name="n78">78</a></span> 
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Elements after partition</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span><span class="keyword">for</span> (j = p; j &amp;lt;= r; j++) {
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[j]));
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>}
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n84" name="n84">84</a></span> 
<span class="line-numbers"><a href="#n85" name="n85">85</a></span><span class="keyword">return</span> (i + <span class="integer">1</span>); }
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n87" name="n87">87</a></span>
<span class="line-numbers"><a href="#n88" name="n88">88</a></span>&lt;p&gt;<span class="directive">void</span> swap(<span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j)
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>{
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span>    <span class="predefined-type">int</span> temp = arr[i];
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>    arr[i] = arr[j];
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>    arr[j] = temp;
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /></p>

<h3 id="references">References</h3>
<ul>
  <li>
    <p><a href="https://www.dropbox.com/s/4kcfkbvkwmnmgib/sorting.pdf" target="_blank">Article comparing sorting</a></p>
  </li>
  <li>
    <p><a href="http://learnwrite.github.io/blog/2013/10/12/sorting/" target="_blank">Sorting in detail</a></p>
  </li>
  <li>
    <p><a href="http://faculty.simpson.edu/lydia.sinapova/www/cmsc250/LN250_Tremblay/L06-QuickSortEX.htm" target="_blank">Median of 3 quicksort</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/12/sorting/"/>
    <updated>2013-10-12T13:08:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/12/sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dictionary-of-algorithms">Dictionary of algorithms</a></li>
  <li><a href="#sorting-visualization">Sorting Visualization</a></li>
  <li><a href="#sorting-wiki-summary">Sorting Wiki Summary</a></li>
  <li><a href="#sorting-algorithms">Sorting algorithms</a></li>
  <li><a href="#comparisons-based-sorting">Comparisons based sorting</a></li>
  <li><a href="#online-sorts">Online sorts</a></li>
  <li><a href="#stable-sorts">Stable sorts</a></li>
  <li><a href="#time-complexity-chart">Time complexity chart</a></li>
</ul>

<p>This article talks about Sorting, Sorting techniques/algorithms in computer science</p>

<p>Let’s start with Wikipedia entry about sorting</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Sorting_stability_playing_cards.svg/220px-Sorting_stability_playing_cards.svg.png"/>
  
  <h2>sorting algorithm</h2>
  <div>
    <p>A <strong>sorting algorithm</strong> is an <a href="http://en.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> that puts elements of a <a href="http://en.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">list</a> in a certain <a href="http://en.wikipedia.org/wiki/Total_order" title="Total order">order</a>. The most-used orders are numerical order and <a href="http://en.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical order</a>. Efficient <a href="http://en.wikipedia.org/wiki/Sorting" title="Sorting">sorting</a> is important for optimizing the use of other algorithms (such as <a href="http://en.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">search</a> and <a href="http://en.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge</a> algorithms) which require input data to be in sorted lists; it is also often useful for <a href="http://en.wikipedia.org/wiki/Canonicalization" title="Canonicalization">canonicalizing</a> data and for producing human-readable output. More formally, the output must satisfy two conditions:
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Sorting_algorithm">Read more</a>
</div>
</p>

<p><br /></p>

<h3 id="dictionary-of-algorithms">Dictionary of algorithms</h3>

<p><a href="http://xlinux.nist.gov/dads//" target="_blank">Dictionary of algorithms</a></p>

<p><br /></p>

<h3 id="sorting-visualization">Sorting Visualization</h3>

<p><a href="http://corte.si/posts/code/visualisingsorting/index.html" target="_blank">Sorting Visualization</a></p>

<p><br /></p>

<h3 id="sorting-wiki-summary">Sorting Wiki Summary</h3>

<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank">Sorting Wiki Summary</a></p>

<p><br /></p>

<p>Sorting algorithms can be divided into categories</p>

<h3 id="sorting-algorithms">Sorting algorithms</h3>
<ol>
  <li><strong><em>Comparisons based sorts</em></strong> - 24 algorithms in this category</li>
  <li><strong><em>Online sorts</em></strong>            - 5 algorithms in this category</li>
  <li><strong><em>Stable sorts</em></strong>            - 14 algorithms in this category</li>
</ol>

<p>Donald Knuth pioneer in algorithms and field of Computer Science have divided sorting into</p>

<ol>
  <li><strong><em>Internal sorting</em></strong> - by insertion, by exchange, by selection, by merging, by distribution<br /></li>
  <li><strong><em>Optimum sorting</em></strong>  - min-comparison sorting, min-comparison merging, min-comparison selection<br /></li>
  <li><strong><em>External sorting</em></strong> <br /></li>
</ol>

<h3 id="comparisons-based-sorting">Comparisons based sorting</h3>
<p>It is particular type of sorting algorithm which read the list elements through comparison operator that determines which of two elements should occur first int he final sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a>                       - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a>         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a> - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="online-sorts">Online sorts</h3>

<p>These sorts can start sorting their input without having received all of it. It can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="stable-sorts">Stable sorts</h3>

<p>A sorting algorithm is stable if whenever there are two records R and S with the <code>same key</code> and with R appearing before S in the original list, <code>R will appear before S</code> in the sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></li>
</ul>

<h3 id="time-complexity-chart">Time complexity chart</h3>

<table>
<thead>
<tr>
    <th><code class="mygreen">Good</code></th><th><code class="myyellow">Fair</code></th><th><code class="myred">Poor</code></th>
</tr>
</thead>
</table>

<p><br /></p>

<p><sup>*</sup>(V/D) - Variant or derived from</p>

<p><br /></p>
<table>
<thead>
<tr>
    <th>Algorithm</th><th colspan="3">Time complexity</th><th>Space complexity</th><th>Notes</th>
</tr>
<tr>
    <th /><th>Best</th><th>Average</th><th>Worst</th><th /><th />
</tr>
</thead>
<tbody>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></code></td>
    <td><code class="myyellow">Ω(n)</code></td>
    <td>O(n × n!)</td>
    <td><code class="myred">Unbounded</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></code></td>
    <td>O(n)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><msup><mi>2</mi><mn>p</mn></msup></mrow></mfrac></math>)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></code></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td><code class="mygreen">Write efficient</code></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>Bubble + Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></code></td>
    <td>Ω(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="mygreen">O(1)</code></td>
    <td><a href="http://learnwrite.github.io/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td />
    <td>Quick sort + Heap sort<br /><a href="https://www.dropbox.com/s/21q1ymf2y86kqcz/introsort.pdf" target="_blank"> IntroSort Paper</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(n)</code></td>
    <td>(V/D) - Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></code></td>
    <td>O(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="myred">O(n)</code></td>
    <td><a href="http://learnwrite.github.io/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></code></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>*(V/D) - Bubble sort</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></code></td>
    <td />
    <td />
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td><a href="http://wordaligned.org/articles/patience-sort" target="_blank">Longest common sequence</a></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></code></td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>O(n)</td>
    <td>Faster on partial sorted list</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>*(V/D) - Heap sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></code></td>
    <td />
    <td />
    <td />
    <td>O(n)</td>
    <td>Slower than bubble sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>Merge + Insertion sort</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Online sorting</th>
    <th />
    <th />
    <th />
    <th />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Stable sorting</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></td>
    <td />
    <td>O(n + k)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n.k)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></td>
    <td />
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></td>
    <td />
    <td />
    <td>O(N + n)</td>
    <td>O(N + n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></td>
    <td />
    <td />
    <td>O(kN)</td>
    <td>O(k + N)</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Non-category Sorts</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_sort" target="_blank">Adaptive sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/American_flag_sort" target="_blank">American flag sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bead_sort" target="_blank">Bead sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Burstsort" target="_blank">Burstsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian tree</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Comparison_sort" target="_blank">Comparison sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank">Dutch national flag problem</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Elevator_algorithm" target="_blank">Elevator algorithm</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/External_sorting" target="_blank">External sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Flashsort" target="_blank">Flashsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Integer_sorting" target="_blank">Integer sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Internal_sort" target="_blank">Internal sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/J_sort" target="_blank">J sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Median_cut" target="_blank">Median cut</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Ordicate" target="_blank">Ordicate</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pairwise_sorting_network" target="_blank">Pairwise sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pancake_sorting" target="_blank">Pancake sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Partial_sorting" target="_blank">Partial sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Quantum_sort" target="_blank">Quantum sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Samplesort" target="_blank">Samplesort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Sorting_network" target="_blank">Sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spaghetti_sort" target="_blank">Spaghetti sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spreadsort" target="_blank">Spreadsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tournament_sort" target="_blank">Tournament sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tree_sort" target="_blank">Tree sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/UnShuffle_sort" target="_blank">UnShuffle sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
</feed>
