<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: strings | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/strings/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-03-04T00:07:42-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers*</a></li>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</a></li>
      <li><a href="#merge-two-sorted-array">Merge two sorted array</a></li>
      <li><a href="#merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</a></li>
    </ul>
  </li>
  <li><a href="#define-arr1size-5">define ARR1SIZE 5</a>    <ul>
      <li><a href="#sort-array-based-on-count">Sort array based on count</a></li>
    </ul>
  </li>
  <li><a href="#define-arraysize-6">define ARRAYSIZE 6</a>    <ul>
      <li><a href="#find-odd-number-of-occurrence">Find odd number of occurrence</a></li>
      <li><a href="#find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</a></li>
      <li><a href="#string-problems">String Problems</a>        <ul>
          <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
          <li><a href="#duplicates-and-count">Duplicates and Count*</a></li>
          <li><a href="#remove-duplicate-spaces">Remove duplicate spaces*</a></li>
          <li><a href="#remove-spaces">Remove spaces*</a></li>
          <li><a href="#remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements*</a></li>
          <li><a href="#rotate-a-string">Rotate a string*</a></li>
          <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. <br /><br />
Give a Θ(n) way of solving this problem. Prove its running time and correctness. <br />Your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p><strong>Other variant of the same problem</strong> <br />
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
Input [6,4,5,7,9,1,2]<br />
Sum = 10 <br />
Then the pairs are  [6,4] , [9,1]
<!-- more --></p>

<p><br />
<strong>Solution</strong></p>

<p>There are three solutions<br /></p>

<p><strong>Sorted array</strong> <br />
1. When array is sorted, take two index variable. Indx1 point to fisrt index and Indx2 points to the last index<br />
2. If Indx1 + Indx2 &lt; sum then increment the Indx1<br />
3. Else if Indx1 + Indx2 &gt; sum then decrement Indx 2<br />
4. If Indx 1 &gt; Indx 2 then halt -&gt; No pairs found<br /></p>

<p>If pair found then keep doing the same to find next pair.
{% coderay lang:c linenos:true Sorted array http://ideone.com/fmKgvW Run Code %}
#include <stdio.h /></p>

<p>void printPairs(int arr[], int arr_size, int sum)
{
    int front = 0;
    int back = arr_size - 1;</p>

<pre><code>while (front &lt; back) {
    if (arr[front] + arr[back] &lt; sum) {
        front++;
    } else if (arr[front] + arr[back] &gt; sum) {
        back--;
    } else {
        printf ("Pair with given sum %d is (%d, %d) \n",
                sum, arr[front], arr[back]);
        back--;
    }
} }
</code></pre>

<p>/* Driver program to test above function */
int main()
{
    int A[] = {4, 5, 6, 10, 12, 12};
    int sum = 16;
    int arr_size = 6;</p>

<pre><code>printPairs(A, arr_size, sum);

return 0; } {% endcoderay %}
</code></pre>

<p><strong>Hashing/Binary Map</strong><br />
Another solution works for both <em>sorted</em> and <em>unsorted</em> array. 
In this approach we not actually using the hash function fundamental idea is to maintain the occurrence of number i.e. Binary Map</p>

<blockquote>
  <p>The caveat is that we need extra memory.</p>
</blockquote>

<ol>
  <li>Get the number from input array<br /></li>
  <li>Num2 = Sum - arr[i]<br /></li>
  <li>If we have encountered Num2 already in input array then we found a pair i.e.<br /> if(binMap[Num2] == 1)<br /></li>
  <li>Else record input element in Binary map i.e. binMap[arr[i]] = 1;<br /></li>
</ol>

<p>{% coderay lang:c linenos:true Binary Map http://ideone.com/S0CNlO Run Code %}
#include <stdio.h>
#define MAX 100000</stdio.h></p>

<p>void printPairs(int arr[], int arr_size, int sum)
{
    int i = 0;
    int temp = 0;
    int binMap[MAX] = {0}; /<em>initialize hash map as 0</em>/</p>

<pre><code>for(i = 0; i &lt; arr_size; i++)
{
    temp = sum - arr[i];
    if(temp &gt;= 0 &amp;&amp; binMap[temp] == 1)
    {
        printf("Pair with given sum %d is (%d, %d) \n",
                sum, arr[i], temp);
    }
    binMap[arr[i]] = 1;
} }
</code></pre>

<p>/* Driver program to test above function */
int main()
{
    int A[] = {12, 4, 45, 6, 10, 12};
    int sum = 16;
    int arr_size = 6;</p>

<pre><code>printPairs(A, arr_size, sum);

return 0; } {% endcoderay %}
</code></pre>

<p><strong>Bit Vector</strong><br /></p>

<p>This approach is similar to Binary map except using array for extra space we use bit vector to save some of extra space.</p>

<blockquote>
  <p>This program works for max for 31 as bit map is <em>int</em> which is 32 bits. For numbers more than 31 more memory could be allocated.</p>
</blockquote>

<p>{% coderay lang:c linenos:true Bit Vector http://ideone.com/iFDimZ Run Code %}
#include <stdio.h /></p>

<p>void printPairs(int arr[], int arr_size, int sum)
{
    int i = 0;
    int temp = 0;
    int bitmap = 0; // all bits are 0
    int bitmask = 0;</p>

<pre><code>for(i = 0; i &lt; arr_size; i++)
{
    temp = sum - arr[i];

    bitmask = 0;
    bitmask = 1 &lt;&lt; temp;

    if(temp &gt;= 0 &amp;&amp; (bitmap &amp; bitmask))
    {
        printf("Pair with given sum %d is (%d, %d) \n",
               sum, arr[i], temp);
    }
    bitmap |= 1 &lt;&lt; arr[i];
} }
</code></pre>

<p>/* Driver program to test above function */
int main()
{
    int A[] = {12, 4, 13, 6, 10, 3};
    int sum = 16;
    int arr_size = 6;</p>

<pre><code>printPairs(A, arr_size, sum);

return 0; } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] &gt;= k. <br /></p>

<p>Your algorithm should also output all the pairs of indices i, j such that A[i] + A[j] &gt;= k </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers*</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input [2,1, 3, 2, 3, 1, 4]</p>

<p>Output  [2,1,3] </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-two-sorted-array">Merge two sorted array</h4>
<p>Input array1 [1, 3, 6, 7] <br />
Input array2 [1, 2, 4]</p>

<p>Output [1, 1, 2, 3, 4, 6, 7]</p>

<p>{% coderay lang:c linenos:true Merge Sorted Arrays http://ideone.com/WaTPEt Run Code %}
#include <stdio.h /></p>

<p>int lSize = 4;
int rSize = 3;
int L[4] = {1, 3, 6, 7};
int R[4] = {1, 2, 4};
int finalArray[7];</p>

<p>void merge()
{
    int lIndx = 0;
    int rIndx = 0;
    int i = 0;</p>

<pre><code>for (i = 0; i &lt; (lSize + rSize); i++) {
    if (L[lIndx] &lt;= R[rIndx]) {
        finalArray[i] = L[lIndx++];
        if (lIndx == lSize) {
            break;
        }
    } else {
        finalArray[i] = R[rIndx++];
        if (rIndx == rSize) {
            break;
        }
    }
}

i++;
if (lIndx != lSize) {
    while(1) {
        finalArray[i++] = L[lIndx++];

        if (lIndx == lSize) {
            return;
        }
    }
}
if (rIndx != rSize) {
    while(1) {
        finalArray[i++] = R[rIndx++];

        if (rIndx == rSize) {
            return;
        }
    }
} }
</code></pre>

<p>void display()
{
    int i = 0;</p>

<pre><code>printf("\n\nArray1: ");
for (i = 0; i &lt; lSize; i++) {
    printf("%d ", L[i]);
}

printf("\nArray2: ");
for (i = 0; i &lt; rSize; i++) {
    printf("%d ", R[i]);
}

printf("\nMerge array: ");
for (i = 0; i &lt; lSize+rSize; i++) {
    printf("%d ", finalArray[i]);
} }
</code></pre>

<p>int main()
{
    // Test 1
    merge();
    display();</p>

<pre><code>// Test 2
R[0] = 1;
R[1] = 3;
R[2] = 6;
R[3] = 7;
L[0] = 1;
L[1] = 2;
L[2] = 4;
lSize = 3;
rSize = 4;
merge();
display();

// test 3
L[0] = 1;
R[0] = 1;
lSize = 1;
rSize = 1;
merge();
display();

return 0; } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</h4>

<p>Input array1 [6, 3, 6, 1, 7] <br />
Input array2 [5, 1, 2, 4, 6]</p>

<p>Output could be in sorted order or non-sorted order based on algorithm you choose to solve it.</p>

<p>Output [1, 2, 3, 4, 5, 6, 7]  OR<br />
 Output [6, 3, 1, 7, 5, 2, 4] OR <br />
 Output [5, 1, 2, 4, 6, 3, 7] OR <br />
 Output [6, 5, 3, 1, 2, 4, 7] etc…</p>

<p>{% coderay lang:c linenos:true Merge Unsorted Arrays http://ideone.com/IScZ7r Run Code %}
#include <stdio.h /></p>

<h1 id="define-arr1size-5">define ARR1SIZE 5</h1>
<p>#define ARR2SIZE 5</p>

<p>int main()
{
    int arr1[] = {6, 3, 6, 1, 7};
    int arr2[] = {5, 1, 2, 4, 6};
    int arr3[ARR1SIZE + ARR2SIZE];</p>

<pre><code>// Using bit map, All bits are 0
int bitMap = 0;
int bitMask = 0;
int i = 0;
int k = 0;

for (i = 0; i &lt; ARR1SIZE; i++) {
    // Check if value already exist
    bitMask = 0;
    bitMask = 1 &lt;&lt; arr1[i];

    if (bitMap &amp; bitMask) {
        continue;
    }
    arr3[k++] = arr1[i];

    // Mark bitMap that value exist
    bitMap |= 1 &lt;&lt; arr1[i];
}

for (i = 0; i &lt; ARR2SIZE; i++) {
    // Check if value already exist
    bitMask = 0;
    bitMask = 1 &lt;&lt; arr2[i];

    if (bitMap &amp; bitMask) {
        continue;
    }
    arr3[k++] = arr2[i];

    // Mark bitMap that value exist
    bitMap |= 1 &lt;&lt; arr2[i];
}

printf("Merged Array\n");
for (i = 0; i &lt; k; i++) {
    printf("%d ", arr3[i]);
}

return 0; } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sort-array-based-on-count">Sort array based on count</h4>

<p>Given number in array [2, 1, 3, 2, 1, 4] sort array based on count of numbers.</p>

<p>Sort them as [1, 1, 2, 2, 3, 4]</p>

<p>{% coderay lang:c linenos:true Counting Sort http://ideone.com/0BumWs Run Code %}
#include <stdio.h /></p>

<h1 id="define-arraysize-6">define ARRAYSIZE 6</h1>
<p>#define MAX 4</p>

<p>int main()
{
    int arr[] = {2, 1, 3, 2, 1, 4};
    int final[ARRAYSIZE];</p>

<pre><code>// Given we know max element in array
// This technique is based on counting sort
int count[MAX + 1] = {0};
int i = 0;
int j = 0;

for (i = 0; i &lt; ARRAYSIZE; i++) {
    count[arr[i]]++;
}

for (i = 0; i &lt; MAX + 1; i++) {
    if (count[i] != 0) {
        while (count[i] != 0) {
            final[j++] = i;
            count[i]--;
        }
    }
}

printf("Sorted Array\n");
for (i = 0; i &lt; ARRAYSIZE; i++) {
    printf("%d ", final[i]);
}

return 0; } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-odd-number-of-occurrence">Find odd number of occurrence</h4>

<p>Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number in O(n) time &amp; constant space.</p>

<p>{% coderay lang:c linenos:true Odd occurence  %}
#include <stdio.h /></p>

<p>int getOddOccurrence(int ar[], int ar_size)
{
     int i;
     int res = 0; 
     for (i=0; i &lt; ar_size; i++)   <br />
        res = res ^ ar[i];</p>

<pre><code> return res; }
</code></pre>

<p>/* Diver function to test above function */
int main()
{
     int ar[] = {2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2};
     int n = sizeof(ar)/sizeof(ar[0]);
     printf(“%d”, getOddOccurrence(ar, n));
     return 0;
}
{% endcoderay %}</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h4 id="find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</h4>

<p>Given an unsorted array that contains even number of occurrences for all numbers except two numbers. Find the two numbers which have odd occurrences in O(n) time complexity and O(1) extra space.</p>

<p>Input: [12, 23, 34, 12, 12, 23, 12, 45]<br />
Output: 34 and 45</p>

<p>Input: [4, 4, 100, 5000, 4, 4, 4, 4, 100, 100]<br />
Output: 100 and 5000</p>

<p>Input: [10, 20]<br />
Output: 10 and 20</p>

<p><a href="http://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurences-in-an-unsorted-array/" target="_blank">Solution Explanation</a></p>

<p>{% coderay lang:c linenos:true 2 Odd Num  %}
// Program to find the two odd occurring elements
#include<stdio.h /></p>

<p>/* Prints two numbers that occur odd number of times. The
   function assumes that the array size is at least 2 and
   there are exactly two numbers occurring odd number of times. <em>/
void printTwoOdd(int arr[], int size)
{
  int xor2 = arr[0]; /</em> Will hold XOR of two odd occurring elements <em>/
  int set_bit_no;  /</em> Will have only single set bit of xor2 */
  int i;
  int n = size - 2;
  int x = 0, y = 0;</p>

<p>/* Get the xor of all elements in arr[]. The xor will basically
     be xor of two odd occurring elements */
  for(i = 1; i &lt; size; i++)
    xor2 = xor2 ^ arr[i];</p>

<p>/* Get one set bit in the xor2. We get rightmost set bit
     in the following line as it is easy to get */
  set_bit_no = xor2 &amp; ~(xor2-1);</p>

<p>/* Now divide elements in two sets: 
    1) The elements having the corresponding bit as 1. 
    2) The elements having the corresponding bit as 0.  <em>/
  for(i = 0; i &lt; size; i++)
  {
     /</em> XOR of first set is finally going to hold one odd 
       occurring number x */
    if(arr[i] &amp; set_bit_no)
      x = x ^ arr[i];</p>

<pre><code> /* XOR of second set is finally going to hold the other 
   odd occurring number y */
else
  y = y ^ arr[i];    }
</code></pre>

<p>printf(“\n The two ODD elements are %d &amp; %d “, x, y);
}</p>

<p>/* Driver program to test above function */
int main()
{
  int arr[] = {4, 2, 4, 5, 2, 3, 3, 1};
  int arr_size = sizeof(arr)/sizeof(arr[0]);
  printTwoOdd(arr, arr_size);</p>

<p>return 0;
}
{% endcoderay %}</p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<p>{% coderay lang:c linenos:true String Reverse http://ideone.com/vfTxcr Run Code %}
#include <stdio.h>
#include <string.h /></stdio.h></p>

<p>int main(void) {
    int i = 0;
    char str[] = “testString”;
    int len = strlen(str);</p>

<pre><code>for(i = 0; i &lt; len/2; i++){
	str[len - i - 1] ^= str[i];
	str[i] ^= str[len - i - 1];
	str[len - i - 1] ^= str[i];
}

printf("Reverse String %s \n", str);
 
return 0; }
</code></pre>

<p>{% endcoderay %}
<br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="duplicates-and-count">Duplicates and Count*</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-duplicate-spaces">Remove duplicate spaces*</h4>
<p>Remove all duplicate spaces from the string</p>

<p>Input string<br />
Hi^^^There!!!^^Wassup<br />
 ^ - Represents  space</p>

<p>Output<br />
Hi^There!!!^Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-spaces">Remove spaces*</h4>
<p>Remove all the spaces from a string</p>

<p>Input string<br />
Hi there!!! Wassup</p>

<p>Output<br />
Hithere!!!Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements*</h4>
<p>Remove all consequtive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="rotate-a-string">Rotate a string*</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

]]></content>
  </entry>
  
</feed>
