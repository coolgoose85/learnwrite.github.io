<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cs | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/cs/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2014-02-01T09:32:53-08:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Graph Algorithms]]></title>
    <link href="http://learnwrite.github.io/blog/2013/12/14/graph-algorithms/"/>
    <updated>2013-12-14T13:03:00-08:00</updated>
    <id>http://learnwrite.github.io/blog/2013/12/14/graph-algorithms</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#graph-problems">Graph problems</a>    <ul>
      <li><a href="#find-neighbour-in-array">Find neighbour in array</a></li>
    </ul>
  </li>
</ul>

<h3 id="graph-problems">Graph problems</h3>

<h4 id="find-neighbour-in-array">Find neighbour in array</h4>

<p>Find all the neighbours of a given element in array<br /></p>

<p>Neighbours can be defined as<br /></p>

<ol>
  <li>Neighbours are only vertical and horizontal elements next to given element<br /></li>
  <li>Neighbours are only vertical, horizontal and diagonal elements next to given element<br /></li>
  <li>Neighbours are all vertical, horizontal and diagonal elements next to given element<br /></li>
</ol>

<!-- more -->
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour1</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * For e.g.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> *
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span> (<span class="integer">1</span>,<span class="integer">1</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">6</span>, <span class="integer">8</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">1</span> (<span class="integer">0</span>,<span class="integer">0</span>) = <span class="integer">4</span>, <span class="integer">2</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span class="error">“</span>%d <span class="error">“</span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (sx - <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span> 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
<span class="line-numbers"><a href="#n26" name="n26">26</a></span> 
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="keyword">if</span> (sx + <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour2</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: diagnolNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * diagonal neighbours too.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> *
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span> (<span class="integer">1</span>,<span class="integer">1</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">6</span>, <span class="integer">8</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">7</span>, <span class="integer">9</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">1</span> (<span class="integer">0</span>,<span class="integer">0</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">5</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="directive">void</span> diagnolNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span class="error">“</span>%d <span class="error">“</span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (sx - <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span> 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span class="keyword">if</span> (sx + <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span> 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour3</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: allNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns all the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * all diagonal neighbours.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">1</span>   <span class="integer">2</span>   <span class="integer">3</span>   <span class="integer">4</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">5</span>   <span class="integer">6</span>   <span class="integer">7</span>   <span class="integer">8</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span class="integer">9</span>   <span class="integer">10</span>  <span class="integer">11</span>  <span class="integer">12</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * <span class="integer">13</span>  <span class="integer">14</span>  <span class="integer">15</span>  <span class="integer">16</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> *
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span>  (<span class="integer">1</span>,<span class="integer">0</span>) = <span class="integer">1</span>, <span class="integer">9</span>, <span class="integer">13</span>, <span class="integer">6</span>, <span class="integer">7</span>, <span class="integer">8</span>, <span class="integer">10</span>, <span class="integer">15</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">11</span> (<span class="integer">2</span>,<span class="integer">2</span>) = <span class="integer">3</span>, <span class="integer">7</span>, <span class="integer">15</span>, <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">12</span>, <span class="integer">1</span>, <span class="integer">6</span>, <span class="integer">16</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> * **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="directive">void</span> allNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="predefined-type">int</span> done = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="predefined-type">int</span> tempX = sx;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="predefined-type">int</span> tempY = sy;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// Get all the elements in row</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= row; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span class="keyword">if</span> (array[i][sy] == array[sx][sy]) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[i][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="comment">// Get all the elements in col</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span class="keyword">for</span> (j = <span class="integer">0</span>; j &amp;lt;= col; j++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span class="keyword">if</span> (array[sx][j] == array[sx][sy]) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][j]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>}
<span class="line-numbers"><a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span><span class="comment">// Diagnols</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    tempX--; tempY--;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="keyword">if</span> (tempX &amp;gt;= startRow  &amp;amp;&amp;amp; tempY &amp;gt;= startCol) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[tempX][tempY]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        done = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span> 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>    sx++,sy++;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    <span class="keyword">if</span> (sx &amp;lt;= row &amp;amp;&amp;amp; sy &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy]);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (done) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>
]]></content>
  </entry>
  
</feed>
