<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system design | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/system-design/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-12-31T12:55:31-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[File System, Scheduling, Communication and Memory Management]]></title>
    <link href="http://distkeys.com/blog/2014/03/16/file-system-scheduling-communication-and-memory-management/"/>
    <updated>2014-03-16T18:26:00-07:00</updated>
    <id>http://distkeys.com/blog/2014/03/16/file-system-scheduling-communication-and-memory-management</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#the-v-distributed-system">The V Distributed System</a></li>
  <li><a href="#mach">Mach</a></li>
  <li><a href="#xen">Xen</a></li>
  <li><a href="#denali">Denali</a></li>
  <li><a href="#unix">UNIX</a></li>
  <li><a href="#references">References</a></li>
</ul>

<p>The scope of this document is limited to the study of placement of following services in <strong>Mach, V Distributed System, Denali, XEN and UNIX Systems</strong> <br /><br />
•	File System<br />
•	Scheduling<br />
•	Communication<br />
•	Memory Management<br /></p>

<!-- more -->

<p><br /></p>

<h3 id="the-v-distributed-system">The V Distributed System</h3>

<p>The V operating system is a <strong>microkernel</strong> designed to work for a cluster of computer machines connected by high performance network. The V system was motivated by availability and functionality of high performing computers and networks. The main idea was that kernel is distributed in sense that a separate copy of kernel executes on each particular network node and each copy interacts with each other to provide single system abstraction of process. <br /><br />
The design of the V system was desired to provide:<br />
•	High performance communication<br />
•	Protocol defines the system<br />
•	Small operating system kernel implementing basic protocols and services<br /></p>

<p>The V System provides services at process level in machines and in network independent fashion. Following are some services provided by the V system:<br />
•	<strong>Process Scheduling</strong> – Kernel process server (which is User space as well as Kernel space). Scheduling is <strong>provided by kernel</strong> by only priority based scheduling but second level of scheduling is performed <strong>outside the kernel.</strong><br />
•	<strong>Communication</strong> – Provided in Kernel Space.<br />
•	<strong>Memory Management</strong> – Kernel as well as Kernel memory server. Kernel must implement some level of memory support to protect the <strong>integrity.</strong> Kernel serves as <strong>binding, caching</strong> and provides <strong>consistency</strong> mechanism for regions and open files. The <strong>Kernel memory server</strong> supports file-like read and write access to address space using UIO interfaces.<br />
•	<strong>File System</strong> – File system service is provided by V file server.<br /></p>

<p><strong>Kernel Servers:</strong> The V System provides the concept of Kernels server in which above services is implemented by a separate kernel module which are replicated across nodes. Each module is registered by IPC and <strong>invoked from process level.</strong></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h3 id="mach">Mach</h3>

<p>Mach system is <strong>microkernel</strong> operating system with design goals to provide portability, extensibility, security in kernel, support transparent distributed operation and reduce number of features in kernel make it less complex.<br /><br /></p>

<p>•	<strong>Process Scheduling</strong> – Kernel space to ensure fairness of system.<br />
•	<strong>Communication</strong> – Provided in Kernel Space using ports.<br />
•	<strong>Memory Management</strong> – Kernel as well as User space. Kernel must manage page tables. User level space decides the page replacement algorithm. User level memory manager use system calls to communicate with kernel for memory mapping, page-in, page-out, and page-level locking.<br />
•	<strong>File System</strong> – File system service is managed outside the Kernel. <br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h3 id="xen">Xen</h3>

<p>Xen is virtual machine monitor for x86 architecture, which allows multiple operating systems to share same hardware with safe and orderly manner without losing any performance. Xen is a hypervisor, which can be argued as a <strong>microkernel</strong>. Although it provides services like microkernel but it is <strong>not a microkernel</strong>. Soon, it is expected to be Xen emerging as a Microkernel.<br /><br /></p>

<p>Xen is implemented on the concept of Para virtualization which requires changes to be made in guest OS but it does not require any change in application binary interface which gives freedom to guest application from change.<br /><br /></p>

<p>Xen provides solution to various challenges for virtualization. Each guest OS assumes that it has the highest privilege in the system. All guest OS are hosted and managed by Xen, Xen has to be in highest privilege in the system. Xen take advantage of x86 architecture and modify the guest OS from Ring 0 to Ring 1 and Xen resides in Ring 0.<br /><br /></p>

<p>•	<strong>Scheduling</strong> – Kernel space to ensure fairness of system. Xen uses Borrowed Virtual Time scheduling algorithm.<br />
•	<strong>Communication</strong> – Service is provided in Xen as well as Guest OS space. Xen provides the abstraction of virtual firewall router where each domain has one or more network interfaces logically connected to VFR. For transmitting packet Guest OS enqueue descriptor and Xen copies the descriptor and to ensure safety copies the packet header and execute any matching filter rules.<br />
•	<strong>Memory Management</strong> – Guest OS is responsible for allocating and managing hardware page tables. In this case, relative to Xen Guest OS can be called in user space although Guest OS is in Ring 1 and applications run in Ring 3. Xen involvement is to ensure safety and isolation. When Guest OS requires new page table it allocates and initializes from its own memory reservations and register it with Xen.<br />
•	<strong>File System</strong> – File system service is managed outside the Kernel. <br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h3 id="denali">Denali</h3>

<p>Denali <strong>isolation</strong> kernel is a x86 based operating system that isolates untrusted software service in separate protection domain. It is a small kernel operating system architecture targeted at hosting multiple applications with little data sharing. Small kernel sometimes resembles to <strong>microkernel.</strong>  <br /><br />
Following are the Denali design Principles:
•	Expose low-level resources rather than high-level abstractions.<br />
•	Prevent direct sharing by exposing only private, virtualized namespaces.<br />
•	Scalability<br />
•	Modify the virtualized architecture for simplicity, scale, and performance.<br /></p>

<p>Denali system focuses on executing service in separate VM, which provides stronger isolation.</p>

<p>•	<strong>Scheduling</strong> – Scheduling is done by kernel in Denali.<br />
•	<strong>Communication</strong> – Service is provided in Denali as well as Guest OS space. Denali Ethernet has been simplified so that it requires only one PIO to send and receive packet, which improves performance. To get this benefit Guest OS device driver has been modified. <br />
•	<strong>Memory Management</strong> – Guest OS is responsible for accessing portion of physical address space allowed to Guest OS. Denali involvement is to ensure safety and isolation. The isolation kernel allocates swap region. Upon page fault isolation kernel take care by verifying the faulting VM has not accessed illegal virtual address.<br />
•	<strong>File System</strong> – File system service is managed outside the Kernel. <br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h3 id="unix">UNIX</h3>

<p>Unix is the <strong>monolithic</strong> kernel operating system, which means all the services, has to be implemented and provided by the OS kernel. Unix philosophy has been described as follows :<br /><br />
1.	<strong>Rule of Modularity:</strong> Write simple parts connected by clean interfaces.<br />
2.	<strong>Rule of Clarity:</strong> Clarity is better than cleverness.<br />
3.	<strong>Rule of Composition:</strong> Design programs to be connected to other programs.<br />
4.	<strong>Rule of Separation:</strong> Separate policy from mechanism; separate interfaces from engines.<br />
5.	<strong>Rule of Simplicity:</strong> Design for simplicity; add complexity only where you must.<br />
6.	<strong>Rule of Parsimony:</strong> Write a big program only when it is clear by demonstration that nothing else will do.<br />
7.	<strong>Rule of Transparency:</strong> Design for visibility to make inspection and debugging easier.<br />
8.	<strong>Rule of Robustness:</strong> Robustness is the child of transparency and simplicity.<br />
9.	<strong>Rule of Representation:</strong> Fold knowledge into data so program logic can be stupid and robust.<br />
10.	<strong>Rule of Least Surprise:</strong> In interface design, always do the least surprising thing.<br />
11.	<strong>Rule of Silence:</strong> When a program has nothing surprising to say, it should say nothing.<br />
12.	<strong>Rule of Repair:</strong> When you must fail, fail noisily and as soon as possible.<br />
13.	<strong>Rule of Economy:</strong> Programmer time is expensive; conserve it in preference to machine time.<br />
14.	<strong>Rule of Generation:</strong> Avoid hand hacking; write programs to write programs when you can.<br />
15.	<strong>Rule of Optimization:</strong> Prototype before polishing. Get it working before you optimize it.<br />
16.	<strong>Rule of Diversity:</strong> Distrust all claims for “one true way”.<br />
17.	<strong>Rule of Extensibility:</strong> Design for the future, because it will be here sooner than you think.<br /></p>

<p>•	<strong>Scheduling</strong> – Scheduling is done by kernel in Unix.<br />
•	<strong>Communication</strong> – Systems calls are be called in user space but the authorization is provided by Kernel.<br />
•	<strong>Memory Management</strong> – Kernel Space.<br />
•	<strong>File System</strong> – Kernel Space.<br /></p>

<p><br /><br /><br /></p>

<h3 id="references">References</h3>

<p><a href="http://www.faqs.org/docs/artu/ch01s06.html" target="_blank">Basics of the Unix Philosophy</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Design Problems]]></title>
    <link href="http://distkeys.com/blog/2014/02/27/system-design-problems/"/>
    <updated>2014-02-27T22:51:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/02/27/system-design-problems</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#unique-user-id">Unique User ID</a></li>
  <li><a href="#mean-and-median">Mean and Median</a></li>
  <li><a href="#how-ls-works">How ls works?</a></li>
  <li><a href="#file-descriptor">File descriptor</a></li>
</ul>

<h3 id="unique-user-id">Unique User ID</h3>

<p>Design a system to generate unique id for 1 billion user in distributed system
<br /><br /></p>

<h3 id="mean-and-median">Mean and Median</h3>

<p>You are given say 20 nodes in a distributed system and each node have 1 billion numbers. Find mean and median. You can have some other nodes for co-ordination.</p>

<p>Mean = (sum of all the numbers) / total numbers<br />
Median = Mid element in sorted sequence</p>

<p>For example<br />
Input = [2, 3, 4, 1]<br /></p>

<p>Mean = (2+3+4+1) / 4 =2.5<br />
For median sorted sequence is [1, 2, 3, 4]. Median is 2 or 3.
<!-- more --></p>

<p><br /><br /></p>

<h3 id="how-ls-works">How ls works?</h3>

<ul>
  <li>Distributed systems people talk about NFS<br /></li>
  <li>Typical low-level systems folks get into the copy-on-write implementation of fork<br /></li>
  <li>Filesystem folks get into finding the blocks that constitute the directory
<br /><br /></li>
</ul>

<h3 id="file-descriptor">File descriptor</h3>

<p>How file descriptor is generated?</p>

<p>Before I start talking about <em>File Descriptor</em> lets first understand the Library functions and System calls.</p>

<blockquote>
  <p>System calls are functions that transfer control from the user process to the
operating system kernel.</p>
</blockquote>

<p>Functions such as <em>read()</em>, <em>write()</em> etc are system calls.</p>

<blockquote>
  <p>Library functions typically provide a richer set of features. Library functions are implemented on top of system calls.</p>
</blockquote>

<p>The first step is the <em>open()</em> system call which either open an existing file or create a new file. 
Multiple parameters can be provided for the requirement. For details of these parameters visit <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?open+2" target="_blank">here.</a></p>

<p>In C program, we use <em>fopen()</em> rather than <em>open()</em> and this is the difference between Library function and System Call. Library function <em>fopen()</em> will internally call <em>open()</em> and configure parameter based on input provided to <em>fopen()</em></p>

<p>{% coderay lang:cplusplus linenos:false fopen() %}
#include <stdio.h /></p>

<p>int main()
{
   FILE *fp;</p>

<pre><code>//Open file test.txt in read mode    fp = fopen("/tmp/test.txt", "r");    fclose(fp);
</code></pre>

<p>return 0;
}
{% endcoderay%}</p>

<p>Executing this code under <em>dtruss</em></p>

<p>{% blockquote %}
 $ sudo dtruss ./file 2&gt;&amp;1 | grep open
open_nocancel(“/tmp/test.txt\0”, 0x0, 0x1B6)		 = -1 Err#2
open(“/dev/dtracehelper\0”, 0x2, 0x7FFF5CE62180)		 = 3 0
open(“.\0”, 0x0, 0x1)		 = 3 0
open(“/usr/lib/dtrace/libdtrace_dyld.dylib\0”, 0x0, 0x0)		 = 3 0
{% endblockquote %}</p>

<p>Lets deep dive now into the File descriptor. In above C code we created a FILE* which is <em>file pointer or *file descriptor</em> at Library function level. In reality library function <em>fopen()</em> will call system call <em>open()</em> which will get the <em>file descriptor</em> information from filesystem. </p>

<p><em>fopen()</em> library call want to embed the file descriptor information with some additional information. For this purpose a struct is created called FILE and in this structure file descriptor information returned by <em>open()</em> system call is stored with other information.</p>

<blockquote>
  <p>FILE structure fields may vary depending on OS</p>
</blockquote>

<p>In MAC OS its as follows</p>

<p>{% coderay lang:cplusplus linenos:false FILE - stdio.h %}
 /*
  * stdio state variables.
  *
  * The following always hold:
  *
  *        if (_flags&amp;(__SLBF|__SWR)) == (__SLBF|__SWR),
  *                _lbfsize is -_bf._size, else _lbfsize is 0
  *        if _flags&amp;__SRD, _w is 0
  *        if _flags&amp;__SWR, _r is 0
  *
  * This ensures that the getc and putc macros (or inline functions) never
  * try to write or read from a file that is in <code>read' or </code>write’ mode.
  * (Moreover, they can, and do, automatically switch from read mode to
  * write mode, and back, on “r+” and “w+” files.)
  *
  * _lbfsize is used only to make the inline line-buffered output stream
  * code as compact as possible.
  *
  * _ub, _up, and _ur are used when ungetc() pushes back more characters
  * than fit in the current _bf, or when ungetc() pushes back a character
  * that does not match the previous one in _bf.  When this happens,
  * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
  * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
  *
  * NB: see WARNING above before changing the layout of this structure!
  */</p>

<p>typedef struct __sFILE {
         unsigned char <em>_p;        /</em> current position in (some) buffer <em>/
         int     _r;               /</em> read space left for getc() <em>/
         int     _w;               /</em> write space left for putc() <em>/
         short   _flags;           /</em> flags, below; this FILE is free if 0 <em>/
         short   _file;            /</em> fileno, if Unix descriptor, else -1 <em>/
         struct  __sbuf _bf;       /</em> the buffer (at least 1 byte, if !NULL) <em>/
         int     _lbfsize;         /</em> 0 or -_bf._size, for inline putc */</p>

<pre><code>     /* operations */
     void    *_cookie;        /* cookie passed to io functions */
     int     (*_close)(void *);
     int     (*_read) (void *, char *, int);
     fpos_t  (*_seek) (void *, fpos_t, int);
     int     (*_write)(void *, const char *, int);
 
     /* separate buffer for long sequences of ungetc() */
     struct  __sbuf _ub;     /* ungetc buffer */
     struct __sFILEX *_extra; /* additions to FILE to not break ABI */
     int     _ur;            /* saved _r when _r is counting ungetc data */
 
     /* tricks to meet minimum requirements even when malloc() fails */
     unsigned char _ubuf[3]; /* guarantee an ungetc() buffer */
     unsigned char _nbuf[1]; /* guarantee a getc() buffer */
 
     /* separate buffer for fgetln() when line crosses buffer boundary */
     struct  __sbuf _lb;     /* buffer for fgetln() */
 
     /* Unix stdio files get aligned to block boundaries on fseek() */
     int     _blksize;        /* stat.st_blksize (may be != _bf._size) */
     fpos_t  _offset;        /* current lseek offset (see WARNING) */  } FILE; {% endcoderay%}
</code></pre>

<p>In above snippet
{% coderay lang:cplusplus linenos:false FILE - stdio.h %}
  <code>// File descriptor from open()</code>
  short   _file;            /* fileno, if Unix descriptor, else -1 */</p>

<p>// The buffer through which the data will pass to system calls.
  struct  __sbuf _bf;       /* the buffer (at least 1 byte, if !NULL) <em>/
  int     _lbfsize;         /</em> 0 or -_bf._size, for inline putc */</p>

<p>unsigned char _ubuf[3]; /* guarantee an ungetc() buffer <em>/
  unsigned char _nbuf[1]; /</em> guarantee a getc() buffer */
{% endcoderay%}</p>

<p>{% img /assets/fopen.png [fopen.png] %}</p>

<p>To be continued…</p>

<p><br /><br /></p>
]]></content>
  </entry>
  
</feed>
