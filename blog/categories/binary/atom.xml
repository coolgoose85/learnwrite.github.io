<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: binary | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/binary/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-11-30T23:42:34-08:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[World of Bits and Bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/08/world-of-bits-and-bytes/"/>
    <updated>2013-10-08T13:17:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/08/world-of-bits-and-bytes</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#basics">Basics</a></li>
  <li><a href="#bitwise-operators">Bitwise Operators</a></li>
  <li><a href="#bit-fields">Bit Fields</a></li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</a></li>
      <li><a href="#how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</a></li>
      <li><a href="#one-function-to-set-and-unset">One function to set and unset</a></li>
      <li><a href="#unset-range-of-bits">Unset range of bits</a></li>
      <li><a href="#set-range-of-bits">Set range of bits</a></li>
    </ul>
  </li>
  <li><a href="#recomended-readings">Recomended readings</a></li>
</ul>

<p>Recently, I have realized that no matter how much C, C++ or other high level languages you know it all comes down to bit and bytes view of program.<br />
I started realizing that after all it’s not that easy to actually think and write in bit/byte manipulation. This is my attempt to learn and be more comfortable about thinking in bit/bytes.</p>

<h3 id="basics">Basics</h3>

<p>Introduction <a href="http://www.codeproject.com/Articles/2247/An-introduction-to-bitwise-operators" target="_blank">here</a>
<br /><br /><br /><br /></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>||              |               |               |              ||
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>|+- bit <span class="integer">31</span>      |               |               |       bit <span class="integer">0</span> -+|
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>|               |               |               |               |
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>+-- <span class="constant">BYTE</span> <span class="integer">3</span> -----+--- <span class="constant">BYTE</span> <span class="integer">2</span> ----+--- <span class="constant">BYTE</span> <span class="integer">1</span> ----+-- <span class="constant">BYTE</span> <span class="integer">0</span> -----+
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>|                               |                               |
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>+----------- <span class="constant">WORD</span> <span class="integer">1</span> ------------+----------- <span class="constant">WORD</span> <span class="integer">0</span> ------------+
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>|                                                               |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>+--------------------------- <span class="constant">DWORD</span> -----------------------------+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="constant">Hexadecimal</span> <span class="constant">Numbers</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="integer">0</span> <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span> <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span> <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span> <span class="constant">A</span> <span class="constant">B</span> <span class="constant">C</span> <span class="constant">D</span> <span class="constant">E</span> <span class="constant">F</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="bitwise-operators">Bitwise Operators</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="constant">The</span> &amp; operator (<span class="constant">AND</span>)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="integer">1</span>   &amp;   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">1</span>   &amp;   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">0</span>   &amp;   <span class="integer">1</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="integer">0</span>   &amp;   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="constant">The</span> | operator (<span class="constant">OR</span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="integer">1</span>   |   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="integer">1</span>   |   <span class="integer">0</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="integer">0</span>   |   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="integer">0</span>   |   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="constant">The</span> ^ operator (<span class="constant">XOR</span>)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="integer">1</span>   ^   <span class="integer">1</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="integer">1</span>   ^   <span class="integer">0</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="integer">0</span>   ^   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="integer">0</span>   ^   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="constant">The</span> ~ operator
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="constant">The</span> ~ (<span class="constant">Ones</span> <span class="constant">Complement</span> <span class="keyword">or</span> inversion) operator acts only on one value
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="keyword">and</span> it inverts it.
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>The &gt;&gt; (<span class="constant">Right</span> <span class="constant">Shift</span>)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="integer">00001100</span>  - b 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="integer">00110000</span>  - b &lt;&lt; <span class="integer">2</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="constant">The</span> &lt;&lt; (<span class="constant">Left</span> <span class="constant">Shift</span>)
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="integer">00001100</span>  - b
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="integer">00000011</span>  - b &gt;&gt; <span class="integer">2</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="constant">Another</span> example is
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span class="integer">1</span>&lt;&lt;<span class="integer">4</span>; <span class="integer">0001</span> <span class="integer">0000</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="bit-fields">Bit Fields</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>struct date-struct {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span class="constant">BYTE</span> day   : <span class="integer">5</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">31</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>     month : <span class="integer">4</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">12</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>     year  : <span class="integer">14</span>;  <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> to <span class="integer">9999</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} date
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  |                           |       |         |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  +------ year ---------------+ month +-- day --+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>date.day = <span class="integer">12</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>dateptr = &amp;date;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>dateptr-&gt;year = <span class="integer">1852</span>;
</pre></div>
</div>
</div>

<p><a href="http://learnwrite.github.io/blog/2013/10/08/binary-number-operations/">Basics of Binary Arithmetic</a></p>

<p><br /></p>

<h3 id="problems">Problems</h3>

<h4 id="how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</h4>

<p>For e.g In byte 0000 1000 set bit no 6 will produce 0100 1000<br />
(Remember bit number starts with 0-7)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">For</span> problems where certain bit values needs to be changed, first we
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span><span class="modifier">nee</span></span>d to create a bit mask.
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>//<span class="constant">Bit</span> mask is a temporary variable with some value. Using this value
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>we will access <span class="keyword">and</span> change specific bits <span class="keyword">in</span> a byte of data.
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>//<span class="constant">For</span> e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>//<span class="constant">To</span> set <span class="integer">6</span>th bit <span class="keyword">in</span> a byte <span class="integer">0000</span> <span class="integer">1000</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">We</span> have             <span class="constant">MASK</span> <span class="integer">0100</span> <span class="integer">0000</span>  (<span class="constant">OR</span>)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                    ——————————————
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                         <span class="integer">0100</span> <span class="integer">1000</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">To</span> turn on certain bit <span class="keyword">in</span> a byte (<span class="constant">OR</span>) is used.
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>int set-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>{
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="keyword">return</span> (val | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Here</span>, val    = <span class="integer">0000</span> <span class="integer">1000</span> = <span class="integer">8</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      num    = <span class="integer">6</span> (set <span class="integer">6</span>th bit)
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      bitval = <span class="integer">1</span> (set to <span class="integer">1</span>)
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      <span class="integer">0000</span> <span class="integer">1000</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>(<span class="constant">OR</span>)  <span class="integer">0100</span> <span class="integer">0000</span>  (<span class="integer">1</span> &lt;&lt; <span class="integer">6</span>)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      ————————-
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      <span class="integer">0100</span> <span class="integer">0000</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</h4>

<p>For e.g In byte 0100 1000 unset bit no 6 will produce 0000 1000<br />
(Remember bit number starts with 0-7)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">To</span> unset specific bit we will use (<span class="constant">AND</span>) operation.
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>//<span class="constant">Mask</span> value need to be ‘0’ <span class="keyword">for</span> the bit to unset but rest of the bits
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span><span class="modifier">nee</span></span>d to ‘1’. The reason <span class="keyword">for</span> rest of the bits to set as ‘1’ is as
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>we are doing (<span class="constant">AND</span>), we don’t want to unset other bits which are
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>already set.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>//
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">For</span> e.g.
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>//<span class="constant">To</span> unset <span class="integer">6</span>th bit <span class="integer">0100</span> <span class="integer">1000</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>            <span class="constant">MASK</span> <span class="integer">1011</span> <span class="integer">1111</span> (<span class="constant">AND</span>)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                ——————————-
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                 <span class="integer">0000</span> <span class="integer">1000</span>   (<span class="constant">Result</span>)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>int unset-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>{
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">return</span> (val &amp; ~(bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Here</span>, val    = <span class="integer">0100</span> <span class="integer">1000</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      num    = <span class="integer">6</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      bitval = <span class="integer">0</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      (bitval &lt;&lt; num) = <span class="integer">0100</span> <span class="integer">0000</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>     ~(bitval &lt;&lt; num) = <span class="integer">1011</span> <span class="integer">1111</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      <span class="integer">0100</span> <span class="integer">1000</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      <span class="integer">1011</span> <span class="integer">1111</span> (<span class="constant">AND</span>)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      —————————-
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      <span class="integer">0000</span> <span class="integer">1000</span>    (<span class="constant">Result</span>)
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="one-function-to-set-and-unset">One function to set and unset</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>int change-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>{
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="keyword">return</span> (((val &amp; ~(bitval &lt;&lt; num)) | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="unset-range-of-bits">Unset range of bits</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Unset</span> range of bits
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">For</span> e.g. <span class="error">1001</span> <span class="integer">1001</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Unset</span> bits from <span class="integer">2</span> to <span class="integer">5</span> i.e. <span class="error">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> =&gt; <span class="integer">10</span> <span class="integer">0000</span> <span class="integer">01</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                               |- - - -| 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                      <span class="constant">Bits</span>  <span class="integer">7</span> <span class="integer">6</span> <span class="integer">5</span> <span class="integer">4</span> <span class="integer">3</span> <span class="integer">2</span> <span class="integer">1</span> <span class="integer">0</span>          
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Step1</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>------
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">To</span> unset range of bits we need to create <span class="constant">MASK</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> val  = <span class="integer">1001</span> <span class="integer">1001</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Mask</span> = <span class="integer">1100</span> <span class="integer">0011</span> (<span class="constant">AND</span>)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      _____________
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>        <span class="integer">1000</span> <span class="integer">0001</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Step</span> <span class="integer">2</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>-------
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">We</span> need to construct <span class="constant">MASK</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">In</span> <span class="constant">MASK</span>, bits <span class="keyword">in</span> range are <span class="integer">0</span> i.e. bits from <span class="integer">2</span>-<span class="integer">5</span> is <span class="integer">0</span> <span class="keyword">and</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>rest of the bits are <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">MASK</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>         |- - - -|
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Bits</span> <span class="integer">7</span> <span class="integer">6</span> <span class="integer">5</span> <span class="integer">4</span> <span class="integer">3</span> <span class="integer">2</span> <span class="integer">1</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Step</span> <span class="integer">3</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>-------
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  ((<span class="integer">1</span> &lt;&lt; <span class="integer">5</span>) - <span class="integer">1</span>) i.e. (<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">MAX</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>     <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  (-)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>    ------------------
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>     <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span>  <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>         =====&gt; (<span class="integer">1</span>)
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> (<span class="integer">1</span> &lt;&lt; <span class="integer">2</span>) - <span class="integer">1</span> i.e. (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> (-)
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>------------------
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>                   =======&gt; (<span class="integer">2</span>)
<span class="line-numbers"><a href="#n38" name="n38">38</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> (<span class="integer">1</span>) <span class="constant">OR</span> (<span class="integer">2</span>)
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>   (<span class="constant">OR</span>)
<span class="line-numbers"><a href="#n42" name="n42">42</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>-------------------
<span class="line-numbers"><a href="#n43" name="n43">43</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Final</span> <span class="constant">Step</span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> val  = <span class="integer">1001</span> <span class="integer">1001</span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Mask</span> = <span class="integer">1100</span> <span class="integer">0011</span> (<span class="constant">AND</span>)
<span class="line-numbers"><a href="#n48" name="n48">48</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      _____________
<span class="line-numbers"><a href="#n49" name="n49">49</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>        <span class="integer">1000</span> <span class="integer">0001</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> i is start of range
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> j is <span class="keyword">end</span> of range
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>int unsetBitsInRange(int val, int i, int j) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    int max = ~<span class="integer">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    int left = max - ((<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    int right = (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    int mask = left | right;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> (val &amp; mask);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="set-range-of-bits">Set range of bits</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">This</span> mask is similar to <span class="string"><span class="delimiter">&quot;</span><span class="content">Range Unset Mask</span><span class="delimiter">&quot;</span></span> created earlier
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> with an <span class="string"><span class="delimiter">'</span><span class="content">exception</span><span class="delimiter">'</span></span> <span class="keyword">in</span> last
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="key">https</span>:<span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>gist.github.com/coolgoose85/<span class="integer">458</span>a1f67d61f8def1120
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>***********************************************************
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">In</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Range UNset Mask</span><span class="delimiter">&quot;</span></span> we created following
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">For</span> e.g. <span class="error">1001</span> <span class="integer">1001</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Unset</span> bits from <span class="integer">2</span> to <span class="integer">5</span> i.e. <span class="error">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> =&gt; <span class="integer">10</span> <span class="integer">0000</span> <span class="integer">01</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                               |- - - -| 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>                      <span class="constant">Bits</span>  <span class="integer">7</span> <span class="integer">6</span> <span class="integer">5</span> <span class="integer">4</span> <span class="integer">3</span> <span class="integer">2</span> <span class="integer">1</span> <span class="integer">0</span>    
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Step1</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>------
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">To</span> unset range of bits we need to create <span class="constant">MASK</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> val  = <span class="integer">1001</span> <span class="integer">1001</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Mask</span> = <span class="integer">1100</span> <span class="integer">0011</span> (<span class="constant">AND</span>)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      _____________
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>        <span class="integer">1000</span> <span class="integer">0001</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>***********************************************************
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">We</span> will be creating the same mask <span class="keyword">in</span> addition we will 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">TOGGLE</span> the bits of <span class="string"><span class="delimiter">&quot;</span><span class="content">unset mask</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Unset</span> <span class="constant">MASK</span> = <span class="integer">1100</span> <span class="integer">0011</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">TOGGLE</span>     = <span class="integer">0011</span> <span class="integer">1100</span>    ~(<span class="constant">Unset</span> <span class="constant">Mask</span>)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Now</span> perform <span class="constant">OR</span> will val
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> val  = <span class="integer">1001</span> <span class="integer">1001</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="constant">Mask</span> = <span class="integer">0011</span> <span class="integer">1100</span> (<span class="constant">OR</span>)
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>      _____________
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span>        <span class="integer">1011</span> <span class="integer">1101</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> i is start of the range
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> j is <span class="keyword">end</span> of the range
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>int setBitsInRange(int val, int i, int j) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    int max = ~<span class="integer">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    int left = max - ((<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    int right = (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    int mask = left | right;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">return</span> (val | ~mask);  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="recomended-readings">Recomended readings</h3>

<ul>
  <li><a href="http://www.gamedev.net/page/resources/_/technical/general-programming/bitwise-operations-in-c-r1563" target="_blank">Gamedev</a></li>
  <li><a href="http://www.vipan.com/htdocs/bitwisehelp.html" target="_blank">Vipan</a></li>
  <li><a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank">Stanford</a></li>
  <li><a href="http://stackoverflow.com/questions/1167956/resources-to-learn-bitwise-programming" target="_blank">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary number operations]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/08/binary-number-operations/"/>
    <updated>2013-10-08T12:47:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/08/binary-number-operations</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addition">Addition</a></li>
  <li><a href="#subtraction">Subtraction</a></li>
  <li><a href="#multiplication">Multiplication</a></li>
  <li><a href="#negative-binary-numbers">Negative Binary numbers</a></li>
  <li><a href="#credits">Credits</a></li>
</ul>

<h3 id="addition">Addition</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="integer">0</span> + <span class="integer">0</span> → <span class="integer">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="integer">0</span> + <span class="integer">1</span> → <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">1</span> + <span class="integer">0</span> → <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">1</span> + <span class="integer">1</span> → <span class="integer">0</span>, carry <span class="integer">1</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="constant">For</span> e.g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>    (carried digits)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>+     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    -------------
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>=   <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> = <span class="integer">36</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="subtraction">Subtraction</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="integer">0</span> − <span class="integer">0</span> → <span class="integer">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="integer">0</span> − <span class="integer">1</span> → <span class="integer">1</span>, borrow <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">1</span> − <span class="integer">0</span> → <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">1</span> − <span class="integer">1</span> → <span class="integer">0</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="constant">Subtracting</span> <span class="integer">1</span> digit from <span class="integer">0</span> digit produces the digit <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>, <span class="keyword">while</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="integer">1</span> will have to be subtracted from the <span class="keyword">next</span> column. This is known as
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>borrowing.
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      *   * * *   (starred columns are borrowed from)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>−         <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    ----------------
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>=     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="multiplication">Multiplication</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>        <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>   (<span class="constant">A</span>)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>      × <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span>   (<span class="constant">B</span>)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>       ---------
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>   ← <span class="constant">Corresponds</span> to the rightmost <span class="string"><span class="delimiter">'</span><span class="content">zero</span><span class="delimiter">'</span></span> <span class="keyword">in</span> <span class="constant">B</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>+     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>     ← <span class="constant">Corresponds</span> to the <span class="keyword">next</span> <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span> <span class="keyword">in</span> <span class="constant">B</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>+   <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>+ <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  ---------------
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>= <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="constant">Binary</span> <span class="constant">Multiplication</span> <span class="keyword">for</span> binary point
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> . <span class="error">1</span> <span class="integer">0</span> <span class="integer">1</span>       <span class="constant">A</span> (<span class="float">5.625</span> <span class="keyword">in</span> decimal)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                × <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> . <span class="error">0</span> <span class="integer">1</span>       <span class="constant">B</span> (<span class="float">6.25</span>  <span class="keyword">in</span> decimal)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>           -------------------
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                  <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>    ← <span class="constant">Corresponds</span> to a <span class="string"><span class="delimiter">'</span><span class="content">one</span><span class="delimiter">'</span></span> <span class="keyword">in</span> <span class="constant">B</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    +           <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>      ← <span class="constant">Corresponds</span> to a <span class="string"><span class="delimiter">'</span><span class="content">zero</span><span class="delimiter">'</span></span> <span class="keyword">in</span> <span class="constant">B</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    +         <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    +       <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    +     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    ---------------------------
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    = <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> . <span class="error">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>  (<span class="float">35.15625</span> <span class="keyword">in</span> decimal)
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="negative-binary-numbers">Negative Binary numbers</h3>

<p>How can we represent a negative number? We cannot use a ‘-‘ sign because all we can store in the computer is zeros and ones.</p>

<p>There are three methods</p>

<ol>
  <li>Signed Magnitude</li>
  <li>1’s Complement</li>
  <li>2’s complement</li>
</ol>

<p><a href="https://www.dropbox.com/sh/tlcxy806qq6rvde/V3TVVs2vfH/Negative%20Binary%20Numbers.pdf“_blank">Full text</a> about binary number operations.</p>

<h3 id="credits">Credits</h3>

<p><a href="http://turing.cs.camosun.bc.ca/COMP166/resources/binary.html">CS Camosun</a></p>
]]></content>
  </entry>
  
</feed>
