<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-02-23T23:00:17-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers</a></li>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</a></li>
    </ul>
  </li>
  <li><a href="#string-problems">String Problems</a>    <ul>
      <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
      <li><a href="#duplicates-and-count">Duplicates and Count</a></li>
      <li><a href="#remove-duplicate-spaces">Remove duplicate spaces</a></li>
      <li><a href="#remove-spaces">Remove spaces</a></li>
      <li><a href="#remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</a></li>
      <li><a href="#rotate-a-string">Rotate a string</a></li>
      <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input
2,1, 3, 2, 3, 1, 4</p>

<p>Output
2,1,3</p>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. Give a Θ(n) way of solving this problem. Prove its running time and correctness. For full credit, your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p>Other variant of the same problem
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
A = {6,4,5,7,9,1,2}<br />
Sum = 10 Then the pairs are  {6,4} , {9,1}
<!-- more --></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>String Reverse</span>  <a href='http://ideone.com/vfTxcr' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;string.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span class="predefined-type">int</span> main(<span class="directive">void</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">char</span> str[] = <span class="error">“</span>testString<span class="error">”</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> len = strlen(str);&lt;/p&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span>(i = <span class="integer">0</span>; i &amp;lt; len/<span class="integer">2</span>; i++){
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    str[i] ^= str[len - i - <span class="integer">1</span>];
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Reverse String %s </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, str);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span> 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div>
<br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="duplicates-and-count">Duplicates and Count</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-duplicate-spaces">Remove duplicate spaces</h4>
<p>Remove all duplicate spaces from the string</p>

<p>Input string<br />
Hi^^^There!!!^^Wassup<br />
 ^ - Represents  space</p>

<p>Output<br />
Hi^There!!!^Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-spaces">Remove spaces</h4>
<p>Remove all the spaces from a string</p>

<p>Input string<br />
Hi there!!! Wassup</p>

<p>Output<br />
Hithere!!!Wassup</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</h4>
<p>Remove all consequtive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="rotate-a-string">Rotate a string</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Algorithms]]></title>
    <link href="http://distkeys.com/blog/2013/12/14/graph-algorithms/"/>
    <updated>2013-12-14T13:03:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/14/graph-algorithms</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#graph-problems">Graph problems</a>    <ul>
      <li><a href="#find-neighbour-in-array">Find neighbour in array</a></li>
      <li><a href="#find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</a></li>
    </ul>
  </li>
  <li><a href="#define-xindex-3">define xIndex 3</a></li>
</ul>

<h3 id="graph-problems">Graph problems</h3>

<h4 id="find-neighbour-in-array">Find neighbour in array</h4>

<p>Find all the neighbours of a given element in array<br /></p>

<p>Neighbours can be defined as<br /></p>

<ol>
  <li>Neighbours are only vertical and horizontal elements next to given element<br /></li>
  <li>Neighbours are only vertical, horizontal and diagonal elements next to given element<br /></li>
  <li>Neighbours are all vertical, horizontal and diagonal elements next to given element<br /></li>
</ol>

<!-- more -->
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour1</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * For e.g.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> *
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span> (<span class="integer">1</span>,<span class="integer">1</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">6</span>, <span class="integer">8</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">1</span> (<span class="integer">0</span>,<span class="integer">0</span>) = <span class="integer">4</span>, <span class="integer">2</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span class="error">“</span><span class="error">\</span>n[%d][%d]: %d <span class="error">“</span>, sx, sy - <span class="integer">1</span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (sx - <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx - <span class="integer">1</span>, sy, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx, sy + <span class="integer">1</span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="keyword">if</span> (sx + <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx + <span class="integer">1</span>, sy,array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour2</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: diagnolNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * diagonal neighbours too.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> *
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span> (<span class="integer">1</span>,<span class="integer">1</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">6</span>, <span class="integer">8</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">7</span>, <span class="integer">9</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">1</span> (<span class="integer">0</span>,<span class="integer">0</span>) = <span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">5</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="directive">void</span> diagnolNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span class="error">“</span>%d <span class="error">“</span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (sx - <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span> 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span class="keyword">if</span> (sx + <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span> 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour3</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: allNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns all the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * all diagonal neighbours.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span class="integer">1</span>   <span class="integer">2</span>   <span class="integer">3</span>   <span class="integer">4</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span class="integer">5</span>   <span class="integer">6</span>   <span class="integer">7</span>   <span class="integer">8</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span class="integer">9</span>   <span class="integer">10</span>  <span class="integer">11</span>  <span class="integer">12</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * <span class="integer">13</span>  <span class="integer">14</span>  <span class="integer">15</span>  <span class="integer">16</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> *
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">5</span>  (<span class="integer">1</span>,<span class="integer">0</span>) = <span class="integer">1</span>, <span class="integer">9</span>, <span class="integer">13</span>, <span class="integer">6</span>, <span class="integer">7</span>, <span class="integer">8</span>, <span class="integer">10</span>, <span class="integer">15</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * Neighbour <span class="keyword">for</span> <span class="integer">11</span> (<span class="integer">2</span>,<span class="integer">2</span>) = <span class="integer">3</span>, <span class="integer">7</span>, <span class="integer">15</span>, <span class="integer">9</span>, <span class="integer">10</span>, <span class="integer">12</span>, <span class="integer">1</span>, <span class="integer">6</span>, <span class="integer">16</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> * **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="directive">void</span> allNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="predefined-type">int</span> done = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="predefined-type">int</span> tempX = sx;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="predefined-type">int</span> tempY = sy;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// Get all the elements in row</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= row; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span class="keyword">if</span> (array[i][sy] == array[sx][sy]) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[i][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="comment">// Get all the elements in col</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span class="keyword">for</span> (j = <span class="integer">0</span>; j &amp;lt;= col; j++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span class="keyword">if</span> (array[sx][j] == array[sx][sy]) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][j]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>}
<span class="line-numbers"><a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span><span class="comment">// Diagnols</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    tempX--; tempY--;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="keyword">if</span> (tempX &amp;gt;= startRow  &amp;amp;&amp;amp; tempY &amp;gt;= startCol) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[tempX][tempY]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        done = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span> 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>    sx++,sy++;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    <span class="keyword">if</span> (sx &amp;lt;= row &amp;amp;&amp;amp; sy &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy]);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (done) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>} } </pre></div>
</div>
 </figure></notextile></div> &lt;hr style="border-top: 1.5px dotted black"/&gt; &lt;br&gt;&lt;br&gt;
</code></pre>

<h4 id="find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</h4>

<p>Given array as
<br /></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[\begin{array}{cc} 1 & 6 & 8\\ 4 & 7 & 9\\ 5 & 2 & 3
\end{array}\right]
 %]]&gt;</script>

<p>Find all the paths from 1 to 3.
The possible ascending path are</p>

<p><code class="numberCircle">1</code> -&gt;6-&gt;8-&gt;9-&gt; <code class="numberCircle">3</code><br /></p>

<p><code class="numberCircle">1</code> -&gt;4-&gt;7-&gt;9-&gt;<code class="numberCircle">3</code></p>

<p><br />
<code class="numberCircle">1</code> -&gt;6-&gt;7-&gt;2-&gt;<code class="numberCircle">3</code> is not the right solution as 7 &gt; 2</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Graph Traversal </span>  <a href='http://ideone.com/0oLlT1' target='_blank'>Run code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">define-xindex-3</span><span class="delimiter">&quot;</span></span>&gt;define xIndex <span class="integer">3</span>&lt;/h1&gt;
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span class="preprocessor">#define</span> yIndex <span class="integer">3</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> TRUE <span class="integer">1</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="preprocessor">#define</span> FALSE <span class="integer">0</span>&lt;/p&gt;
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span>&lt;p&gt;<span class="predefined-type">int</span> startIndX = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span class="predefined-type">int</span> startIndY = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span class="predefined-type">int</span> endIndX = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span class="predefined-type">int</span> endIndY = <span class="integer">2</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>&lt;p&gt;<span class="comment">// Structure to construct final path</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> node {
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>    <span class="predefined-type">int</span> x;
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>    <span class="predefined-type">int</span> y;
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span>    <span class="predefined-type">int</span> parentVal;
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span>} parent;&lt;/p&gt;
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>&lt;p&gt;<span class="keyword">typedef</span> <span class="keyword">struct</span> queue {
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>    <span class="predefined-type">int</span> x;
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>    <span class="predefined-type">int</span> y;
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>    <span class="keyword">struct</span> queue *next;
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>} qnode;&lt;/p&gt;
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>&lt;p&gt;qnode *head;
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>qnode *tail;&lt;/p&gt;
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>&lt;p&gt;<span class="comment">// Neighbour index coordinates</span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span><span class="predefined-type">int</span> neighbourIndex[<span class="integer">4</span>][<span class="integer">2</span>];
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span><span class="predefined-type">int</span> array[xIndex][yIndex];
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span><span class="predefined-type">int</span> visited[xIndex][yIndex];
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span><span class="predefined-type">int</span> row = xIndex - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span><span class="predefined-type">int</span> col = yIndex - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span><span class="predefined-type">int</span> startRow = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span><span class="predefined-type">int</span> startCol = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>&lt;p&gt;parent* parentArr[xIndex][yIndex];&lt;/p&gt;
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>&lt;p&gt;<span class="comment">// Function declarations</span>
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span><span class="predefined-type">int</span> isVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span><span class="directive">void</span> markVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span><span class="directive">void</span> markUnvisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span><span class="directive">void</span> markParent(<span class="predefined-type">int</span> childX, <span class="predefined-type">int</span> childY, <span class="predefined-type">int</span> parentX, <span class="predefined-type">int</span> parentY);
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span><span class="directive">void</span> findPath(<span class="predefined-type">int</span> startX, <span class="predefined-type">int</span> startY, <span class="predefined-type">int</span> endX, <span class="predefined-type">int</span> endY);
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span><span class="directive">void</span> enqueue(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>qnode* dequeue();
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span><span class="predefined-type">int</span> isQueueEmpty();
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span><span class="directive">void</span> printPath(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span class="directive">void</span> freeQueue();
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span class="directive">void</span> test1();&lt;/p&gt;
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>&lt;p&gt;<span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>{
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; <span class="integer">4</span>; i++) {
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span><span class="keyword">for</span> (j = <span class="integer">0</span>; j &amp;lt; <span class="integer">2</span>; j++) {
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>    neighbourIndex[i][j] = -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>}
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>}
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>i = <span class="integer">0</span>; j = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span class="keyword">if</span> (sy - <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>neighbourIndex[i][<span class="integer">0</span>] = sx;
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>neighbourIndex[i][<span class="integer">1</span>] = sy - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>i++;
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>}
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span><span class="keyword">if</span> (sx - <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>neighbourIndex[i][<span class="integer">0</span>] = sx - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>neighbourIndex[i][<span class="integer">1</span>] = sy;
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>i++;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>}
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span><span class="keyword">if</span> (sy + <span class="integer">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span class="integer">1</span> &amp;lt;= col) {
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>neighbourIndex[i][<span class="integer">0</span>] = sx;
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>neighbourIndex[i][<span class="integer">1</span>] = sy + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>i++;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>}
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span><span class="keyword">if</span> (sx + <span class="integer">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span class="integer">1</span> &amp;lt;= row) {
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>neighbourIndex[i][<span class="integer">0</span>] = sx + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>neighbourIndex[i][<span class="integer">1</span>] = sy;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>i++;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>} }
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>&lt;p&gt;<span class="predefined-type">int</span> isVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>{
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>    <span class="keyword">return</span> visited[x][y];
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>}&lt;/p&gt;
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>&lt;p&gt;<span class="directive">void</span> markVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>{
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>    visited[x][y] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>&lt;p&gt;<span class="directive">void</span> markUnvisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>{
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>    visited[x][y] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>&lt;p&gt;<span class="directive">void</span> markParent(<span class="predefined-type">int</span> childX, <span class="predefined-type">int</span> childY, <span class="predefined-type">int</span> parentX, <span class="predefined-type">int</span> parentY)
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>{
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>    parent* temp = (parent *)malloc(<span class="keyword">sizeof</span>(parent));&lt;/p&gt;
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (temp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n114" name="n114">114</a></span><span class="comment">// Put ASSERT</span>
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>}
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>temp-&amp;gt;x = parentX;
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>temp-&amp;gt;y = parentY;
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>temp-&amp;gt;parentVal = array[parentX][parentY];
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>parentArr[childX][childY] = temp; }
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>&lt;p&gt;<span class="directive">void</span> enqueue(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>{
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>    qnode *temp = (qnode *)malloc(<span class="keyword">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>    <span class="keyword">if</span> (temp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>    <span class="comment">// Put ASSERT</span>
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>    }&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>&lt;pre&gt;&lt;code&gt;temp-&amp;gt;x = x;
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>temp-&amp;gt;y = y;
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>temp-&amp;gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>tail-&amp;gt;next = temp;
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>tail = temp; }
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>&lt;p&gt;qnode* dequeue()
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>{
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    qnode *temp;&lt;/p&gt;
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (!isQueueEmpty()) {
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    temp = head-&amp;gt;next;
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>    head-&amp;gt;next = temp-&amp;gt;next;
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    <span class="keyword">return</span> temp;
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>}
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span><span class="keyword">return</span> head-&amp;gt;next; }
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>&lt;p&gt;<span class="predefined-type">int</span> isQueueEmpty()
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>{
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>    <span class="keyword">if</span> (head-&amp;gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>        <span class="keyword">return</span> TRUE;
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span> FALSE; }
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>&lt;p&gt;<span class="directive">void</span> freeQueue()
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>{
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>    qnode* temp;&lt;/p&gt;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">while</span> (head-&amp;gt;next != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>    temp = head-&amp;gt;next;
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>    head-&amp;gt;next = head-&amp;gt;next-&amp;gt;next;
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>    free (temp);
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>}
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>&lt;p&gt;}&lt;/p&gt;
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>&lt;p&gt;<span class="directive">void</span> printPath(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>{
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>    parent *pInfo;&lt;/p&gt;
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span>&lt;pre&gt;&lt;code&gt;printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Path:</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n181" name="n181">181</a></span><span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>    printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>    pInfo = parentArr[x][y];
<span class="line-numbers"><a href="#n185" name="n185">185</a></span>    x = pInfo-&amp;gt;x;
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>    y = pInfo-&amp;gt;y;
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>
<span class="line-numbers"><a href="#n188" name="n188">188</a></span>    <span class="keyword">if</span> (x == startIndX &amp;amp;&amp;amp; y == startIndY) {
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>        printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>    }
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>} }
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>
<span class="line-numbers"><a href="#n195" name="n195">195</a></span>&lt;p&gt;<span class="directive">void</span> findPath(<span class="predefined-type">int</span> startX, <span class="predefined-type">int</span> startY, <span class="predefined-type">int</span> endX, <span class="predefined-type">int</span> endY)
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>{
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n199" name="n199">199</a></span>    <span class="predefined-type">int</span> x = startX;
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>    <span class="predefined-type">int</span> y = startY;
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>    <span class="predefined-type">int</span> neighbourX = startX;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>    <span class="predefined-type">int</span> neighbourY = startY;
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>    <span class="predefined-type">int</span> reached = FALSE;
<span class="line-numbers"><a href="#n204" name="n204">204</a></span>    qnode *nextNode;&lt;/p&gt;
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n207" name="n207">207</a></span>    neighbour(x, y);
<span class="line-numbers"><a href="#n208" name="n208">208</a></span>
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>    <span class="comment">// Check, are we neighbour of destination?</span>
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt; <span class="integer">4</span>; i++) {
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>        <span class="keyword">if</span> (neighbourIndex[i][<span class="integer">0</span>] == endX &amp;amp;&amp;amp; neighbourIndex[i][<span class="integer">1</span>] == endY) {
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>            <span class="comment">// Reached destination</span>
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>            neighbourX = neighbourIndex[i][<span class="integer">0</span>];
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>            neighbourY = neighbourIndex[i][<span class="integer">1</span>];
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>            markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><a href="#n216" name="n216">216</a></span>
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>            reached = TRUE;
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span>            <span class="comment">// Validate neighbour</span>
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>            <span class="keyword">if</span> (neighbourIndex[i][<span class="integer">0</span>] != -<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>                neighbourX = neighbourIndex[i][<span class="integer">0</span>];
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>                neighbourY = neighbourIndex[i][<span class="integer">1</span>];
<span class="line-numbers"><a href="#n224" name="n224">224</a></span>                <span class="keyword">if</span> (array[x][y] &amp;lt; array[neighbourX][neighbourY]) {
<span class="line-numbers"><a href="#n225" name="n225">225</a></span>                    <span class="comment">// Mark neighbour index as visited</span>
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>                    markVisited(x, y);
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>                    markVisited(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>                    <span class="comment">// Make me parent of neighbour index</span>
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span>                    markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><a href="#n231" name="n231">231</a></span>
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>                    <span class="comment">// Add neighbour to queue</span>
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>                    enqueue(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>                }
<span class="line-numbers"><a href="#n235" name="n235">235</a></span>            }
<span class="line-numbers"><a href="#n236" name="n236">236</a></span>        }
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>    } <span class="comment">// end of for</span>
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>    <span class="keyword">if</span> (reached) {
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>        <span class="comment">// print path</span>
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>        printPath(endIndX, endIndY);
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>    }
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>    <span class="keyword">if</span> (isQueueEmpty()) {
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>        <span class="comment">// If queue is empty then halt, no path found</span>
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>        printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">No valid path exist</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>    }
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>    <span class="comment">// Get next item from queue</span>
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>    nextNode = dequeue();
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>    <span class="keyword">if</span> (nextNode != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>        x = nextNode-&amp;gt;x;
<span class="line-numbers"><a href="#n255" name="n255">255</a></span>        y = nextNode-&amp;gt;y;
<span class="line-numbers"><a href="#n256" name="n256">256</a></span>
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>        free (nextNode);
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>    }
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>} <span class="comment">// end of while }</span>
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n261" name="n261">261</a></span>
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>&lt;p&gt;<span class="directive">void</span> test1()
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>{
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>&lt;pre&gt;&lt;code&gt;array[<span class="integer">0</span>][<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n268" name="n268">268</a></span>array[<span class="integer">0</span>][<span class="integer">1</span>] = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>array[<span class="integer">0</span>][<span class="integer">2</span>] = <span class="integer">8</span>;
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span>array[<span class="integer">1</span>][<span class="integer">0</span>] = <span class="integer">4</span>;
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>array[<span class="integer">1</span>][<span class="integer">1</span>] = <span class="integer">7</span>;
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>array[<span class="integer">1</span>][<span class="integer">2</span>] = <span class="integer">9</span>;
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>array[<span class="integer">2</span>][<span class="integer">0</span>] = <span class="integer">5</span>;
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>array[<span class="integer">2</span>][<span class="integer">1</span>] = <span class="integer">2</span>;
<span class="line-numbers"><a href="#n275" name="n275">275</a></span>array[<span class="integer">2</span>][<span class="integer">2</span>] = <span class="integer">3</span>;
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n278" name="n278">278</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &amp;lt;= row; i++) {
<span class="line-numbers"><a href="#n279" name="n279">279</a></span>    <span class="keyword">for</span> (j = <span class="integer">0</span>; j &amp;lt;= col; j++) {
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d   </span><span class="delimiter">&quot;</span></span>, array[i][j]);
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>    }
<span class="line-numbers"><a href="#n282" name="n282">282</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>}
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>findPath(startIndX, startIndY, endIndX, endIndY);
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>freeQueue(); }
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>{
<span class="line-numbers"><a href="#n291" name="n291">291</a></span>    head = (qnode*)malloc(<span class="keyword">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n292" name="n292">292</a></span>    head-&amp;gt;x = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n293" name="n293">293</a></span>    head-&amp;gt;y = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n294" name="n294">294</a></span>    head-&amp;gt;next = <span class="predefined-constant">NULL</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n295" name="n295">295</a></span>
<span class="line-numbers"><a href="#n296" name="n296">296</a></span>&lt;pre&gt;&lt;code&gt;tail = head;
<span class="line-numbers"><a href="#n297" name="n297">297</a></span>
<span class="line-numbers"><a href="#n298" name="n298">298</a></span>test1();
<span class="line-numbers"><a href="#n299" name="n299">299</a></span>
<span class="line-numbers"><strong><a href="#n300" name="n300">300</a></strong></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://distkeys.com/blog/2013/10/12/sorting/"/>
    <updated>2013-10-12T13:08:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/12/sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dictionary-of-algorithms">Dictionary of algorithms</a></li>
  <li><a href="#sorting-visualization">Sorting Visualization</a></li>
  <li><a href="#sorting-wiki-summary">Sorting Wiki Summary</a></li>
  <li><a href="#sorting-algorithms">Sorting algorithms</a></li>
  <li><a href="#comparisons-based-sorting">Comparisons based sorting</a></li>
  <li><a href="#online-sorts">Online sorts</a></li>
  <li><a href="#stable-sorts">Stable sorts</a></li>
  <li><a href="#time-complexity-chart">Time complexity chart</a></li>
</ul>

<p>This article talks about Sorting, Sorting techniques/algorithms in computer science</p>

<p>Let’s start with Wikipedia entry about sorting</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Sorting_stability_playing_cards.svg/220px-Sorting_stability_playing_cards.svg.png"/>
  
  <h2>sorting algorithm</h2>
  <div>
    <p>A <strong>sorting algorithm</strong> is an <a href="http://en.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> that puts elements of a <a href="http://en.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">list</a> in a certain <a href="http://en.wikipedia.org/wiki/Total_order" title="Total order">order</a>. The most-used orders are numerical order and <a href="http://en.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical order</a>. Efficient <a href="http://en.wikipedia.org/wiki/Sorting" title="Sorting">sorting</a> is important for optimizing the use of other algorithms (such as <a href="http://en.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">search</a> and <a href="http://en.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge</a> algorithms) which require input data to be in sorted lists; it is also often useful for <a href="http://en.wikipedia.org/wiki/Canonicalization" title="Canonicalization">canonicalizing</a> data and for producing human-readable output. More formally, the output must satisfy two conditions:
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Sorting_algorithm">Read more</a>
</div>

<!-- more -->
<br /></p>

<h3 id="dictionary-of-algorithms">Dictionary of algorithms</h3>

<p><a href="http://xlinux.nist.gov/dads//" target="_blank">Dictionary of algorithms</a></p>

<p><br /></p>

<h3 id="sorting-visualization">Sorting Visualization</h3>

<p><a href="http://corte.si/posts/code/visualisingsorting/index.html" target="_blank">Sorting Visualization</a></p>

<p><br /></p>

<h3 id="sorting-wiki-summary">Sorting Wiki Summary</h3>

<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank">Sorting Wiki Summary</a></p>

<p><br /></p>

<p>Sorting algorithms can be divided into categories</p>

<h3 id="sorting-algorithms">Sorting algorithms</h3>
<ol>
  <li><strong><em>Comparisons based sorts</em></strong> - 24 algorithms in this category</li>
  <li><strong><em>Online sorts</em></strong>            - 5 algorithms in this category</li>
  <li><strong><em>Stable sorts</em></strong>            - 14 algorithms in this category</li>
</ol>

<p>Donald Knuth pioneer in algorithms and field of Computer Science have divided sorting into</p>

<ol>
  <li><strong><em>Internal sorting</em></strong> - by insertion, by exchange, by selection, by merging, by distribution<br /></li>
  <li><strong><em>Optimum sorting</em></strong>  - min-comparison sorting, min-comparison merging, min-comparison selection<br /></li>
  <li><strong><em>External sorting</em></strong> <br /></li>
</ol>

<h3 id="comparisons-based-sorting">Comparisons based sorting</h3>
<p>It is particular type of sorting algorithm which read the list elements through comparison operator that determines which of two elements should occur first int he final sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a>                       - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a>         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a> - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="online-sorts">Online sorts</h3>

<p>These sorts can start sorting their input without having received all of it. It can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="stable-sorts">Stable sorts</h3>

<p>A sorting algorithm is stable if whenever there are two records R and S with the <code>same key</code> and with R appearing before S in the original list, <code>R will appear before S</code> in the sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></li>
</ul>

<h3 id="time-complexity-chart">Time complexity chart</h3>

<table>
<thead>
<tr>
    <th><code class="mygreen">Good</code></th><th><code class="myyellow">Fair</code></th><th><code class="myred">Poor</code></th>
</tr>
</thead>
</table>

<p><br /></p>

<p><sup>*</sup>(V/D) - Variant or derived from</p>

<p><br /></p>
<table>
<thead>
<tr>
    <th>Algorithm</th><th colspan="3">Time complexity</th><th>Space complexity</th><th>Notes</th>
</tr>
<tr>
    <th /><th>Best</th><th>Average</th><th>Worst</th><th /><th />
</tr>
</thead>
<tbody>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></code></td>
    <td><code class="myyellow">Ω(n)</code></td>
    <td>O(n × n!)</td>
    <td><code class="myred">Unbounded</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></code></td>
    <td>O(n)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><msup><mi>2</mi><mn>p</mn></msup></mrow></mfrac></math>)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></code></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td><code class="mygreen">Write efficient</code></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>Bubble + Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></code></td>
    <td>Ω(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="mygreen">O(1)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td />
    <td>Quick sort + Heap sort<br /><a href="https://www.dropbox.com/s/21q1ymf2y86kqcz/introsort.pdf" target="_blank"> IntroSort Paper</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(n)</code></td>
    <td>(V/D) - Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></code></td>
    <td>O(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="myred">O(n)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></code></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>*(V/D) - Bubble sort</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></code></td>
    <td />
    <td />
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td><a href="http://wordaligned.org/articles/patience-sort" target="_blank">Longest common sequence</a></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></code></td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>O(n)</td>
    <td>Faster on partial sorted list</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>*(V/D) - Heap sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></code></td>
    <td />
    <td />
    <td />
    <td>O(n)</td>
    <td>Slower than bubble sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>Merge + Insertion sort</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Online sorting</th>
    <th />
    <th />
    <th />
    <th />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Stable sorting</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></td>
    <td />
    <td>O(n + k)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n.k)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></td>
    <td />
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></td>
    <td />
    <td />
    <td>O(N + n)</td>
    <td>O(N + n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></td>
    <td />
    <td />
    <td>O(kN)</td>
    <td>O(k + N)</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Non-category Sorts</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_sort" target="_blank">Adaptive sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/American_flag_sort" target="_blank">American flag sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bead_sort" target="_blank">Bead sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Burstsort" target="_blank">Burstsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian tree</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Comparison_sort" target="_blank">Comparison sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank">Dutch national flag problem</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Elevator_algorithm" target="_blank">Elevator algorithm</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/External_sorting" target="_blank">External sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Flashsort" target="_blank">Flashsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Integer_sorting" target="_blank">Integer sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Internal_sort" target="_blank">Internal sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/J_sort" target="_blank">J sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Median_cut" target="_blank">Median cut</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Ordicate" target="_blank">Ordicate</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pairwise_sorting_network" target="_blank">Pairwise sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pancake_sorting" target="_blank">Pancake sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Partial_sorting" target="_blank">Partial sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Quantum_sort" target="_blank">Quantum sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Samplesort" target="_blank">Samplesort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Sorting_network" target="_blank">Sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spaghetti_sort" target="_blank">Spaghetti sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spreadsort" target="_blank">Spreadsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tournament_sort" target="_blank">Tournament sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tree_sort" target="_blank">Tree sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/UnShuffle_sort" target="_blank">UnShuffle sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
</feed>
