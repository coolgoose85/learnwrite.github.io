<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-02-19T21:33:35-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers</a></li>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</a></li>
    </ul>
  </li>
  <li><a href="#string-problems">String Problems</a>    <ul>
      <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
      <li><a href="#duplicates-and-count">Duplicates and Count</a></li>
      <li><a href="#remove-duplicate-spaces">Remove duplicate spaces</a></li>
      <li><a href="#remove-spaces">Remove spaces</a></li>
      <li><a href="#remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</a></li>
      <li><a href="#rotate-a-string">Rotate a string</a></li>
      <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
      <li><a href="#find-anagram">Find Anagram</a></li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input
2,1, 3, 2, 3, 1, 4</p>

<p>Output
2,1,3</p>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. Give a Θ(n) way of solving this problem. Prove its running time and correctness. For full credit, your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p>Other variant of the same problem
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
A = {6,4,5,7,9,1,2}<br />
Sum = 10 Then the pairs are  {6,4} , {9,1}</p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<p><br />
<br /></p>

<!-- more -->

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<p>{% coderay lang:c linenos:true String Reverse http://ideone.com/vfTxcr Run Code %}
#include <stdio.h>
#include <string.h /></stdio.h></p>

<p>int main(void) {
    int i = 0;
    char str[] = “testString”;
    int len = strlen(str);</p>

<pre><code>for(i = 0; i &lt; len/2; i++){
	str[len - i - 1] ^= str[i];
	str[i] ^= str[len - i - 1];
	str[len - i - 1] ^= str[i];
}

printf("Reverse String %s \n", str);
 
return 0; }
</code></pre>

<p>{% endcoderay %}
<br /></p>

<h4 id="duplicates-and-count">Duplicates and Count</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<h4 id="remove-duplicate-spaces">Remove duplicate spaces</h4>
<p>Remove all duplicate spaces from the string</p>

<p>Input string<br />
Hi^^^There!!!^^Wassup<br />
 ^ - Represents  space</p>

<p>Output<br />
Hi^There!!!^Wassup</p>

<h4 id="remove-spaces">Remove spaces</h4>
<p>Remove all the spaces from a string</p>

<p>Input string<br />
Hi there!!! Wassup</p>

<p>Output<br />
Hithere!!!Wassup</p>

<h4 id="remove-all-consequtive-duplicate-elements">Remove all consequtive duplicate elements</h4>
<p>Remove all consequtive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<h4 id="rotate-a-string">Rotate a string</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<p><br /></p>

<h4 id="find-anagram">Find Anagram</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Algorithms]]></title>
    <link href="http://distkeys.com/blog/2013/12/14/graph-algorithms/"/>
    <updated>2013-12-14T13:03:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/14/graph-algorithms</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#graph-problems">Graph problems</a>    <ul>
      <li><a href="#find-neighbour-in-array">Find neighbour in array</a></li>
      <li><a href="#find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</a></li>
    </ul>
  </li>
</ul>

<h3 id="graph-problems">Graph problems</h3>

<h4 id="find-neighbour-in-array">Find neighbour in array</h4>

<p>Find all the neighbours of a given element in array<br /></p>

<p>Neighbours can be defined as<br /></p>

<ol>
  <li>Neighbours are only vertical and horizontal elements next to given element<br /></li>
  <li>Neighbours are only vertical, horizontal and diagonal elements next to given element<br /></li>
  <li>Neighbours are all vertical, horizontal and diagonal elements next to given element<br /></li>
</ol>

<!-- more -->
<p>{% coderay lang:c linenos:true Neighbour1 http://ideone.com/0ddGnZ Run Code %}
/<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>
 * Function: neighbour(int sx, int sy)
 * This function returns the neighbour of sx, sy
 * For e.g.
 * 1 2 3
 * 4 5 6
 * 7 8 9
 *
 * Neighbour for 5 (1,1) = 4, 2, 6, 8
 * Neighbour for 1 (0,0) = 4, 2
 * <strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><em>**</em>/
void neighbour(int sx, int sy)
{
    if (sy - 1 &gt;= startCol &amp;&amp; sy - 1 &lt;= col) {
		printf(“%d “, array[sx][sy - 1]);
    }</p>

<pre><code>if (sx - 1 &gt;= startRow &amp;&amp; sx - 1 &lt;= row) {
	printf("%d ", array[sx - 1][sy]);
}
 
if (sy + 1 &gt;= startCol &amp;&amp; sy + 1 &lt;= col) {
	printf("%d ", array[sx][sy + 1]);
}
 
if (sx + 1 &gt;= startRow &amp;&amp; sx + 1 &lt;= row) {
	printf("%d ", array[sx + 1][sy]);
} } {% endcoderay %}
</code></pre>

<p>{% coderay lang:c linenos:true Neighbour2 http://ideone.com/0ddGnZ Run Code %}
/<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>
 * Function: diagnolNeighbour(int sx, int sy)
 * This function returns the neighbour of sx, sy and
 * diagonal neighbours too.
 * For e.g.
 * 1 2 3
 * 4 5 6
 * 7 8 9
 *
 * Neighbour for 5 (1,1) = 4, 2, 6, 8, 1, 3, 7, 9
 * Neighbour for 1 (0,0) = 4, 2, 5
 * <strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><em>**</em>/
void diagnolNeighbour(int sx, int sy) {
    if (sy - 1 &gt;= startCol &amp;&amp; sy - 1 &lt;= col) {
		printf(“%d “, array[sx][sy - 1]);
    }</p>

<pre><code>if (sx - 1 &gt;= startRow &amp;&amp; sx - 1 &lt;= row) {
	printf("%d ", array[sx - 1][sy]);
 
	//Diagnols
	if (sy - 1 &gt;= startCol &amp;&amp; sy - 1 &lt;= col) {
	    printf("%d ", array[sx - 1][sy - 1]);
	}
	if (sy + 1 &gt;= startCol &amp;&amp; sy + 1 &lt;= col) {
	    printf("%d ", array[sx - 1][sy + 1]);
	}
}
 
if (sy + 1 &gt;= startCol &amp;&amp; sy + 1 &lt;= col) {
	printf("%d ", array[sx][sy + 1]);
}
 
if (sx + 1 &gt;= startRow &amp;&amp; sx + 1 &lt;= row) {
	printf("%d ", array[sx + 1][sy]);
 
	//Diagnols
	if (sy - 1 &gt;= startCol &amp;&amp; sy - 1 &lt;= col) {
	    printf("%d ", array[sx + 1][sy - 1]);
	}
	if (sy + 1 &gt;= startCol &amp;&amp; sy + 1 &lt;= col) {
	    printf("%d ", array[sx + 1][sy + 1]);
	}
} } {% endcoderay %}
</code></pre>

<p>{% coderay lang:c linenos:true Neighbour3 http://ideone.com/0ddGnZ Run Code %}
/<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**
 * Function: allNeighbour(int sx, int sy)
 * This function returns all the neighbour of sx, sy and
 * all diagonal neighbours.
 * For e.g.
 * 1   2   3   4
 * 5   6   7   8
 * 9   10  11  12
 * 13  14  15  16
 *
 * Neighbour for 5  (1,0) = 1, 9, 13, 6, 7, 8, 10, 15
 * Neighbour for 11 (2,2) = 3, 7, 15, 9, 10, 12, 1, 6, 16
 * **</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><em>**</em>/
void allNeighbour(int sx, int sy)
{
    int done = 0;
    int tempX = sx;
    int tempY = sy;
    int i = 0;
    int j = 0;</p>

<pre><code>// Get all the elements in row
for (i = 0; i &lt;= row; i++) {
	if (array[i][sy] == array[sx][sy]) {
	    continue;
	}
	printf("%d ", array[i][sy]);
}
 
// Get all the elements in col
for (j = 0; j &lt;= col; j++) {
	if (array[sx][j] == array[sx][sy]) {
	    continue;
	}
	printf("%d ", array[sx][j]);
}
 
// Diagnols
while (1) {
    tempX--; tempY--;
	if (tempX &gt;= startRow  &amp;&amp; tempY &gt;= startCol) {
	    printf("%d ", array[tempX][tempY]);
	} else {
	    done = 1;
	}
 
	sx++,sy++;
	if (sx &lt;= row &amp;&amp; sy &lt;= col) {
	    printf("%d ", array[sx][sy]);
	} else if (done) {
	    break;
	}
} } {% endcoderay %} &lt;hr style="border-top: 1.5px dotted black"/&gt; &lt;br&gt;&lt;br&gt;
</code></pre>

<h4 id="find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</h4>

<p>Given array as
<br /></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[\begin{array}{cc} 1 & 6 & 8\\ 4 & 7 & 9\\ 5 & 2 & 3
\end{array}\right]
 %]]&gt;</script>

<p>Find all the paths from 1 to 3.
The possible ascending path are</p>

<p><code class="numberCircle">1</code> -&gt;6-&gt;8-&gt;9-&gt; <code class="numberCircle">3</code><br /></p>

<p><code class="numberCircle">1</code> -&gt;4-&gt;7-&gt;9-&gt;<code class="numberCircle">3</code></p>

<p><br />
<code class="numberCircle">1</code> -&gt;6-&gt;7-&gt;2-&gt;<code class="numberCircle">3</code> is not the right solution as 7 &gt; 2</p>

<p><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://distkeys.com/blog/2013/10/12/sorting/"/>
    <updated>2013-10-12T13:08:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/12/sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dictionary-of-algorithms">Dictionary of algorithms</a></li>
  <li><a href="#sorting-visualization">Sorting Visualization</a></li>
  <li><a href="#sorting-wiki-summary">Sorting Wiki Summary</a></li>
  <li><a href="#sorting-algorithms">Sorting algorithms</a></li>
  <li><a href="#comparisons-based-sorting">Comparisons based sorting</a></li>
  <li><a href="#online-sorts">Online sorts</a></li>
  <li><a href="#stable-sorts">Stable sorts</a></li>
  <li><a href="#time-complexity-chart">Time complexity chart</a></li>
</ul>

<p>This article talks about Sorting, Sorting techniques/algorithms in computer science</p>

<p>Let’s start with Wikipedia entry about sorting</p>

<p>{% wikipedia Sorting_algorithm %}
<!-- more -->
<br /></p>

<h3 id="dictionary-of-algorithms">Dictionary of algorithms</h3>

<p><a href="http://xlinux.nist.gov/dads//" target="_blank">Dictionary of algorithms</a></p>

<p><br /></p>

<h3 id="sorting-visualization">Sorting Visualization</h3>

<p><a href="http://corte.si/posts/code/visualisingsorting/index.html" target="_blank">Sorting Visualization</a></p>

<p><br /></p>

<h3 id="sorting-wiki-summary">Sorting Wiki Summary</h3>

<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank">Sorting Wiki Summary</a></p>

<p><br /></p>

<p>Sorting algorithms can be divided into categories</p>

<h3 id="sorting-algorithms">Sorting algorithms</h3>
<ol>
  <li><strong><em>Comparisons based sorts</em></strong> - 24 algorithms in this category</li>
  <li><strong><em>Online sorts</em></strong>            - 5 algorithms in this category</li>
  <li><strong><em>Stable sorts</em></strong>            - 14 algorithms in this category</li>
</ol>

<p>Donald Knuth pioneer in algorithms and field of Computer Science have divided sorting into</p>

<ol>
  <li><strong><em>Internal sorting</em></strong> - by insertion, by exchange, by selection, by merging, by distribution<br /></li>
  <li><strong><em>Optimum sorting</em></strong>  - min-comparison sorting, min-comparison merging, min-comparison selection<br /></li>
  <li><strong><em>External sorting</em></strong> <br /></li>
</ol>

<h3 id="comparisons-based-sorting">Comparisons based sorting</h3>
<p>It is particular type of sorting algorithm which read the list elements through comparison operator that determines which of two elements should occur first int he final sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a>                       - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a>         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a> - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="online-sorts">Online sorts</h3>

<p>These sorts can start sorting their input without having received all of it. It can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="stable-sorts">Stable sorts</h3>

<p>A sorting algorithm is stable if whenever there are two records R and S with the <code>same key</code> and with R appearing before S in the original list, <code>R will appear before S</code> in the sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></li>
</ul>

<h3 id="time-complexity-chart">Time complexity chart</h3>

<table>
<thead>
<tr>
    <th><code class="mygreen">Good</code></th><th><code class="myyellow">Fair</code></th><th><code class="myred">Poor</code></th>
</tr>
</thead>
</table>

<p><br /></p>

<p><sup>*</sup>(V/D) - Variant or derived from</p>

<p><br /></p>
<table>
<thead>
<tr>
    <th>Algorithm</th><th colspan="3">Time complexity</th><th>Space complexity</th><th>Notes</th>
</tr>
<tr>
    <th /><th>Best</th><th>Average</th><th>Worst</th><th /><th />
</tr>
</thead>
<tbody>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></code></td>
    <td><code class="myyellow">Ω(n)</code></td>
    <td>O(n × n!)</td>
    <td><code class="myred">Unbounded</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></code></td>
    <td>O(n)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><msup><mi>2</mi><mn>p</mn></msup></mrow></mfrac></math>)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></code></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td><code class="mygreen">Write efficient</code></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>Bubble + Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></code></td>
    <td>Ω(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="mygreen">O(1)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td />
    <td>Quick sort + Heap sort<br /><a href="https://www.dropbox.com/s/21q1ymf2y86kqcz/introsort.pdf" target="_blank"> IntroSort Paper</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(n)</code></td>
    <td>(V/D) - Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></code></td>
    <td>O(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="myred">O(n)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></code></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>*(V/D) - Bubble sort</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></code></td>
    <td />
    <td />
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td><a href="http://wordaligned.org/articles/patience-sort" target="_blank">Longest common sequence</a></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></code></td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>O(n)</td>
    <td>Faster on partial sorted list</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>*(V/D) - Heap sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></code></td>
    <td />
    <td />
    <td />
    <td>O(n)</td>
    <td>Slower than bubble sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>Merge + Insertion sort</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Online sorting</th>
    <th />
    <th />
    <th />
    <th />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Stable sorting</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></td>
    <td />
    <td>O(n + k)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n.k)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></td>
    <td />
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></td>
    <td />
    <td />
    <td>O(N + n)</td>
    <td>O(N + n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></td>
    <td />
    <td />
    <td>O(kN)</td>
    <td>O(k + N)</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Non-category Sorts</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_sort" target="_blank">Adaptive sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/American_flag_sort" target="_blank">American flag sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bead_sort" target="_blank">Bead sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Burstsort" target="_blank">Burstsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian tree</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Comparison_sort" target="_blank">Comparison sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank">Dutch national flag problem</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Elevator_algorithm" target="_blank">Elevator algorithm</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/External_sorting" target="_blank">External sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Flashsort" target="_blank">Flashsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Integer_sorting" target="_blank">Integer sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Internal_sort" target="_blank">Internal sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/J_sort" target="_blank">J sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Median_cut" target="_blank">Median cut</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Ordicate" target="_blank">Ordicate</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pairwise_sorting_network" target="_blank">Pairwise sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pancake_sorting" target="_blank">Pancake sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Partial_sorting" target="_blank">Partial sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Quantum_sort" target="_blank">Quantum sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Samplesort" target="_blank">Samplesort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Sorting_network" target="_blank">Sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spaghetti_sort" target="_blank">Spaghetti sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spreadsort" target="_blank">Spreadsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tournament_sort" target="_blank">Tournament sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tree_sort" target="_blank">Tree sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/UnShuffle_sort" target="_blank">UnShuffle sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
</feed>
