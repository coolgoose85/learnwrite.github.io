<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-12-31T13:46:17-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming]]></title>
    <link href="http://distkeys.com/blog/2014/11/27/dynamic-programming/"/>
    <updated>2014-11-27T18:32:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/11/27/dynamic-programming</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</a>    <ul>
      <li><a href="#combinational-search-and-optimization-i">Combinational Search and Optimization I</a></li>
      <li><a href="#combinational-search-and-optimization-ii">Combinational Search and Optimization II</a></li>
      <li><a href="#dynamic-programming">Dynamic Programming</a></li>
    </ul>
  </li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#coin-changing-problem---total-ways">Coin changing problem - Total ways</a></li>
      <li><a href="#coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</a></li>
    </ul>
  </li>
  <li><a href="#include-stdioh">include <stdio.h /></a></li>
</ul>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/0/03/Shortest_path_optimal_substructure.svg/200px-Shortest_path_optimal_substructure.svg.png"/>
  
  <h2>dynamic programming</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Mathematics" title="Mathematics">mathematics</a>, <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <a href="http://en.wikipedia.org/wiki/Economics" title="Economics">economics</a>, and <a href="http://en.wikipedia.org/wiki/Bioinformatics" title="Bioinformatics">bioinformatics</a>, <strong>dynamic programming</strong> is a method for solving complex problems by breaking them down into simpler subproblems. It is applicable to problems exhibiting the properties of <a href="http://en.wikipedia.org/wiki/Overlapping_subproblem" title="Overlapping subproblem" class="mw-redirect">overlapping subproblems</a>  and <a href="http://en.wikipedia.org/wiki/Optimal_substructure" title="Optimal substructure">optimal substructure</a> (described below).  When applicable, the method takes far less time than naive methods that don't take advantage of the subproblem overlap (like <a href="http://en.wikipedia.org/wiki/Depth-first_search" title="Depth-first search">depth-first search</a>).
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Dynamic_programming">Read more</a>
</div>
</p>

<!-- more -->

<p><br /></p>

<h2 id="combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</h2>

<p>Recently, I came across these three videos about the <em>Combinational Search and Dynamic Programming</em> and I think these videos explains the complexity in great simplicity. I highly recommend for one who is beginner and want to learn the fundamentals.</p>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-i">Combinational Search and Optimization I</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/nSPBb71RS4c?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-ii">Combinational Search and Optimization II</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/PPFl2I6YVUo?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="dynamic-programming">Dynamic Programming</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/6h6Fi6AQiRM?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h2 id="problems">Problems</h2>

<h3 id="coin-changing-problem---total-ways">Coin changing problem - Total ways</h3>

<p>Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins doesn’t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.</p>

<p><br />
The first step is to come up with the simple recursive solution which solves this problem. Once that done we can map that problem to the dynamic problem(DP) solution.</p>

<blockquote>
  <p>For DP solution there are two ways top-down (with recursive called memoization technique) or bottom up (with iteration). </p>
</blockquote>

<p>This <a href="http://qr.ae/lAQbS" title="Dynamic programming approaches">article</a> explains about above quote in detail.</p>

<p>The recursive solution of this problem would look like this. If one have watched above videos, you would understand the logic or it is explained <a href="http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/" title="recursive code">here</a>. Till now, it is all same like any other source or web pages across internet for solution of this problem. But, soon it’s going to differ. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#777">// Returns the count of ways we can sum  S[0…m-1] coins to get sum n</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#0a8;font-weight:bold">int</span> count( <span style="color:#0a8;font-weight:bold">int</span> S[], <span style="color:#0a8;font-weight:bold">int</span> m, <span style="color:#0a8;font-weight:bold">int</span> n )
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>{
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#777">// If n is 0 then there is 1 solution (do not include any coin)</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#080;font-weight:bold">if</span> (n == <span style="color:#00D">0</span>)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#777">// If n is less than 0 then no solution exists</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#080;font-weight:bold">if</span> (n &amp;lt; <span style="color:#00D">0</span>)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#777">// If there are no coins and n is greater than 0, then no solution exist</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#080;font-weight:bold">if</span> (m &amp;lt;=<span style="color:#00D">0</span> &amp;amp;&amp;amp; n &amp;gt;= <span style="color:#00D">1</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#777">// count is sum of solutions (i) including S[m-1] (ii) excluding S[m-1]</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="color:#080;font-weight:bold">return</span> count( S, m - <span style="color:#00D">1</span>, n ) + count( S, m, n-S[m-<span style="color:#00D">1</span>] ); } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<p><a href="http://amzn.com/098478280X%20" title="cracking the coding interview">Cracking the coding interview</a> book also have same problem with below recursive solution. In this code S = {25, 10, 5, 1}</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#0a8;font-weight:bold">int</span> getchange(<span style="color:#0a8;font-weight:bold">int</span> n, <span style="color:#0a8;font-weight:bold">int</span> denom)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#0a8;font-weight:bold">int</span> next_denom = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">switch</span>(denom) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#080;font-weight:bold">case</span> <span style="color:#00D">25</span>:
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    next_denom = <span style="color:#00D">10</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#080;font-weight:bold">case</span> <span style="color:#00D">10</span>:
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    next_denom = <span style="color:#00D">5</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#080;font-weight:bold">case</span> <span style="color:#00D">5</span>:
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    next_denom = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#080;font-weight:bold">case</span> <span style="color:#00D">1</span>:
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="color:#0a8;font-weight:bold">int</span> ways = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i*denom &amp;lt;= n; i++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>ways += getchange(n - i*denom, next_denom);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="color:#080;font-weight:bold">return</span> ways; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<p>As explained in <a href="http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming" title="DP video">dynamic programming video</a> above, lets convert this program into dynamic programming program. This is a top down approach.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>&lt;p&gt;define N <span style="color:#00D">50</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>define CHANGESIZE <span style="color:#00D">4</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> changeSize;&lt;/p&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>&lt;p&gt;<span style="color:#777">// Sum upto 50</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#0a8;font-weight:bold">int</span> table[N + <span style="color:#00D">1</span>][CHANGESIZE + <span style="color:#00D">1</span>];&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;p&gt;<span style="color:#777">// Converted top down DP version of count()</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="color:#0a8;font-weight:bold">int</span> countDP(<span style="color:#0a8;font-weight:bold">int</span> S[], <span style="color:#0a8;font-weight:bold">int</span> m, <span style="color:#0a8;font-weight:bold">int</span> n)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>{
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span> (n == <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    table[n][m] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span style="color:#080;font-weight:bold">return</span> table[n][m];
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#080;font-weight:bold">if</span> (n &amp;lt; <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (m &amp;lt;=<span style="color:#00D">0</span> &amp;amp;&amp;amp; n &amp;gt;= <span style="color:#00D">1</span>)
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="color:#080;font-weight:bold">if</span> (n-S[m-<span style="color:#00D">1</span>] &amp;lt; <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="color:#080;font-weight:bold">if</span> (table[n][m-<span style="color:#00D">1</span>] == <span style="color:#00D">0</span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>table[n][m-<span style="color:#00D">1</span>] = countDP(S, m-<span style="color:#00D">1</span>, n);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>}
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span style="color:#080;font-weight:bold">if</span> (table[n-S[m-<span style="color:#00D">1</span>]][m] == <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>table[n-S[m-<span style="color:#00D">1</span>]][m] = countDP(S, m, n-S[m-<span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>}
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span style="color:#080;font-weight:bold">return</span> (table[n][m-<span style="color:#00D">1</span>] + table[n-S[m-<span style="color:#00D">1</span>]][m]); }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> inittable()
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>{
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &amp;lt; N + <span style="color:#00D">1</span> ; i++) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &amp;lt; changeSize + <span style="color:#00D">1</span>; j++) {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        table[i][j] = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">return</span>; }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>{
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span style="color:#0a8;font-weight:bold">int</span> ways = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>    <span style="color:#0a8;font-weight:bold">int</span> change&lt;a href=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming</span><span style="color:#710">&quot;</span></span> title=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">DP video</span><span style="color:#710">&quot;</span></span>&gt;<span style="color:#00D">4</span>&lt;/a&gt; = {<span style="color:#00D">25</span>, <span style="color:#00D">10</span>, <span style="color:#00D">5</span>, <span style="color:#00D">1</span>};
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>    changeSize = <span style="color:#080;font-weight:bold">sizeof</span>(change)/<span style="color:#080;font-weight:bold">sizeof</span>(change[<span style="color:#00D">0</span>]);&lt;/p&gt;
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">1</span>; sum &amp;lt; <span style="color:#00D">50</span>; sum++) {
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Sum %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, sum);        
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>ways = countDP(change, changeSize, sum);
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">CountDP = %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, ways);
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">============</span><span style="color:#b0b">\n</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>inittable();
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>}
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>
<span class="line-numbers"><a href="#n66" name="n66">66</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; }
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

<h3 id="coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</h3>

<p>Given a list of N coins, their values (V1, V2, … , VN),
and the total sum S. Find the minimum number of coins the sum of which is
S (we can use as many coins of one type as we want), or report that it’s
not possible to select coins in such a way that they sum up to S.</p>

<p>This problem has been published at various sites including following with explanation in great detail</p>

<ul>
  <li><a href="http://www.topcoder.com/tc?d1=tutorials&amp;d2=dynProg&amp;module=Static" title="topcoder coin changing problem">Topcoder coin changing problem</a></li>
  <li><a href="http://www.bogotobogo.com/Algorithms/dynamic_programming.php" title="DP">Dynamic programming</a></li>
</ul>

<p>Topcode article explains the bottom up part very well. The idea here is to determine how many minimum coins are required for sum 1 then for sum 2 then for sum 3 and so on. </p>

<p><em>TopCoder article says</em></p>

<p>For a better understanding let’s take this example:<br />
Given coins with values 1, 3, and 5.<br />
And the sum S is set to be 11.<br /></p>

<p>First of all we mark that for state 0 (sum 0) we have found a solution with a minimum number of 0 coins. We then go to sum 1. First, we mark that we haven’t yet found a solution for this one (a value of Infinity would be fine). Then we see that only coin 1 is less than or equal to the current sum. Analyzing it, we see that for sum 1-V1= 0 we have a solution with 0 coins. Because we add one coin to this solution, we’ll have a solution with 1 coin for sum 1. It’s the only solution yet found for this sum. We write (save) it.</p>

<p>Then we proceed to the next state - sum 2. We again see that the only coin which is less or equal to this sum is the first coin, having a value of 1. The optimal solution found for sum (2-1) = 1 is coin 1. This coin 1 plus the first coin will sum up to 2, and thus make a sum of 2 with the help of only 2 coins. This is the best and only solution for sum 2.</p>

<p>Now we proceed to sum 3. We now have 2 coins which are to be analyzed - first and second one, having values of 1 and 3. Let’s see the first one. There exists a solution for sum 2 (3 - 1) and therefore we can construct from it a solution for sum 3 by adding the first coin to it. Because the best solution for sum 2 that we found has 2 coins, the new solution for sum 3 will have 3 coins. Now let’s take the second coin with value equal to 3. The sum for which this coin needs to be added to make 3 , is 0. We know that sum 0 is made up of 0 coins. Thus we can make a sum of 3 with only one coin - 3. We see that it’s better than the previous found solution for sum 3 , which was composed of 3 coins. We update it and mark it as having only 1 coin. The same we do for sum 4, and get a solution of 2 coins - 1+3. And so on.</p>

<p>I followed this explanation and tried to come up with the program which is as follows</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Min coin change</span>  <a href='http://ideone.com/IXJL0d' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#777">//  Given a list of N coins, their values (V1, V2, … , VN),</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#777">//  and the total sum S. Find the minimum number of coins the sum of which is</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#777">//  S (we can use as many coins of one type as we want), or report that it’s</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#777">//  not possible to select coins in such a way that they sum up to S.&lt;/p&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;h1 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">include-stdioh</span><span style="color:#710">&quot;</span></span>&gt;include &lt;stdio.h /&gt;&lt;/h1&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> mincount(<span style="color:#0a8;font-weight:bold">int</span> change[], <span style="color:#0a8;font-weight:bold">int</span> changeSize, <span style="color:#0a8;font-weight:bold">int</span> SUM)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>{
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#0a8;font-weight:bold">int</span> table[SUM + <span style="color:#00D">1</span>];&lt;/p&gt;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>&lt;pre&gt;&lt;code&gt;table[<span style="color:#00D">0</span>] = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#0a8;font-weight:bold">int</span> min = INT32_MAX;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">1</span>; sum &amp;lt;= SUM; sum++) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>; j &amp;lt; changeSize; j++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span style="color:#777">// Pick first coin and substract with the sum</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="color:#777">// Check if sum is less than 0</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span style="color:#080;font-weight:bold">if</span> (sum - change[j] &amp;lt; <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span style="color:#080;font-weight:bold">continue</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (sum - change[j] == <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span style="color:#777">// This is the case when sum is either 1, 5, 10, 25</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span style="color:#777">// In this case mininum number of coin required is 1</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    min = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span style="color:#777">// This is case when we say sum is 3</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#777">// In this case lets start with first coint which is 1</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span style="color:#777">// If we choose coint 1 then the sum left os 3 - 1 = 2</span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span style="color:#777">// Given we are calculating for sum 3 means we have already</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span style="color:#777">// calculated for sum 2. So go to table for sum = 2 and</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span style="color:#777">// get the min number of ways sum 2 is computed.</span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span style="color:#777">// Here i is the sum i.e. lets say as per our example</span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    <span style="color:#777">// i = 3, j = 0</span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span style="color:#777">// 1 + table[3 - change[0]];</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span style="color:#777">// 1 + table[3 - 1];</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    <span style="color:#777">// 1 + table[2];</span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    <span style="color:#777">// 1 + 2 = 3</span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span style="color:#777">// Sum 3 requires at least 3 coins {1, 1, 1}</span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    <span style="color:#080;font-weight:bold">if</span> (min &amp;gt; (<span style="color:#00D">1</span> + table[sum - change[j]])) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    min = <span style="color:#00D">1</span> + table[sum - change[j]];
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>}
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>table[sum] = min;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>min = INT32_MAX;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>}
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span><span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &amp;lt;= SUM; i++) {
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">SUM[%d]: %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, i, table[i]);
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>}
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>
<span class="line-numbers"><a href="#n56" name="n56">56</a></span><span style="color:#080;font-weight:bold">return</span> table[SUM]; }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#0a8;font-weight:bold">int</span> argc, <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a8;font-weight:bold">char</span> * argv[])
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>{
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>    <span style="color:#0a8;font-weight:bold">int</span> change&lt;a href=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming</span><span style="color:#710">&quot;</span></span> title=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">DP video</span><span style="color:#710">&quot;</span></span>&gt;<span style="color:#00D">4</span>&lt;/a&gt; = {<span style="color:#00D">1</span>, <span style="color:#00D">5</span>, <span style="color:#00D">10</span>, <span style="color:#00D">25</span>};
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>    <span style="color:#0a8;font-weight:bold">int</span> changeSize = <span style="color:#080;font-weight:bold">sizeof</span>(change)/<span style="color:#080;font-weight:bold">sizeof</span>(change[<span style="color:#00D">0</span>]);
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>    <span style="color:#0a8;font-weight:bold">int</span> SUM = <span style="color:#00D">16</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>&lt;pre&gt;&lt;code&gt;printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">MinChange for sum %d = %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, SUM, mincount(change, changeSize, SUM));
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>
<span class="line-numbers"><a href="#n67" name="n67">67</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers*</a></li>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</a></li>
      <li><a href="#merge-two-sorted-array">Merge two sorted array</a></li>
      <li><a href="#merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</a></li>
    </ul>
  </li>
  <li><a href="#define-arr1size-5">define ARR1SIZE 5</a>    <ul>
      <li><a href="#sort-array-based-on-count">Sort array based on count</a></li>
    </ul>
  </li>
  <li><a href="#define-arraysize-6">define ARRAYSIZE 6</a>    <ul>
      <li><a href="#find-odd-number-of-occurrence">Find odd number of occurrence</a></li>
      <li><a href="#find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</a></li>
      <li><a href="#searching-an-element-in-a-rotated-sorted-array">Searching an Element in a Rotated Sorted Array</a></li>
      <li><a href="#largest-sum-contiguous-subarray">Largest Sum Contiguous Subarray</a></li>
      <li><a href="#permute-numbers">Permute numbers</a></li>
    </ul>
  </li>
  <li><a href="#define-test-1">define TEST 1</a>    <ul>
      <li><a href="#string-problems">String Problems</a>        <ul>
          <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
          <li><a href="#duplicates-and-count">Duplicates and Count</a></li>
          <li><a href="#remove-all-consecutive-duplicate-elements">Remove all consecutive duplicate elements</a></li>
          <li><a href="#rotate-a-string">Rotate a string</a></li>
          <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. <br /><br />
Give a Θ(n) way of solving this problem. Prove its running time and correctness. <br />Your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p><strong>Other variant of the same problem</strong> <br />
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
Input [6,4,5,7,9,1,2]<br />
Sum = 10 <br />
Then the pairs are  [6,4] , [9,1]
<!-- more --></p>

<p><br />
<strong>Solution</strong></p>

<p>There are three solutions<br /></p>

<p><strong>Sorted array</strong> <br />
1. When array is sorted, take two index variable. Indx1 point to fisrt index and Indx2 points to the last index<br />
2. If Indx1 + Indx2 &lt; sum then increment the Indx1<br />
3. Else if Indx1 + Indx2 &gt; sum then decrement Indx 2<br />
4. If Indx 1 &gt; Indx 2 then halt -&gt; No pairs found<br /></p>

<p>If pair found then keep doing the same to find next pair.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Sorted array</span>  <a href='http://ideone.com/fmKgvW' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> printPairs(<span style="color:#0a8;font-weight:bold">int</span> arr[], <span style="color:#0a8;font-weight:bold">int</span> arr_size, <span style="color:#0a8;font-weight:bold">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> front = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">int</span> back = arr_size - <span style="color:#00D">1</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (front &amp;lt; back) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (arr[front] + arr[back] &amp;lt; sum) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        front++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (arr[front] + arr[back] &amp;gt; sum) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        back--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        printf (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Pair with given sum %d is (%d, %d) </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>,
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                sum, arr[front], arr[back]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        back--;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>} }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>&lt;p&gt;<span style="color:#777">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>{
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span style="color:#0a8;font-weight:bold">int</span> A[] = {<span style="color:#00D">4</span>, <span style="color:#00D">5</span>, <span style="color:#00D">6</span>, <span style="color:#00D">10</span>, <span style="color:#00D">12</span>, <span style="color:#00D">12</span>};
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">16</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr_size = <span style="color:#00D">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Hashing/Binary Map</strong><br />
Another solution works for both <em>sorted</em> and <em>unsorted</em> array. 
In this approach we not actually using the hash function fundamental idea is to maintain the occurrence of number i.e. Binary Map</p>

<blockquote>
  <p>The caveat is that we need extra memory.</p>
</blockquote>

<ol>
  <li>Get the number from input array<br /></li>
  <li>Num2 = Sum - arr[i]<br /></li>
  <li>If we have encountered Num2 already in input array then we found a pair i.e.<br /> if(binMap[Num2] == 1)<br /></li>
  <li>Else record input element in Binary map i.e. binMap[arr[i]] = 1;<br /></li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Binary Map</span>  <a href='http://ideone.com/S0CNlO' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#define</span> MAX <span style="color:#00D">100000</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> printPairs(<span style="color:#0a8;font-weight:bold">int</span> arr[], <span style="color:#0a8;font-weight:bold">int</span> arr_size, <span style="color:#0a8;font-weight:bold">int</span> sum)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">int</span> temp = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">int</span> binMap[MAX] = {<span style="color:#00D">0</span>}; /&lt;em&gt;initialize hash map as <span style="color:#00D">0</span>&lt;/em&gt;/&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span>(i = <span style="color:#00D">0</span>; i &amp;lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>{
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span>(temp &amp;gt;= <span style="color:#00D">0</span> &amp;amp;&amp;amp; binMap[temp] == <span style="color:#00D">1</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Pair with given sum %d is (%d, %d) </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>,
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                sum, arr[i], temp);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    binMap[arr[i]] = <span style="color:#00D">1</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>} }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;p&gt;<span style="color:#777">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>{
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span style="color:#0a8;font-weight:bold">int</span> A[] = {<span style="color:#00D">12</span>, <span style="color:#00D">4</span>, <span style="color:#00D">45</span>, <span style="color:#00D">6</span>, <span style="color:#00D">10</span>, <span style="color:#00D">12</span>};
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">16</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr_size = <span style="color:#00D">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Bit Vector</strong><br /></p>

<p>This approach is similar to Binary map except using array for extra space we use bit vector to save some of extra space.</p>

<blockquote>
  <p>This program works for max for 31 as bit map is <em>int</em> which is 32 bits. For numbers more than 31 more memory could be allocated.</p>
</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Bit Vector</span>  <a href='http://ideone.com/iFDimZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> printPairs(<span style="color:#0a8;font-weight:bold">int</span> arr[], <span style="color:#0a8;font-weight:bold">int</span> arr_size, <span style="color:#0a8;font-weight:bold">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">int</span> temp = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">int</span> bitmap = <span style="color:#00D">0</span>; <span style="color:#777">// all bits are 0</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">int</span> bitmask = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span>(i = <span style="color:#00D">0</span>; i &amp;lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>{
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    bitmask = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    bitmask = <span style="color:#00D">1</span> &amp;lt;&amp;lt; temp;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#080;font-weight:bold">if</span>(temp &amp;gt;= <span style="color:#00D">0</span> &amp;amp;&amp;amp; (bitmap &amp;amp; bitmask))
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Pair with given sum %d is (%d, %d) </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>               sum, arr[i], temp);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    bitmap |= <span style="color:#00D">1</span> &amp;lt;&amp;lt; arr[i];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>} }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>&lt;p&gt;<span style="color:#777">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>{
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span style="color:#0a8;font-weight:bold">int</span> A[] = {<span style="color:#00D">12</span>, <span style="color:#00D">4</span>, <span style="color:#00D">13</span>, <span style="color:#00D">6</span>, <span style="color:#00D">10</span>, <span style="color:#00D">3</span>};
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">16</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr_size = <span style="color:#00D">6</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>&lt;pre&gt;&lt;code&gt;printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] &gt;= k. <br /></p>

<p>Your algorithm should also output all the pairs of indices i, j such that A[i] + A[j] &gt;= k </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers*</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input [2,1, 3, 2, 3, 1, 4]</p>

<p>Output  [2,1,3] </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-two-sorted-array">Merge two sorted array</h4>
<p>Input array1 [1, 3, 6, 7] <br />
Input array2 [1, 2, 4]</p>

<p>Output [1, 1, 2, 3, 4, 6, 7]</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Merge Sorted Arrays</span>  <a href='http://ideone.com/WaTPEt' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> lSize = <span style="color:#00D">4</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#0a8;font-weight:bold">int</span> rSize = <span style="color:#00D">3</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#0a8;font-weight:bold">int</span> L[<span style="color:#00D">4</span>] = {<span style="color:#00D">1</span>, <span style="color:#00D">3</span>, <span style="color:#00D">6</span>, <span style="color:#00D">7</span>};
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#0a8;font-weight:bold">int</span> R[<span style="color:#00D">4</span>] = {<span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">4</span>};
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#0a8;font-weight:bold">int</span> finalArray[<span style="color:#00D">7</span>];&lt;/p&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> merge()
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>{
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#0a8;font-weight:bold">int</span> lIndx = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span style="color:#0a8;font-weight:bold">int</span> rIndx = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; (lSize + rSize); i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">if</span> (L[lIndx] &amp;lt;= R[rIndx]) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        finalArray[i] = L[lIndx++];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span style="color:#080;font-weight:bold">if</span> (lIndx == lSize) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        finalArray[i] = R[rIndx++];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span style="color:#080;font-weight:bold">if</span> (rIndx == rSize) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>}
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>i++;
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#080;font-weight:bold">if</span> (lIndx != lSize) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span style="color:#080;font-weight:bold">while</span>(<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        finalArray[i++] = L[lIndx++];
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        <span style="color:#080;font-weight:bold">if</span> (lIndx == lSize) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>}
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span style="color:#080;font-weight:bold">if</span> (rIndx != rSize) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    <span style="color:#080;font-weight:bold">while</span>(<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        finalArray[i++] = R[rIndx++];
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        <span style="color:#080;font-weight:bold">if</span> (rIndx == rSize) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>} }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> display()
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>{
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>&lt;pre&gt;&lt;code&gt;printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#b0b">\n</span><span style="color:#D20">Array1: </span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n56" name="n56">56</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; lSize; i++) {
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, L[i]);
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>}
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">Array2: </span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n61" name="n61">61</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; rSize; i++) {
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, R[i]);
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>}
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">Merge array: </span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n66" name="n66">66</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; lSize+rSize; i++) {
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, finalArray[i]);
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>} }
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>{
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>    <span style="color:#777">// Test 1</span>
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>    merge();
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>    display();&lt;/p&gt;
<span class="line-numbers"><a href="#n76" name="n76">76</a></span>
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#777">// Test 2</span>
<span class="line-numbers"><a href="#n78" name="n78">78</a></span>R[<span style="color:#00D">0</span>] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>R[<span style="color:#00D">1</span>] = <span style="color:#00D">3</span>;
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span>R[<span style="color:#00D">2</span>] = <span style="color:#00D">6</span>;
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>R[<span style="color:#00D">3</span>] = <span style="color:#00D">7</span>;
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>L[<span style="color:#00D">0</span>] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>L[<span style="color:#00D">1</span>] = <span style="color:#00D">2</span>;
<span class="line-numbers"><a href="#n84" name="n84">84</a></span>L[<span style="color:#00D">2</span>] = <span style="color:#00D">4</span>;
<span class="line-numbers"><a href="#n85" name="n85">85</a></span>lSize = <span style="color:#00D">3</span>;
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>rSize = <span style="color:#00D">4</span>;
<span class="line-numbers"><a href="#n87" name="n87">87</a></span>merge();
<span class="line-numbers"><a href="#n88" name="n88">88</a></span>display();
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span><span style="color:#777">// test 3</span>
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>L[<span style="color:#00D">0</span>] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>R[<span style="color:#00D">0</span>] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>lSize = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n94" name="n94">94</a></span>rSize = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n95" name="n95">95</a></span>merge();
<span class="line-numbers"><a href="#n96" name="n96">96</a></span>display();
<span class="line-numbers"><a href="#n97" name="n97">97</a></span>
<span class="line-numbers"><a href="#n98" name="n98">98</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</h4>

<p>Input array1 [6, 3, 6, 1, 7] <br />
Input array2 [5, 1, 2, 4, 6]</p>

<p>Output could be in sorted order or non-sorted order based on algorithm you choose to solve it.</p>

<p>Output [1, 2, 3, 4, 5, 6, 7]  OR<br />
 Output [6, 3, 1, 7, 5, 2, 4] OR <br />
 Output [5, 1, 2, 4, 6, 3, 7] OR <br />
 Output [6, 5, 3, 1, 2, 4, 7] etc…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Merge Unsorted Arrays</span>  <a href='http://ideone.com/IScZ7r' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;h1 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">define-arr1size-5</span><span style="color:#710">&quot;</span></span>&gt;define ARR1SIZE <span style="color:#00D">5</span>&lt;/h1&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span style="color:#579">#define</span> ARR2SIZE <span style="color:#00D">5</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>{
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr1[] = {<span style="color:#00D">6</span>, <span style="color:#00D">3</span>, <span style="color:#00D">6</span>, <span style="color:#00D">1</span>, <span style="color:#00D">7</span>};
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#0a8;font-weight:bold">int</span> arr2[] = {<span style="color:#00D">5</span>, <span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">4</span>, <span style="color:#00D">6</span>};
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr3[ARR1SIZE + ARR2SIZE];&lt;/p&gt;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#777">// Using bit map, All bits are 0</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#0a8;font-weight:bold">int</span> bitMap = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#0a8;font-weight:bold">int</span> bitMask = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#0a8;font-weight:bold">int</span> k = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; ARR1SIZE; i++) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="color:#777">// Check if value already exist</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    bitMask = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    bitMask = <span style="color:#00D">1</span> &amp;lt;&amp;lt; arr1[i];
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span style="color:#080;font-weight:bold">if</span> (bitMap &amp;amp; bitMask) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span style="color:#080;font-weight:bold">continue</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    arr3[k++] = arr1[i];
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    <span style="color:#777">// Mark bitMap that value exist</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    bitMap |= <span style="color:#00D">1</span> &amp;lt;&amp;lt; arr1[i];
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>}
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; ARR2SIZE; i++) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span style="color:#777">// Check if value already exist</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    bitMask = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    bitMask = <span style="color:#00D">1</span> &amp;lt;&amp;lt; arr2[i];
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span style="color:#080;font-weight:bold">if</span> (bitMap &amp;amp; bitMask) {
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>        <span style="color:#080;font-weight:bold">continue</span>;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    arr3[k++] = arr2[i];
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>    <span style="color:#777">// Mark bitMap that value exist</span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    bitMap |= <span style="color:#00D">1</span> &amp;lt;&amp;lt; arr2[i];
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>}
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Merged Array</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; k; i++) {
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, arr3[i]);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>}
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sort-array-based-on-count">Sort array based on count</h4>

<p>Given number in array [2, 1, 3, 2, 1, 4] sort array based on count of numbers.</p>

<p>Sort them as [1, 1, 2, 2, 3, 4]</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Counting Sort</span>  <a href='http://ideone.com/0BumWs' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;h1 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">define-arraysize-6</span><span style="color:#710">&quot;</span></span>&gt;define ARRAYSIZE <span style="color:#00D">6</span>&lt;/h1&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span style="color:#579">#define</span> MAX <span style="color:#00D">4</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>{
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr[] = {<span style="color:#00D">2</span>, <span style="color:#00D">1</span>, <span style="color:#00D">3</span>, <span style="color:#00D">2</span>, <span style="color:#00D">1</span>, <span style="color:#00D">4</span>};
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#0a8;font-weight:bold">int</span> final[ARRAYSIZE];&lt;/p&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#777">// Given we know max element in array</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#777">// This technique is based on counting sort</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#0a8;font-weight:bold">int</span> count[MAX + <span style="color:#00D">1</span>] = {<span style="color:#00D">0</span>};
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; ARRAYSIZE; i++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    count[arr[i]]++;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>}
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; MAX + <span style="color:#00D">1</span>; i++) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span style="color:#080;font-weight:bold">if</span> (count[i] != <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span style="color:#080;font-weight:bold">while</span> (count[i] != <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            final[j++] = i;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            count[i]--;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Sorted Array</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; ARRAYSIZE; i++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, final[i]);
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>}
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-odd-number-of-occurrence">Find odd number of occurrence</h4>

<p>Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number in O(n) time &amp; constant space.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Odd occurence  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> getOddOccurrence(<span style="color:#0a8;font-weight:bold">int</span> ar[], <span style="color:#0a8;font-weight:bold">int</span> ar_size)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>     <span style="color:#0a8;font-weight:bold">int</span> i;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     <span style="color:#0a8;font-weight:bold">int</span> res = <span style="color:#00D">0</span>; 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>     <span style="color:#080;font-weight:bold">for</span> (i=<span style="color:#00D">0</span>; i &amp;lt; ar_size; i++)   &lt;br /&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        res = res ^ ar[i];&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;pre&gt;&lt;code&gt; <span style="color:#080;font-weight:bold">return</span> res; }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>&lt;p&gt;<span style="color:#777">/* Diver function to test above function */</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>     <span style="color:#0a8;font-weight:bold">int</span> ar[] = {<span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">4</span>, <span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">4</span>, <span style="color:#00D">3</span>, <span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">4</span>, <span style="color:#00D">4</span>, <span style="color:#00D">2</span>};
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>     <span style="color:#0a8;font-weight:bold">int</span> n = <span style="color:#080;font-weight:bold">sizeof</span>(ar)/<span style="color:#080;font-weight:bold">sizeof</span>(ar[<span style="color:#00D">0</span>]);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>     printf(<span style="color:#F00;background-color:#FAA">“</span>%d<span style="color:#F00;background-color:#FAA">”</span>, getOddOccurrence(ar, n));
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>     <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
</pre></div>
</div>
 </figure></notextile></div></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h4 id="find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</h4>

<p>Given an unsorted array that contains even number of occurrences for all numbers except two numbers. Find the two numbers which have odd occurrences in O(n) time complexity and O(1) extra space.</p>

<p>Input: [12, 23, 34, 12, 12, 23, 12, 45]<br />
Output: 34 and 45</p>

<p>Input: [4, 4, 100, 5000, 4, 4, 4, 4, 100, 100]<br />
Output: 100 and 5000</p>

<p>Input: [10, 20]<br />
Output: 10 and 20</p>

<p><a href="http://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurences-in-an-unsorted-array/" target="_blank">Solution Explanation</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>2 Odd Num  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#777">// Program to find the two odd occurring elements</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span><span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span style="color:#777">/* Prints two numbers that occur odd number of times. The</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#777">   function assumes that the array size is at least 2 and</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#777">   there are exactly two numbers occurring odd number of times. &lt;em&gt;/</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#777">void printTwoOdd(int arr[], int size)</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#777">{</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#777">  int xor2 = arr[0]; /&lt;/em&gt; Will hold XOR of two odd occurring elements &lt;em&gt;/</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#777">  int set_bit_no;  /&lt;/em&gt; Will have only single set bit of xor2 */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span style="color:#0a8;font-weight:bold">int</span> i;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span style="color:#0a8;font-weight:bold">int</span> n = size - <span style="color:#00D">2</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span style="color:#0a8;font-weight:bold">int</span> x = <span style="color:#00D">0</span>, y = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;p&gt;<span style="color:#777">/* Get the xor of all elements in arr[]. The xor will basically</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#777">     be xor of two odd occurring elements */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span style="color:#080;font-weight:bold">for</span>(i = <span style="color:#00D">1</span>; i &amp;lt; size; i++)
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    xor2 = xor2 ^ arr[i];&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;p&gt;<span style="color:#777">/* Get one set bit in the xor2. We get rightmost set bit</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="color:#777">     in the following line as it is easy to get */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  set_bit_no = xor2 &amp;amp; ~(xor2-<span style="color:#00D">1</span>);&lt;/p&gt;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>&lt;p&gt;<span style="color:#777">/* Now divide elements in two sets: </span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="color:#777">    1) The elements having the corresponding bit as 1. </span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span style="color:#777">    2) The elements having the corresponding bit as 0.  &lt;em&gt;/</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span style="color:#777">  for(i = 0; i &amp;lt; size; i++)</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="color:#777">  {</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span style="color:#777">     /&lt;/em&gt; XOR of first set is finally going to hold one odd </span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#777">       occurring number x */</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span style="color:#080;font-weight:bold">if</span>(arr[i] &amp;amp; set_bit_no)
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      x = x ^ arr[i];&lt;/p&gt;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>&lt;pre&gt;&lt;code&gt; <span style="color:#777">/* XOR of second set is finally going to hold the other </span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span style="color:#777">   odd occurring number y */</span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span style="color:#080;font-weight:bold">else</span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>  y = y ^ arr[i];    }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>&lt;p&gt;printf(<span style="color:#F00;background-color:#FAA">“</span><span style="color:#F00;background-color:#FAA">\</span>n The two ODD elements are %d &amp;amp; %d <span style="color:#F00;background-color:#FAA">“</span>, x, y);
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>&lt;p&gt;<span style="color:#777">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>{
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>  <span style="color:#0a8;font-weight:bold">int</span> arr[] = {<span style="color:#00D">4</span>, <span style="color:#00D">2</span>, <span style="color:#00D">4</span>, <span style="color:#00D">5</span>, <span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">3</span>, <span style="color:#00D">1</span>};
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>  <span style="color:#0a8;font-weight:bold">int</span> arr_size = <span style="color:#080;font-weight:bold">sizeof</span>(arr)/<span style="color:#080;font-weight:bold">sizeof</span>(arr[<span style="color:#00D">0</span>]);
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>  printTwoOdd(arr, arr_size);&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>&lt;p&gt;<span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>}
</pre></div>
</div>
 </figure></notextile></div></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="searching-an-element-in-a-rotated-sorted-array">Searching an Element in a Rotated Sorted Array</h4>

<p>This <a href="http://leetcode.com/2010/04/searching-element-in-rotated-array.html" target="_blank">article</a> explains the reasoning for searching an element in a rotated sorted array.</p>

<p>It even explains how to find the minimum number i.e. from where rotation started.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="largest-sum-contiguous-subarray">Largest Sum Contiguous Subarray</h4>
<p>Write an efficient C program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.</p>

<p>Array [-2, -3, 4, -1, -2, 1, 5, -3] <br />
Sum 7</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Largest Sum</span>  <a href='http://ideone.com/cVpfgF' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr[] = {-<span style="color:#00D">2</span>, -<span style="color:#00D">3</span>, <span style="color:#00D">4</span>, -<span style="color:#00D">1</span>, -<span style="color:#00D">2</span>, <span style="color:#00D">1</span>, <span style="color:#00D">5</span>, -<span style="color:#00D">3</span>};&lt;/p&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#0a8;font-weight:bold">int</span> best = -<span style="color:#00D">1110</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#0a8;font-weight:bold">int</span> sum = <span style="color:#00D">0</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#0a8;font-weight:bold">int</span> indx = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="color:#0a8;font-weight:bold">int</span> x = <span style="color:#00D">0</span>; <span style="color:#777">// start of max sub array</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#0a8;font-weight:bold">int</span> y = <span style="color:#00D">0</span>; <span style="color:#777">// end of max sub array</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#0a8;font-weight:bold">int</span> n = <span style="color:#00D">8</span>; <span style="color:#777">// size of array</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; n; i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">if</span> (sum &amp;lt;= <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        sum = arr[i];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        indx = i;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        sum += arr[i];
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span style="color:#080;font-weight:bold">if</span> (best &amp;lt; sum) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        best = sum;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        x = indx;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        y = i;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Max sum %d, start index %d, end index %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, best, x, y);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permute-numbers">Permute numbers</h4>

<p>Write all the non repeating permutations of given numbers i.e.</p>

<p>Input = [1, 2, 3, 4] <br />
Output <br />
1 2 3 4 <br />
1 2 3 4 <br />
1 2 4 3 …<br /></p>

<p>This problem is on the same footstep of <a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">string permutation</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Permute Numbers</span>  <a href='http://ideone.com/10YdsI' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;string.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;h1 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">define-test-1</span><span style="color:#710">&quot;</span></span>&gt;define TEST <span style="color:#00D">1</span>&lt;/h1&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> permute(<span style="color:#0a8;font-weight:bold">int</span> *s, <span style="color:#0a8;font-weight:bold">int</span> start, <span style="color:#0a8;font-weight:bold">int</span> end);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#088;font-weight:bold">void</span> swap(<span style="color:#0a8;font-weight:bold">int</span> *s, <span style="color:#0a8;font-weight:bold">int</span> start, <span style="color:#0a8;font-weight:bold">int</span> end);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#088;font-weight:bold">void</span> startTesting();&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#088;font-weight:bold">void</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="color:#579">#ifdef</span> TEST
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    startTesting();
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#579">#endif</span>&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> swap(<span style="color:#0a8;font-weight:bold">int</span> *s, <span style="color:#0a8;font-weight:bold">int</span> start, <span style="color:#0a8;font-weight:bold">int</span> end) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="color:#0a8;font-weight:bold">int</span> temp = s[start];
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    s[start] = s[end];
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    s[end] = temp;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> permute(<span style="color:#0a8;font-weight:bold">int</span> *s, <span style="color:#0a8;font-weight:bold">int</span> start, <span style="color:#0a8;font-weight:bold">int</span> end)
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>{
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (start == end) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; <span style="color:#00D">4</span>; i++) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, s[i]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    }
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>} <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span style="color:#080;font-weight:bold">for</span> (j = start; j &amp;lt;= end; j++) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        swap(s, start, j);
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        permute(s, start + <span style="color:#00D">1</span>, end);
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>        swap(s, start, j);
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>} }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> test1()
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>{
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    <span style="color:#0a8;font-weight:bold">int</span> s[] = {<span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">4</span>};
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;pre&gt;&lt;code&gt;printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">permute </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; <span style="color:#00D">4</span>; i++) {
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, s[i]);
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>}
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>permute(s, <span style="color:#00D">0</span>, <span style="color:#00D">3</span>);
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>); }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> startTesting()
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>{
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>    test1();
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>}
</pre></div>
</div>
 </figure></notextile></div></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>String Reverse</span>  <a href='http://ideone.com/vfTxcr' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;string.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#088;font-weight:bold">void</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">char</span> str[] = <span style="color:#F00;background-color:#FAA">“</span>testString<span style="color:#F00;background-color:#FAA">”</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">int</span> len = strlen(str);&lt;/p&gt;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span>(i = <span style="color:#00D">0</span>; i &amp;lt; len/<span style="color:#00D">2</span>; i++){
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    str[len - i - <span style="color:#00D">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    str[i] ^= str[len - i - <span style="color:#00D">1</span>];
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    str[len - i - <span style="color:#00D">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Reverse String %s </span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, str);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span> 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div>
<br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="duplicates-and-count">Duplicates and Count</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Duplicate &amp; count</span>  <a href='http://ideone.com/GWxZRK' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> printDup(<span style="color:#0a8;font-weight:bold">char</span> *str)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> count[<span style="color:#00D">256</span>] = {<span style="color:#00D">0</span>};
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (*str != <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    count[*str++]++;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; <span style="color:#00D">256</span>; i++) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span> (count[i] &amp;gt; <span style="color:#00D">0</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%c %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, i, count[i]);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>} }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>{
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span style="color:#0a8;font-weight:bold">char</span> *str = <span style="color:#F00;background-color:#FAA">“</span>Foo Bar<span style="color:#F00;background-color:#FAA">”</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>&lt;pre&gt;&lt;code&gt;printDup(str);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-all-consecutive-duplicate-elements">Remove all consecutive duplicate elements</h4>
<p>Remove all consecutive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Remove dup </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#088;font-weight:bold">void</span> removeDup(<span style="color:#0a8;font-weight:bold">char</span> *str)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#0a8;font-weight:bold">int</span> read = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#0a8;font-weight:bold">int</span> write = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (str[read] != <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#080;font-weight:bold">while</span> (str[read] != <span style="color:#D20">'\0'</span> &amp;amp;&amp;amp; str[read] != str[read + <span style="color:#00D">1</span>]) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        str[write++] = str[read++];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#080;font-weight:bold">while</span> (str[read] != <span style="color:#D20">'\0'</span> &amp;amp;&amp;amp; str[read] == str[read++]);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="rotate-a-string">Rotate a string</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
len = 7<br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<p><strong>Step 1</strong></p>

<p>Break array into 2 parts from index 2 as number of time to rotate is 2</p>

<p>[1 2]  [3 4 5 6 7]</p>

<p><strong>Step 2</strong></p>

<p>Reverse both arrays</p>

<p>[2 1]  [7 6 5 4 3]</p>

<p><strong>Step 3</strong></p>

<p>Reverse all</p>

<p>Result = [3 4 5 6 7 1 2]</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Rotate Array</span>  <a href='http://ideone.com/qsdYO0' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> reverseArr(<span style="color:#0a8;font-weight:bold">int</span> arr[], <span style="color:#0a8;font-weight:bold">int</span> start, <span style="color:#0a8;font-weight:bold">int</span> end)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> temp = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (start &amp;lt; end) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    temp = arr[start];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    arr[start] = arr[end];
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    arr[end] = temp;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    start++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    end--;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;p&gt;}&lt;/p&gt;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>{
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span style="color:#0a8;font-weight:bold">int</span> arr[] = {<span style="color:#00D">1</span>, <span style="color:#00D">2</span>, <span style="color:#00D">3</span>, <span style="color:#00D">4</span>, <span style="color:#00D">5</span>, <span style="color:#00D">6</span>, <span style="color:#00D">7</span>};
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span style="color:#0a8;font-weight:bold">int</span> rotate = <span style="color:#00D">2</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span style="color:#0a8;font-weight:bold">int</span> size = <span style="color:#00D">7</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>&lt;pre&gt;&lt;code&gt;reverseArr(arr, <span style="color:#00D">0</span>, rotate - <span style="color:#00D">1</span>);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>reverseArr(arr, rotate, size - <span style="color:#00D">1</span>);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>reverseArr(arr, <span style="color:#00D">0</span>, size - <span style="color:#00D">1</span>);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; size; i++) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, arr[i]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Algorithms]]></title>
    <link href="http://distkeys.com/blog/2013/12/14/graph-algorithms/"/>
    <updated>2013-12-14T13:03:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/14/graph-algorithms</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#graph-problems">Graph problems</a>    <ul>
      <li><a href="#find-neighbour-in-array">Find neighbour in array</a></li>
      <li><a href="#find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</a></li>
    </ul>
  </li>
  <li><a href="#define-xindex-3">define xIndex 3</a></li>
</ul>

<h3 id="graph-problems">Graph problems</h3>

<h4 id="find-neighbour-in-array">Find neighbour in array</h4>

<p>Find all the neighbours of a given element in array<br /></p>

<p>Neighbours can be defined as<br /></p>

<ol>
  <li>Neighbours are only vertical and horizontal elements next to given element<br /></li>
  <li>Neighbours are only vertical, horizontal and diagonal elements next to given element<br /></li>
  <li>Neighbours are all vertical, horizontal and diagonal elements next to given element<br /></li>
</ol>

<!-- more -->
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour1</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: neighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * For e.g.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * <span style="color:#00D">1</span> <span style="color:#00D">2</span> <span style="color:#00D">3</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span style="color:#00D">4</span> <span style="color:#00D">5</span> <span style="color:#00D">6</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span style="color:#00D">7</span> <span style="color:#00D">8</span> <span style="color:#00D">9</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> *
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">5</span> (<span style="color:#00D">1</span>,<span style="color:#00D">1</span>) = <span style="color:#00D">4</span>, <span style="color:#00D">2</span>, <span style="color:#00D">6</span>, <span style="color:#00D">8</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">1</span> (<span style="color:#00D">0</span>,<span style="color:#00D">0</span>) = <span style="color:#00D">4</span>, <span style="color:#00D">2</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#088;font-weight:bold">void</span> neighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span style="color:#080;font-weight:bold">if</span> (sy - <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                printf(<span style="color:#F00;background-color:#FAA">“</span><span style="color:#F00;background-color:#FAA">\</span>n[%d][%d]: %d <span style="color:#F00;background-color:#FAA">“</span>, sx, sy - <span style="color:#00D">1</span>, array[sx][sy - <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (sx - <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">[%d][%d]: %d </span><span style="color:#710">&quot;</span></span>, sx - <span style="color:#00D">1</span>, sy, array[sx - <span style="color:#00D">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="color:#080;font-weight:bold">if</span> (sy + <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">[%d][%d]: %d </span><span style="color:#710">&quot;</span></span>, sx, sy + <span style="color:#00D">1</span>, array[sx][sy + <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span style="color:#080;font-weight:bold">if</span> (sx + <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#D20">[%d][%d]: %d </span><span style="color:#710">&quot;</span></span>, sx + <span style="color:#00D">1</span>, sy,array[sx + <span style="color:#00D">1</span>][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour2</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: diagnolNeighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * diagonal neighbours too.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span style="color:#00D">1</span> <span style="color:#00D">2</span> <span style="color:#00D">3</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span style="color:#00D">4</span> <span style="color:#00D">5</span> <span style="color:#00D">6</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span style="color:#00D">7</span> <span style="color:#00D">8</span> <span style="color:#00D">9</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> *
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">5</span> (<span style="color:#00D">1</span>,<span style="color:#00D">1</span>) = <span style="color:#00D">4</span>, <span style="color:#00D">2</span>, <span style="color:#00D">6</span>, <span style="color:#00D">8</span>, <span style="color:#00D">1</span>, <span style="color:#00D">3</span>, <span style="color:#00D">7</span>, <span style="color:#00D">9</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">1</span> (<span style="color:#00D">0</span>,<span style="color:#00D">0</span>) = <span style="color:#00D">4</span>, <span style="color:#00D">2</span>, <span style="color:#00D">5</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * &lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#088;font-weight:bold">void</span> diagnolNeighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span style="color:#080;font-weight:bold">if</span> (sy - <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                printf(<span style="color:#F00;background-color:#FAA">“</span>%d <span style="color:#F00;background-color:#FAA">“</span>, array[sx][sy - <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (sx - <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx - <span style="color:#00D">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span> 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            <span style="color:#777">//Diagnols</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            <span style="color:#080;font-weight:bold">if</span> (sy - <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx - <span style="color:#00D">1</span>][sy - <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            <span style="color:#080;font-weight:bold">if</span> (sy + <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx - <span style="color:#00D">1</span>][sy + <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#080;font-weight:bold">if</span> (sy + <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx][sy + <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span style="color:#080;font-weight:bold">if</span> (sx + <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx + <span style="color:#00D">1</span>][sy]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span> 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            <span style="color:#777">//Diagnols</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            <span style="color:#080;font-weight:bold">if</span> (sy - <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx + <span style="color:#00D">1</span>][sy - <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>            <span style="color:#080;font-weight:bold">if</span> (sy + <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx + <span style="color:#00D">1</span>][sy + <span style="color:#00D">1</span>]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>            }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>} } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Neighbour3</span>  <a href='http://ideone.com/0ddGnZ' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>/&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> * Function: allNeighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> * This function returns all the neighbour of sx, sy and
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> * all diagonal neighbours.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> * For e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> * <span style="color:#00D">1</span>   <span style="color:#00D">2</span>   <span style="color:#00D">3</span>   <span style="color:#00D">4</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> * <span style="color:#00D">5</span>   <span style="color:#00D">6</span>   <span style="color:#00D">7</span>   <span style="color:#00D">8</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> * <span style="color:#00D">9</span>   <span style="color:#00D">10</span>  <span style="color:#00D">11</span>  <span style="color:#00D">12</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> * <span style="color:#00D">13</span>  <span style="color:#00D">14</span>  <span style="color:#00D">15</span>  <span style="color:#00D">16</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> *
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">5</span>  (<span style="color:#00D">1</span>,<span style="color:#00D">0</span>) = <span style="color:#00D">1</span>, <span style="color:#00D">9</span>, <span style="color:#00D">13</span>, <span style="color:#00D">6</span>, <span style="color:#00D">7</span>, <span style="color:#00D">8</span>, <span style="color:#00D">10</span>, <span style="color:#00D">15</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> * Neighbour <span style="color:#080;font-weight:bold">for</span> <span style="color:#00D">11</span> (<span style="color:#00D">2</span>,<span style="color:#00D">2</span>) = <span style="color:#00D">3</span>, <span style="color:#00D">7</span>, <span style="color:#00D">15</span>, <span style="color:#00D">9</span>, <span style="color:#00D">10</span>, <span style="color:#00D">12</span>, <span style="color:#00D">1</span>, <span style="color:#00D">6</span>, <span style="color:#00D">16</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> * **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;**&lt;/em&gt;/
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#088;font-weight:bold">void</span> allNeighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#0a8;font-weight:bold">int</span> done = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#0a8;font-weight:bold">int</span> tempX = sx;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span style="color:#0a8;font-weight:bold">int</span> tempY = sy;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#777">// Get all the elements in row</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt;= row; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span style="color:#080;font-weight:bold">if</span> (array[i][sy] == array[sx][sy]) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span style="color:#080;font-weight:bold">continue</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[i][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>}
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#777">// Get all the elements in col</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span style="color:#080;font-weight:bold">for</span> (j = <span style="color:#00D">0</span>; j &amp;lt;= col; j++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            <span style="color:#080;font-weight:bold">if</span> (array[sx][j] == array[sx][sy]) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                <span style="color:#080;font-weight:bold">continue</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx][j]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>}
<span class="line-numbers"><a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span><span style="color:#777">// Diagnols</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    tempX--; tempY--;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>            <span style="color:#080;font-weight:bold">if</span> (tempX &amp;gt;= startRow  &amp;amp;&amp;amp; tempY &amp;gt;= startCol) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[tempX][tempY]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>            } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                done = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>            }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span> 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>            sx++,sy++;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>            <span style="color:#080;font-weight:bold">if</span> (sx &amp;lt;= row &amp;amp;&amp;amp; sy &amp;lt;= col) {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[sx][sy]);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>            } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (done) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>            }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>} } </pre></div>
</div>
 </figure></notextile></div> &lt;hr style="border-top: 1.5px dotted black"/&gt; &lt;br&gt;&lt;br&gt;
</code></pre>

<h4 id="find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</h4>

<p>Given array as
<br /></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[\begin{array}{cc} 1 & 6 & 8\\ 4 & 7 & 9\\ 5 & 2 & 3
\end{array}\right]
 %]]&gt;</script>

<p>Find all the paths from 1 to 3.
The possible ascending path are</p>

<p><code class="numberCircle">1</code> -&gt;6-&gt;8-&gt;9-&gt; <code class="numberCircle">3</code><br /></p>

<p><code class="numberCircle">1</code> -&gt;4-&gt;7-&gt;9-&gt;<code class="numberCircle">3</code></p>

<p><br />
<code class="numberCircle">1</code> -&gt;6-&gt;7-&gt;2-&gt;<code class="numberCircle">3</code> is not the right solution as 7 &gt; 2</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Graph Traversal </span>  <a href='http://ideone.com/0oLlT1' target='_blank'>Run code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdlib.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span>&lt;h1 id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">define-xindex-3</span><span style="color:#710">&quot;</span></span>&gt;define xIndex <span style="color:#00D">3</span>&lt;/h1&gt;
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span style="color:#579">#define</span> yIndex <span style="color:#00D">3</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span style="color:#579">#define</span> TRUE <span style="color:#00D">1</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span style="color:#579">#define</span> FALSE <span style="color:#00D">0</span>&lt;/p&gt;
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> startIndX = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span style="color:#0a8;font-weight:bold">int</span> startIndY = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span style="color:#0a8;font-weight:bold">int</span> endIndX = <span style="color:#00D">2</span>;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span style="color:#0a8;font-weight:bold">int</span> endIndY = <span style="color:#00D">2</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>&lt;p&gt;<span style="color:#777">// Structure to construct final path</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span><span style="color:#080;font-weight:bold">typedef</span> <span style="color:#080;font-weight:bold">struct</span> node {
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>        <span style="color:#0a8;font-weight:bold">int</span> x;
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>        <span style="color:#0a8;font-weight:bold">int</span> y;
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span>        <span style="color:#0a8;font-weight:bold">int</span> parentVal;
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span>} parent;&lt;/p&gt;
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>&lt;p&gt;<span style="color:#080;font-weight:bold">typedef</span> <span style="color:#080;font-weight:bold">struct</span> queue {
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>    <span style="color:#0a8;font-weight:bold">int</span> x;
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>    <span style="color:#0a8;font-weight:bold">int</span> y;
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>    <span style="color:#080;font-weight:bold">struct</span> queue *next;
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>} qnode;&lt;/p&gt;
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>&lt;p&gt;qnode *head;
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>qnode *tail;&lt;/p&gt;
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>&lt;p&gt;<span style="color:#777">// Neighbour index coordinates</span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span><span style="color:#0a8;font-weight:bold">int</span> neighbourIndex[<span style="color:#00D">4</span>][<span style="color:#00D">2</span>];
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span><span style="color:#0a8;font-weight:bold">int</span> array[xIndex][yIndex];
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span><span style="color:#0a8;font-weight:bold">int</span> visited[xIndex][yIndex];
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span><span style="color:#0a8;font-weight:bold">int</span> row = xIndex - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span><span style="color:#0a8;font-weight:bold">int</span> col = yIndex - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span><span style="color:#0a8;font-weight:bold">int</span> startRow = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span><span style="color:#0a8;font-weight:bold">int</span> startCol = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>&lt;p&gt;parent* parentArr[xIndex][yIndex];&lt;/p&gt;
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>&lt;p&gt;<span style="color:#777">// Function declarations</span>
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span><span style="color:#088;font-weight:bold">void</span> neighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span><span style="color:#0a8;font-weight:bold">int</span> isVisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y);
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span><span style="color:#088;font-weight:bold">void</span> markVisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y);
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span><span style="color:#088;font-weight:bold">void</span> markUnvisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y);
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span><span style="color:#088;font-weight:bold">void</span> markParent(<span style="color:#0a8;font-weight:bold">int</span> childX, <span style="color:#0a8;font-weight:bold">int</span> childY, <span style="color:#0a8;font-weight:bold">int</span> parentX, <span style="color:#0a8;font-weight:bold">int</span> parentY);
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span><span style="color:#088;font-weight:bold">void</span> findPath(<span style="color:#0a8;font-weight:bold">int</span> startX, <span style="color:#0a8;font-weight:bold">int</span> startY, <span style="color:#0a8;font-weight:bold">int</span> endX, <span style="color:#0a8;font-weight:bold">int</span> endY);
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span><span style="color:#088;font-weight:bold">void</span> enqueue(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y);
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>qnode* dequeue();
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span><span style="color:#0a8;font-weight:bold">int</span> isQueueEmpty();
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span><span style="color:#088;font-weight:bold">void</span> printPath(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y);
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span style="color:#088;font-weight:bold">void</span> freeQueue();
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span style="color:#088;font-weight:bold">void</span> test1();&lt;/p&gt;
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> neighbour(<span style="color:#0a8;font-weight:bold">int</span> sx, <span style="color:#0a8;font-weight:bold">int</span> sy)
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>{
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>    <span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; <span style="color:#00D">4</span>; i++) {
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>    <span style="color:#080;font-weight:bold">for</span> (j = <span style="color:#00D">0</span>; j &amp;lt; <span style="color:#00D">2</span>; j++) {
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>        neighbourIndex[i][j] = -<span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>    }
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>}
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>i = <span style="color:#00D">0</span>; j = <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span style="color:#080;font-weight:bold">if</span> (sy - <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy - <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>    neighbourIndex[i][<span style="color:#00D">0</span>] = sx;
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>    neighbourIndex[i][<span style="color:#00D">1</span>] = sy - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>    i++;
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>}
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span><span style="color:#080;font-weight:bold">if</span> (sx - <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx - <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>    neighbourIndex[i][<span style="color:#00D">0</span>] = sx - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>    neighbourIndex[i][<span style="color:#00D">1</span>] = sy;
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>    i++;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>}
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span><span style="color:#080;font-weight:bold">if</span> (sy + <span style="color:#00D">1</span> &amp;gt;= startCol &amp;amp;&amp;amp; sy + <span style="color:#00D">1</span> &amp;lt;= col) {
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    neighbourIndex[i][<span style="color:#00D">0</span>] = sx;
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>    neighbourIndex[i][<span style="color:#00D">1</span>] = sy + <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>    i++;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>}
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span><span style="color:#080;font-weight:bold">if</span> (sx + <span style="color:#00D">1</span> &amp;gt;= startRow &amp;amp;&amp;amp; sx + <span style="color:#00D">1</span> &amp;lt;= row) {
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>    neighbourIndex[i][<span style="color:#00D">0</span>] = sx + <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>    neighbourIndex[i][<span style="color:#00D">1</span>] = sy;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>    i++;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>} }
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> isVisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y)
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>{
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>    <span style="color:#080;font-weight:bold">return</span> visited[x][y];
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>}&lt;/p&gt;
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> markVisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y)
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>{
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>    visited[x][y] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> markUnvisited(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y)
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>{
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>    visited[x][y] = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> markParent(<span style="color:#0a8;font-weight:bold">int</span> childX, <span style="color:#0a8;font-weight:bold">int</span> childY, <span style="color:#0a8;font-weight:bold">int</span> parentX, <span style="color:#0a8;font-weight:bold">int</span> parentY)
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>{
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>    parent* temp = (parent *)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(parent));&lt;/p&gt;
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (temp == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n114" name="n114">114</a></span>    <span style="color:#777">// Put ASSERT</span>
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>}
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>temp-&amp;gt;x = parentX;
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>temp-&amp;gt;y = parentY;
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>temp-&amp;gt;parentVal = array[parentX][parentY];
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>parentArr[childX][childY] = temp; }
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> enqueue(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y)
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>{
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>    qnode *temp = (qnode *)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>    <span style="color:#080;font-weight:bold">if</span> (temp == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>    <span style="color:#777">// Put ASSERT</span>
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>    }&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>&lt;pre&gt;&lt;code&gt;temp-&amp;gt;x = x;
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>temp-&amp;gt;y = y;
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>temp-&amp;gt;next = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>tail-&amp;gt;next = temp;
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>tail = temp; }
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>&lt;p&gt;qnode* dequeue()
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>{
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    qnode *temp;&lt;/p&gt;
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">if</span> (!isQueueEmpty()) {
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    temp = head-&amp;gt;next;
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    <span style="color:#080;font-weight:bold">if</span> (temp == tail) {
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>        tail = head;
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>    }
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>    head-&amp;gt;next = temp-&amp;gt;next;
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>    <span style="color:#080;font-weight:bold">return</span> temp;
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>}
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>
<span class="line-numbers"><a href="#n154" name="n154">154</a></span><span style="color:#080;font-weight:bold">return</span> head-&amp;gt;next; }
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> isQueueEmpty()
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>{
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>    <span style="color:#080;font-weight:bold">if</span> (head-&amp;gt;next == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>        <span style="color:#080;font-weight:bold">return</span> TRUE;
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">return</span> FALSE; }
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> freeQueue()
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>{
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>    qnode* temp;&lt;/p&gt;
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (head-&amp;gt;next != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    temp = head-&amp;gt;next;
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>    head-&amp;gt;next = head-&amp;gt;next-&amp;gt;next;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>    free (temp);
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>}
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>&lt;p&gt;}&lt;/p&gt;
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> printPath(<span style="color:#0a8;font-weight:bold">int</span> x, <span style="color:#0a8;font-weight:bold">int</span> y)
<span class="line-numbers"><a href="#n181" name="n181">181</a></span>{
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>    parent *pInfo;&lt;/p&gt;
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>&lt;pre&gt;&lt;code&gt;printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Path:</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n185" name="n185">185</a></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>    printf (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>
<span class="line-numbers"><a href="#n188" name="n188">188</a></span>    pInfo = parentArr[x][y];
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>    x = pInfo-&amp;gt;x;
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>    y = pInfo-&amp;gt;y;
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>    <span style="color:#080;font-weight:bold">if</span> (x == startIndX &amp;amp;&amp;amp; y == startIndY) {
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>        printf (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d </span><span style="color:#710">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>        <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n195" name="n195">195</a></span>    }
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>} }
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>
<span class="line-numbers"><a href="#n199" name="n199">199</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> findPath(<span style="color:#0a8;font-weight:bold">int</span> startX, <span style="color:#0a8;font-weight:bold">int</span> startY, <span style="color:#0a8;font-weight:bold">int</span> endX, <span style="color:#0a8;font-weight:bold">int</span> endY)
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>{
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>    <span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>    <span style="color:#0a8;font-weight:bold">int</span> x = startX;
<span class="line-numbers"><a href="#n204" name="n204">204</a></span>    <span style="color:#0a8;font-weight:bold">int</span> y = startY;
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>    <span style="color:#0a8;font-weight:bold">int</span> neighbourX = startX;
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>    <span style="color:#0a8;font-weight:bold">int</span> neighbourY = startY;
<span class="line-numbers"><a href="#n207" name="n207">207</a></span>    <span style="color:#0a8;font-weight:bold">int</span> reached = FALSE;
<span class="line-numbers"><a href="#n208" name="n208">208</a></span>    qnode *nextNode;&lt;/p&gt;
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>&lt;pre&gt;&lt;code&gt;<span style="color:#080;font-weight:bold">while</span> (<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>    neighbour(x, y);
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>    <span style="color:#777">// Check, are we neighbour of destination?</span>
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>    <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt; <span style="color:#00D">4</span>; i++) {
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>        <span style="color:#080;font-weight:bold">if</span> (neighbourIndex[i][<span style="color:#00D">0</span>] == endX &amp;amp;&amp;amp; neighbourIndex[i][<span style="color:#00D">1</span>] == endY) {
<span class="line-numbers"><a href="#n216" name="n216">216</a></span>            <span style="color:#777">// Reached destination</span>
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>            neighbourX = neighbourIndex[i][<span style="color:#00D">0</span>];
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>            neighbourY = neighbourIndex[i][<span style="color:#00D">1</span>];
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>            markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span>
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>            reached = TRUE;
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>            <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>        } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n224" name="n224">224</a></span>            <span style="color:#777">// Validate neighbour</span>
<span class="line-numbers"><a href="#n225" name="n225">225</a></span>            <span style="color:#080;font-weight:bold">if</span> (neighbourIndex[i][<span style="color:#00D">0</span>] != -<span style="color:#00D">1</span>) {
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>                neighbourX = neighbourIndex[i][<span style="color:#00D">0</span>];
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>                neighbourY = neighbourIndex[i][<span style="color:#00D">1</span>];
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>                <span style="color:#080;font-weight:bold">if</span> (array[x][y] &amp;lt; array[neighbourX][neighbourY]) {
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>                    <span style="color:#777">// Mark neighbour index as visited</span>
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span>                    markVisited(x, y);
<span class="line-numbers"><a href="#n231" name="n231">231</a></span>                    markVisited(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>                    <span style="color:#777">// Make me parent of neighbour index</span>
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>                    markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><a href="#n235" name="n235">235</a></span>
<span class="line-numbers"><a href="#n236" name="n236">236</a></span>                    <span style="color:#777">// Add neighbour to queue</span>
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>                    enqueue(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>                }
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>            }
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>        }
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>    } <span style="color:#777">// end of for</span>
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>    <span style="color:#080;font-weight:bold">if</span> (reached) {
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>        <span style="color:#777">// print path</span>
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>        printPath(endIndX, endIndY);
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>        <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>    }
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>    <span style="color:#080;font-weight:bold">if</span> (isQueueEmpty()) {
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>        <span style="color:#777">// If queue is empty then halt, no path found</span>
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>        printf (<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">No valid path exist</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>        <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>    }
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>
<span class="line-numbers"><a href="#n255" name="n255">255</a></span>    <span style="color:#777">// Get next item from queue</span>
<span class="line-numbers"><a href="#n256" name="n256">256</a></span>    nextNode = dequeue();
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>    <span style="color:#080;font-weight:bold">if</span> (nextNode != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>        x = nextNode-&amp;gt;x;
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>        y = nextNode-&amp;gt;y;
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span>
<span class="line-numbers"><a href="#n261" name="n261">261</a></span>        free (nextNode);
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>    }
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>} <span style="color:#777">// end of while }</span>
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>&lt;p&gt;<span style="color:#088;font-weight:bold">void</span> test1()
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>{
<span class="line-numbers"><a href="#n268" name="n268">268</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>    <span style="color:#0a8;font-weight:bold">int</span> j = <span style="color:#00D">0</span>;&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span>
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>&lt;pre&gt;&lt;code&gt;array[<span style="color:#00D">0</span>][<span style="color:#00D">0</span>] = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>array[<span style="color:#00D">0</span>][<span style="color:#00D">1</span>] = <span style="color:#00D">6</span>;
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>array[<span style="color:#00D">0</span>][<span style="color:#00D">2</span>] = <span style="color:#00D">8</span>;
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>array[<span style="color:#00D">1</span>][<span style="color:#00D">0</span>] = <span style="color:#00D">4</span>;
<span class="line-numbers"><a href="#n275" name="n275">275</a></span>array[<span style="color:#00D">1</span>][<span style="color:#00D">1</span>] = <span style="color:#00D">7</span>;
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>array[<span style="color:#00D">1</span>][<span style="color:#00D">2</span>] = <span style="color:#00D">9</span>;
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>array[<span style="color:#00D">2</span>][<span style="color:#00D">0</span>] = <span style="color:#00D">5</span>;
<span class="line-numbers"><a href="#n278" name="n278">278</a></span>array[<span style="color:#00D">2</span>][<span style="color:#00D">1</span>] = <span style="color:#00D">2</span>;
<span class="line-numbers"><a href="#n279" name="n279">279</a></span>array[<span style="color:#00D">2</span>][<span style="color:#00D">2</span>] = <span style="color:#00D">3</span>;
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n282" name="n282">282</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &amp;lt;= row; i++) {
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>    <span style="color:#080;font-weight:bold">for</span> (j = <span style="color:#00D">0</span>; j &amp;lt;= col; j++) {
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%d   </span><span style="color:#710">&quot;</span></span>, array[i][j]);
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>    }
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>}
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>findPath(startIndX, startIndY, endIndX, endIndY);
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>freeQueue(); }
<span class="line-numbers"><a href="#n291" name="n291">291</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n292" name="n292">292</a></span>
<span class="line-numbers"><a href="#n293" name="n293">293</a></span>&lt;p&gt;<span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"><a href="#n294" name="n294">294</a></span>{
<span class="line-numbers"><a href="#n295" name="n295">295</a></span>    head = (qnode*)malloc(<span style="color:#080;font-weight:bold">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n296" name="n296">296</a></span>    head-&amp;gt;x = -<span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n297" name="n297">297</a></span>    head-&amp;gt;y = -<span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n298" name="n298">298</a></span>    head-&amp;gt;next = <span style="color:#069">NULL</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n299" name="n299">299</a></span>
<span class="line-numbers"><strong><a href="#n300" name="n300">300</a></strong></span>&lt;pre&gt;&lt;code&gt;tail = head;
<span class="line-numbers"><a href="#n301" name="n301">301</a></span>
<span class="line-numbers"><a href="#n302" name="n302">302</a></span>test1();
<span class="line-numbers"><a href="#n303" name="n303">303</a></span>
<span class="line-numbers"><a href="#n304" name="n304">304</a></span><span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://distkeys.com/blog/2013/10/12/sorting/"/>
    <updated>2013-10-12T13:08:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/12/sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dictionary-of-algorithms">Dictionary of algorithms</a></li>
  <li><a href="#sorting-visualization">Sorting Visualization</a></li>
  <li><a href="#sorting-wiki-summary">Sorting Wiki Summary</a></li>
  <li><a href="#sorting-algorithms">Sorting algorithms</a></li>
  <li><a href="#comparisons-based-sorting">Comparisons based sorting</a></li>
  <li><a href="#online-sorts">Online sorts</a></li>
  <li><a href="#stable-sorts">Stable sorts</a></li>
  <li><a href="#time-complexity-chart">Time complexity chart</a></li>
</ul>

<p>This article talks about Sorting, Sorting techniques/algorithms in computer science</p>

<p>Let’s start with Wikipedia entry about sorting</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Sorting_stability_playing_cards.svg/220px-Sorting_stability_playing_cards.svg.png"/>
  
  <h2>sorting algorithm</h2>
  <div>
    <p>A <strong>sorting algorithm</strong> is an <a href="http://en.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> that puts elements of a <a href="http://en.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">list</a> in a certain <a href="http://en.wikipedia.org/wiki/Total_order" title="Total order">order</a>. The most-used orders are numerical order and <a href="http://en.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical order</a>. Efficient <a href="http://en.wikipedia.org/wiki/Sorting" title="Sorting">sorting</a> is important for optimizing the use of other algorithms (such as <a href="http://en.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">search</a> and <a href="http://en.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge</a> algorithms) which require input data to be in sorted lists; it is also often useful for <a href="http://en.wikipedia.org/wiki/Canonicalization" title="Canonicalization">canonicalizing</a> data and for producing human-readable output. More formally, the output must satisfy two conditions:
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Sorting_algorithm">Read more</a>
</div>

<!-- more -->
<br /></p>

<h3 id="dictionary-of-algorithms">Dictionary of algorithms</h3>

<p><a href="http://xlinux.nist.gov/dads//" target="_blank">Dictionary of algorithms</a></p>

<p><br /></p>

<h3 id="sorting-visualization">Sorting Visualization</h3>

<p><a href="http://corte.si/posts/code/visualisingsorting/index.html" target="_blank">Sorting Visualization</a></p>

<p><br /></p>

<h3 id="sorting-wiki-summary">Sorting Wiki Summary</h3>

<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank">Sorting Wiki Summary</a></p>

<p><br /></p>

<p>Sorting algorithms can be divided into categories</p>

<h3 id="sorting-algorithms">Sorting algorithms</h3>
<ol>
  <li><strong><em>Comparisons based sorts</em></strong> - 24 algorithms in this category</li>
  <li><strong><em>Online sorts</em></strong>            - 5 algorithms in this category</li>
  <li><strong><em>Stable sorts</em></strong>            - 14 algorithms in this category</li>
</ol>

<p>Donald Knuth pioneer in algorithms and field of Computer Science have divided sorting into</p>

<ol>
  <li><strong><em>Internal sorting</em></strong> - by insertion, by exchange, by selection, by merging, by distribution<br /></li>
  <li><strong><em>Optimum sorting</em></strong>  - min-comparison sorting, min-comparison merging, min-comparison selection<br /></li>
  <li><strong><em>External sorting</em></strong> <br /></li>
</ol>

<h3 id="comparisons-based-sorting">Comparisons based sorting</h3>
<p>It is particular type of sorting algorithm which read the list elements through comparison operator that determines which of two elements should occur first int he final sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a>                       - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a>         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a> - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="online-sorts">Online sorts</h3>

<p>These sorts can start sorting their input without having received all of it. It can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="stable-sorts">Stable sorts</h3>

<p>A sorting algorithm is stable if whenever there are two records R and S with the <code>same key</code> and with R appearing before S in the original list, <code>R will appear before S</code> in the sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></li>
</ul>

<h3 id="time-complexity-chart">Time complexity chart</h3>

<table>
<thead>
<tr>
    <th><code class="mygreen">Good</code></th><th><code class="myyellow">Fair</code></th><th><code class="myred">Poor</code></th>
</tr>
</thead>
</table>

<p><br /></p>

<p><sup>*</sup>(V/D) - Variant or derived from</p>

<p><br /></p>
<table>
<thead>
<tr>
    <th>Algorithm</th><th colspan="3">Time complexity</th><th>Space complexity</th><th>Notes</th>
</tr>
<tr>
    <th /><th>Best</th><th>Average</th><th>Worst</th><th /><th />
</tr>
</thead>
<tbody>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></code></td>
    <td><code class="myyellow">Ω(n)</code></td>
    <td>O(n × n!)</td>
    <td><code class="myred">Unbounded</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></code></td>
    <td>O(n)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><msup><mi>2</mi><mn>p</mn></msup></mrow></mfrac></math>)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></code></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td><code class="mygreen">Write efficient</code></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>Bubble + Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></code></td>
    <td>Ω(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="mygreen">O(1)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td />
    <td>Quick sort + Heap sort<br /><a href="https://www.dropbox.com/s/21q1ymf2y86kqcz/introsort.pdf" target="_blank"> IntroSort Paper</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(n)</code></td>
    <td>(V/D) - Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></code></td>
    <td>O(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="myred">O(n)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></code></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>*(V/D) - Bubble sort</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></code></td>
    <td />
    <td />
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td><a href="http://wordaligned.org/articles/patience-sort" target="_blank">Longest common sequence</a></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></code></td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>O(n)</td>
    <td>Faster on partial sorted list</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>*(V/D) - Heap sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></code></td>
    <td />
    <td />
    <td />
    <td>O(n)</td>
    <td>Slower than bubble sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>Merge + Insertion sort</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Online sorting</th>
    <th />
    <th />
    <th />
    <th />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Stable sorting</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></td>
    <td />
    <td>O(n + k)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n.k)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></td>
    <td />
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></td>
    <td />
    <td />
    <td>O(N + n)</td>
    <td>O(N + n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></td>
    <td />
    <td />
    <td>O(kN)</td>
    <td>O(k + N)</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Non-category Sorts</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_sort" target="_blank">Adaptive sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/American_flag_sort" target="_blank">American flag sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bead_sort" target="_blank">Bead sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Burstsort" target="_blank">Burstsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian tree</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Comparison_sort" target="_blank">Comparison sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank">Dutch national flag problem</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Elevator_algorithm" target="_blank">Elevator algorithm</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/External_sorting" target="_blank">External sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Flashsort" target="_blank">Flashsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Integer_sorting" target="_blank">Integer sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Internal_sort" target="_blank">Internal sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/J_sort" target="_blank">J sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Median_cut" target="_blank">Median cut</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Ordicate" target="_blank">Ordicate</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pairwise_sorting_network" target="_blank">Pairwise sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pancake_sorting" target="_blank">Pancake sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Partial_sorting" target="_blank">Partial sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Quantum_sort" target="_blank">Quantum sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Samplesort" target="_blank">Samplesort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Sorting_network" target="_blank">Sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spaghetti_sort" target="_blank">Spaghetti sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spreadsort" target="_blank">Spreadsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tournament_sort" target="_blank">Tournament sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tree_sort" target="_blank">Tree sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/UnShuffle_sort" target="_blank">UnShuffle sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
</feed>
