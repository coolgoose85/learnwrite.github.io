<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design pattern | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2015-01-02T21:39:51-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singleton - Design Pattern]]></title>
    <link href="http://distkeys.com/blog/2014/03/25/singleton/"/>
    <updated>2014-03-25T22:49:00-07:00</updated>
    <id>http://distkeys.com/blog/2014/03/25/singleton</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#problem-statement">Problem Statement</a></li>
  <li><a href="#solution">Solution</a>    <ul>
      <li><a href="#first-approach">First approach</a></li>
      <li><a href="#second-approach">Second approach</a></li>
      <li><a href="#singleton">Singleton</a></li>
    </ul>
  </li>
</ul>

<h3 id="problem-statement">Problem Statement</h3>

<p>We create a class, and we know the classes can be instantiated once or twice or a thousand times, but what if you only want <strong>one object</strong> of that class.</p>

<h3 id="solution">Solution</h3>

<p>Before we dive into solution lets understand what actually is design pattern.</p>

<p>Design Patterns are well-tested solutions to common problems and issues we run into in software development. Think of them as best practices, suggestions for how you might arrange your own classes and objects to accomplish a result.
<!-- more --></p>

<h4 id="first-approach">First approach</h4>

<p>To achieve <strong>one object</strong> solution might be an <em>Abstract Class</em>, but remember an Abstract Class isn’t allowed to be instantiated at all.
<br /></p>

<h4 id="second-approach">Second approach</h4>

<p>Second approach might be why don’t we just not create more than one object? <br />
You could do that but it’s not really enforcing anything, you can’t guarantee that behavior.
<br /></p>

<h4 id="singleton">Singleton</h4>

<p>In <strong>Singleton Design Pattern</strong>, we don’t want to have to write code to instantiate the Singleton, we want to assume that it always exists, there is always one of them, and we just want to be able to ask for it from any other point of the program and get it.<br /></p>

<p><blockquote><p>With the Singleton Design Pattern we ensure that a class only has one instance, and we provide just one way to get to it.</p></blockquote></p>

<p><strong>Step 1</strong><br />
Mark constructor as <em>Private</em></p>

<p>What this means is nobody can actually instantiate the class from outside, nobody can just say they want to create a new object. This doesn’t really solve our problem that we need there to be one of them. We just can’t create it from the outside. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Singleton </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span style="color:#088;font-weight:bold">public</span> <span style="color:#339;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">MySingleton</span> {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span style="color:#777">// private constructor - no object can instantiate</span>
    <span style="color:#088;font-weight:bold">private</span> MySingleton() { }
    
    ...
    ... } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Step 2</strong><br />
Create a static variable in this class that holds a placeholder to a singleton object</p>

<p>This just means a variable that can hold a singleton object, and there is nothing in it right now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Singleton </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span style="color:#088;font-weight:bold">public</span> <span style="color:#339;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">MySingleton</span> {
        <span style="color:#777">// placeholder for singleton object</span>
        <span style="color:#088;font-weight:bold">private</span> <span style="color:#088;font-weight:bold">static</span> MySingleton _singleObj = <span style="color:#069">null</span>;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span style="color:#777">// private constructor - no object can instantiate</span>
    <span style="color:#088;font-weight:bold">private</span> MySingleton() { }
    
    ... } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><strong>Step 3</strong><br />
Create a static method say <em>getInstance()</em>. </p>

<p>Static methods can only access static data members. In this case, we don’t have to have an instance of this class yet. The first thing it asks is do I exist? Is there anything in that _singleObj variable, if it’s null then instantiate a new MySingleton object.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Singleton </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span style="color:#088;font-weight:bold">public</span> <span style="color:#339;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">MySingleton</span> {
        <span style="color:#777">// placeholder for singleton object</span>
        <span style="color:#088;font-weight:bold">private</span> <span style="color:#088;font-weight:bold">static</span> MySingleton _singleObj = <span style="color:#069">null</span>;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    <span style="color:#777">// private constructor - no object can instantiate</span>
    <span style="color:#088;font-weight:bold">private</span> MySingleton() { }
    
    <span style="color:#088;font-weight:bold">public</span> <span style="color:#088;font-weight:bold">static</span> MySingleton getInstance() {
        <span style="color:#777">// Do I exists ?</span>
        <span style="color:#080;font-weight:bold">if</span> (_singleObj == <span style="color:#069">null</span>) {
                <span style="color:#777">// Instantiate object</span>
                _singleObj = <span style="color:#080;font-weight:bold">new</span> MySingleton();
        }
        <span style="color:#080;font-weight:bold">return</span> _singleObj;            
    }
    
    <span style="color:#777">// Other member functions</span>
    ... } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>We’re allowed to do instantiate the object  in <em>getInstance()</em>  from inside this class, because we marked that constructor as <em>private</em>, which means this class is allowed to call it but nobody else is.</p>

<p><blockquote><p>We are actually using a technique here called Lazy Instantiation, which means that until someone asks for this object it doesn’t exist. But when they ask for it, we’ll look for it. If it doesn’t exist, we create it, we store a reference to it so that when the next person asks it’s already there.</p></blockquote></p>

<p>Finally to invoke Singleton</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Singleton </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
MySingleton single = MySingleton.getInstance();&lt;/p&gt;

&lt;p&gt;single.otherMemberFunctions();
</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /><br /></p>
]]></content>
  </entry>
  
</feed>
