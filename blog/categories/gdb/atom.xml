<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gdb | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/gdb/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-10-09T16:23:01-07:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[
<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br /></p>

<h3>Code snippet</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdlib.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;string.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **container = (<span style="color:#0a8;font-weight:bold">char</span> **)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>*));
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **start = container;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">char</span> *node;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#0a8;font-weight:bold">char</span> name[] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span> (container == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt;= <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        *container = node;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        container++;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    *container = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span style="color:#080;font-weight:bold">while</span> (*start != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%s</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, *start);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        start++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>}
</pre></div>
</div>
</div>
<p><br />
Focusing on following code section</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    *container = node;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    container++;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p><br />In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<p><blockquote><p>Compile code using<br/>gcc -g fileName.c</p></blockquote></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>(gdb) l
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">16</span>      }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">17</span>        
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">18</span>            <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#00D">19</span>                node = (char *)malloc(<span style="color:#00D">10</span> * sizeof(char));
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#00D">20</span>                memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#00D">21</span>                *container = node;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#00D">22</span>                container++;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#00D">23</span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#00D">24</span>            *container = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#00D">25</span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>(gdb) ptype node
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>type = char *
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>(gdb) p node
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#d70">$1</span> = <span style="color:#00D">0x1001000e0</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>(gdb) x/<span style="color:#00D">8</span>bb node
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">0x56</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x69</span>        <span style="color:#00D">0x62</span>        <span style="color:#00D">0x68</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x76</span>        <span style="color:#00D">0x00</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>(gdb) x/<span style="color:#00D">8</span>ub node
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">86</span>        <span style="color:#00D">97</span>        <span style="color:#00D">105</span>        <span style="color:#00D">98</span>        <span style="color:#00D">104</span>        <span style="color:#00D">97</span>        <span style="color:#00D">118</span>        <span style="color:#00D">0</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>(gdb) x/<span style="color:#00D">8</span>tb node
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">01010110</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01101001</span>        <span style="color:#00D">01100010</span>        <span style="color:#00D">01101000</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01110110</span>        <span style="color:#00D">00000000</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
