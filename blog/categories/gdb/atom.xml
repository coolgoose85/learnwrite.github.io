<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gdb | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/gdb/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-10-06T23:49:06-07:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br />
Here is a code snippet
<div><script src='https://gist.github.com/6558935.js'></script>
<noscript><pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main()
{
    char **container = (char **)malloc(10 * sizeof(char*));
    char **start = container;
    char *node;

    char name[] = &quot;Vaibhav&quot;;
    int i = 0;

    if (container == NULL) {
        return 0;
    }   

    for (i = 0; i &lt;= 2; i++) {
        node = (char *)malloc(10 * sizeof(char));
        memcpy(node, &amp;name, strlen(name) + 1); 
        *container = node;
        container++;
    }   
    *container = NULL;

    while (*start != NULL) {
        printf(&quot;%s\n&quot;, *start);
        start++;

    }   

    return 0;
}</code></pre></noscript></div>

<br />
Focusing on following code section
<div><script src='https://gist.github.com/5718a56f996b77db1d77.js'></script>
<noscript><pre><code>for (i = 0; i &lt;= 2; i++) {
        node = (char *)malloc(10 * sizeof(char));
        memcpy(node, &amp;name, strlen(name) + 1); 
        *container = node;
        container++;
}  </code></pre></noscript></div>
</p>

<p>In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<p><blockquote><p>Compile code using<br/>gcc -g fileName.c</p></blockquote></p>

<p><div><script src='https://gist.github.com/6559029.js'></script>
<noscript><pre><code>(gdb) l
16      }
17	
18	    for (i = 0; i &lt;= 2; i++) {
19	        node = (char *)malloc(10 * sizeof(char));
20	        memcpy(node, &amp;name, strlen(name) + 1);
21	        *container = node;
22	        container++;
23	    }
24	    *container = NULL;
25	
(gdb) ptype node
type = char *
(gdb) p node
$1 = 0x1001000e0 &quot;Vaibhav&quot;
(gdb) x/8bb node
0x1001000e0:	0x56	0x61	0x69	0x62	0x68	0x61	0x76	0x00
(gdb) x/8ub node
0x1001000e0:	86	97	105	98	104	97	118	0
(gdb) x/8tb node
0x1001000e0:	01010110	01100001	01101001	01100010	01101000	01100001	01110110	00000000</code></pre></noscript></div>
</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#088;font-weight:bold">void</span>)
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>{
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">hello world</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
