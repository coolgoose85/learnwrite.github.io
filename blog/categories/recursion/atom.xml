<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: recursion | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/recursion/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-12-31T00:56:58-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming]]></title>
    <link href="http://distkeys.com/blog/2014/11/27/dynamic-programming/"/>
    <updated>2014-11-27T18:32:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/11/27/dynamic-programming</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</a>    <ul>
      <li><a href="#combinational-search-and-optimization-i">Combinational Search and Optimization I</a></li>
      <li><a href="#combinational-search-and-optimization-ii">Combinational Search and Optimization II</a></li>
      <li><a href="#dynamic-programming">Dynamic Programming</a></li>
    </ul>
  </li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#coin-changing-problem---total-ways">Coin changing problem - Total ways</a></li>
      <li><a href="#coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</a></li>
    </ul>
  </li>
  <li><a href="#include-stdioh">include <stdio.h /></a></li>
</ul>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/0/03/Shortest_path_optimal_substructure.svg/200px-Shortest_path_optimal_substructure.svg.png"/>
  
  <h2>dynamic programming</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Mathematics" title="Mathematics">mathematics</a>, <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <a href="http://en.wikipedia.org/wiki/Economics" title="Economics">economics</a>, and <a href="http://en.wikipedia.org/wiki/Bioinformatics" title="Bioinformatics">bioinformatics</a>, <strong>dynamic programming</strong> is a method for solving complex problems by breaking them down into simpler subproblems. It is applicable to problems exhibiting the properties of <a href="http://en.wikipedia.org/wiki/Overlapping_subproblem" title="Overlapping subproblem" class="mw-redirect">overlapping subproblems</a>  and <a href="http://en.wikipedia.org/wiki/Optimal_substructure" title="Optimal substructure">optimal substructure</a> (described below).  When applicable, the method takes far less time than naive methods that don't take advantage of the subproblem overlap (like <a href="http://en.wikipedia.org/wiki/Depth-first_search" title="Depth-first search">depth-first search</a>).
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Dynamic_programming">Read more</a>
</div>
</p>

<!-- more -->

<p><br /></p>

<h2 id="combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</h2>

<p>Recently, I came across these three videos about the <em>Combinational Search and Dynamic Programming</em> and I think these videos explains the complexity in great simplicity. I highly recommend for one who is beginner and want to learn the fundamentals.</p>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-i">Combinational Search and Optimization I</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/nSPBb71RS4c?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-ii">Combinational Search and Optimization II</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/PPFl2I6YVUo?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="dynamic-programming">Dynamic Programming</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/6h6Fi6AQiRM?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h2 id="problems">Problems</h2>

<h3 id="coin-changing-problem---total-ways">Coin changing problem - Total ways</h3>

<p>Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins doesn’t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.</p>

<p><br />
The first step is to come up with the simple recursive solution which solves this problem. Once that done we can map that problem to the dynamic problem(DP) solution.</p>

<blockquote>
  <p>For DP solution there are two ways top-down (with recursive called memoization technique) or bottom up (with iteration). </p>
</blockquote>

<p>This <a href="http://qr.ae/lAQbS" title="Dynamic programming approaches">article</a> explains about above quote in detail.</p>

<p>The recursive solution of this problem would look like this. If one have watched above videos, you would understand the logic or it is explained <a href="http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/" title="recursive code">here</a>. Till now, it is all same like any other source or web pages across internet for solution of this problem. But, soon it’s going to differ. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// Returns the count of ways we can sum  S[0…m-1] coins to get sum n</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="predefined-type">int</span> count( <span class="predefined-type">int</span> S[], <span class="predefined-type">int</span> m, <span class="predefined-type">int</span> n )
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>{
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="comment">// If n is 0 then there is 1 solution (do not include any coin)</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> (n == <span class="integer">0</span>)
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">return</span> <span class="integer">1</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// If n is less than 0 then no solution exists</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">if</span> (n &amp;lt; <span class="integer">0</span>)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="comment">// If there are no coins and n is greater than 0, then no solution exist</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="keyword">if</span> (m &amp;lt;=<span class="integer">0</span> &amp;amp;&amp;amp; n &amp;gt;= <span class="integer">1</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="comment">// count is sum of solutions (i) including S[m-1] (ii) excluding S[m-1]</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="keyword">return</span> count( S, m - <span class="integer">1</span>, n ) + count( S, m, n-S[m-<span class="integer">1</span>] ); } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<p><a href="http://amzn.com/098478280X%20" title="cracking the coding interview">Cracking the coding interview</a> book also have same problem with below recursive solution. In this code S = {25, 10, 5, 1}</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">int</span> getchange(<span class="predefined-type">int</span> n, <span class="predefined-type">int</span> denom)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="predefined-type">int</span> next_denom = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">switch</span>(denom) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="keyword">case</span> <span class="integer">25</span>:
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    next_denom = <span class="integer">10</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">case</span> <span class="integer">10</span>:
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    next_denom = <span class="integer">5</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="keyword">case</span> <span class="integer">5</span>:
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    next_denom = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="keyword">case</span> <span class="integer">1</span>:
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> ways = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i*denom &amp;lt;= n; i++) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>ways += getchange(n - i*denom, next_denom);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="keyword">return</span> ways; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<p>As explained in <a href="http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming" title="DP video">dynamic programming video</a> above, lets convert this program into dynamic programming program. This is a top down approach.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Coin change recursion</span>  <a href='http://ideone.com/XN6v0F' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>&lt;p&gt;define N <span class="integer">50</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>define CHANGESIZE <span class="integer">4</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span class="predefined-type">int</span> changeSize;&lt;/p&gt;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>&lt;p&gt;<span class="comment">// Sum upto 50</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="predefined-type">int</span> table[N + <span class="integer">1</span>][CHANGESIZE + <span class="integer">1</span>];&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>&lt;p&gt;<span class="comment">// Converted top down DP version of count()</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="predefined-type">int</span> countDP(<span class="predefined-type">int</span> S[], <span class="predefined-type">int</span> m, <span class="predefined-type">int</span> n)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>{
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">if</span> (n == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    table[n][m] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="keyword">return</span> table[n][m];
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="keyword">if</span> (n &amp;lt; <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (m &amp;lt;=<span class="integer">0</span> &amp;amp;&amp;amp; n &amp;gt;= <span class="integer">1</span>)
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="keyword">if</span> (n-S[m-<span class="integer">1</span>] &amp;lt; <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="keyword">if</span> (table[n][m-<span class="integer">1</span>] == <span class="integer">0</span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>table[n][m-<span class="integer">1</span>] = countDP(S, m-<span class="integer">1</span>, n);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>}
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span class="keyword">if</span> (table[n-S[m-<span class="integer">1</span>]][m] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>table[n-S[m-<span class="integer">1</span>]][m] = countDP(S, m, n-S[m-<span class="integer">1</span>]);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>}
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span class="keyword">return</span> (table[n][m-<span class="integer">1</span>] + table[n-S[m-<span class="integer">1</span>]][m]); }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>&lt;p&gt;<span class="directive">void</span> inittable()
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>{
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &amp;lt; N + <span class="integer">1</span> ; i++) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>    <span class="keyword">for</span> (<span class="predefined-type">int</span> j = <span class="integer">0</span>; j &amp;lt; changeSize + <span class="integer">1</span>; j++) {
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        table[i][j] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span>; }
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>{
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>    <span class="predefined-type">int</span> ways = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>    <span class="predefined-type">int</span> change&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">DP video</span><span class="delimiter">&quot;</span></span>&gt;<span class="integer">4</span>&lt;/a&gt; = {<span class="integer">25</span>, <span class="integer">10</span>, <span class="integer">5</span>, <span class="integer">1</span>};
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>    changeSize = <span class="keyword">sizeof</span>(change)/<span class="keyword">sizeof</span>(change[<span class="integer">0</span>]);&lt;/p&gt;
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span> (<span class="predefined-type">int</span> sum = <span class="integer">1</span>; sum &amp;lt; <span class="integer">50</span>; sum++) {
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sum %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, sum);        
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>ways = countDP(change, changeSize, sum);
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">CountDP = %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, ways);
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">============</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>inittable();
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>}
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>
<span class="line-numbers"><a href="#n66" name="n66">66</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>
<span class="line-numbers"><a href="#n69" name="n69">69</a></span>&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

<h3 id="coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</h3>

<p>Given a list of N coins, their values (V1, V2, … , VN),
and the total sum S. Find the minimum number of coins the sum of which is
S (we can use as many coins of one type as we want), or report that it’s
not possible to select coins in such a way that they sum up to S.</p>

<p>This problem has been published at various sites including following with explanation in great detail</p>

<ul>
  <li><a href="http://www.topcoder.com/tc?d1=tutorials&amp;d2=dynProg&amp;module=Static" title="topcoder coin changing problem">Topcoder coin changing problem</a></li>
  <li><a href="http://www.bogotobogo.com/Algorithms/dynamic_programming.php" title="DP">Dynamic programming</a></li>
</ul>

<p>Topcode article explains the bottom up part very well. The idea here is to determine how many minimum coins are required for sum 1 then for sum 2 then for sum 3 and so on. </p>

<p><em>TopCoder article says</em></p>

<p>For a better understanding let’s take this example:<br />
Given coins with values 1, 3, and 5.<br />
And the sum S is set to be 11.<br /></p>

<p>First of all we mark that for state 0 (sum 0) we have found a solution with a minimum number of 0 coins. We then go to sum 1. First, we mark that we haven’t yet found a solution for this one (a value of Infinity would be fine). Then we see that only coin 1 is less than or equal to the current sum. Analyzing it, we see that for sum 1-V1= 0 we have a solution with 0 coins. Because we add one coin to this solution, we’ll have a solution with 1 coin for sum 1. It’s the only solution yet found for this sum. We write (save) it.</p>

<p>Then we proceed to the next state - sum 2. We again see that the only coin which is less or equal to this sum is the first coin, having a value of 1. The optimal solution found for sum (2-1) = 1 is coin 1. This coin 1 plus the first coin will sum up to 2, and thus make a sum of 2 with the help of only 2 coins. This is the best and only solution for sum 2.</p>

<p>Now we proceed to sum 3. We now have 2 coins which are to be analyzed - first and second one, having values of 1 and 3. Let’s see the first one. There exists a solution for sum 2 (3 - 1) and therefore we can construct from it a solution for sum 3 by adding the first coin to it. Because the best solution for sum 2 that we found has 2 coins, the new solution for sum 3 will have 3 coins. Now let’s take the second coin with value equal to 3. The sum for which this coin needs to be added to make 3 , is 0. We know that sum 0 is made up of 0 coins. Thus we can make a sum of 3 with only one coin - 3. We see that it’s better than the previous found solution for sum 3 , which was composed of 3 coins. We update it and mark it as having only 1 coin. The same we do for sum 4, and get a solution of 2 coins - 1+3. And so on.</p>

<p>I followed this explanation and tried to come up with the program which is as follows</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Min coin change</span>  <a href='http://ideone.com/IXJL0d' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">//  Given a list of N coins, their values (V1, V2, … , VN),</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">//  and the total sum S. Find the minimum number of coins the sum of which is</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">//  S (we can use as many coins of one type as we want), or report that it’s</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">//  not possible to select coins in such a way that they sum up to S.&lt;/p&gt;</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">include-stdioh</span><span class="delimiter">&quot;</span></span>&gt;include &lt;stdio.h /&gt;&lt;/h1&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;p&gt;<span class="predefined-type">int</span> mincount(<span class="predefined-type">int</span> change[], <span class="predefined-type">int</span> changeSize, <span class="predefined-type">int</span> SUM)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>{
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> table[SUM + <span class="integer">1</span>];&lt;/p&gt;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>&lt;pre&gt;&lt;code&gt;table[<span class="integer">0</span>] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="predefined-type">int</span> min = INT32_MAX;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="keyword">for</span> (<span class="predefined-type">int</span> sum = <span class="integer">1</span>; sum &amp;lt;= SUM; sum++) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="keyword">for</span> (<span class="predefined-type">int</span> j = <span class="integer">0</span>; j &amp;lt; changeSize; j++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="comment">// Pick first coin and substract with the sum</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="comment">// Check if sum is less than 0</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="keyword">if</span> (sum - change[j] &amp;lt; <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (sum - change[j] == <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="comment">// This is the case when sum is either 1, 5, 10, 25</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span class="comment">// In this case mininum number of coin required is 1</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    min = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="comment">// This is case when we say sum is 3</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="comment">// In this case lets start with first coint which is 1</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="comment">// If we choose coint 1 then the sum left os 3 - 1 = 2</span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span class="comment">// Given we are calculating for sum 3 means we have already</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span class="comment">// calculated for sum 2. So go to table for sum = 2 and</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span class="comment">// get the min number of ways sum 2 is computed.</span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span class="comment">// Here i is the sum i.e. lets say as per our example</span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    <span class="comment">// i = 3, j = 0</span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span class="comment">// 1 + table[3 - change[0]];</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="comment">// 1 + table[3 - 1];</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    <span class="comment">// 1 + table[2];</span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    <span class="comment">// 1 + 2 = 3</span>
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>    <span class="comment">// Sum 3 requires at least 3 coins {1, 1, 1}</span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>    <span class="keyword">if</span> (min &amp;gt; (<span class="integer">1</span> + table[sum - change[j]])) {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    min = <span class="integer">1</span> + table[sum - change[j]];
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>}
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>table[sum] = min;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>min = INT32_MAX;
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>}
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span><span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &amp;lt;= SUM; i++) {
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">SUM[%d]: %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i, table[i]);
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>}
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>
<span class="line-numbers"><a href="#n56" name="n56">56</a></span><span class="keyword">return</span> table[SUM]; }
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>
<span class="line-numbers"><a href="#n59" name="n59">59</a></span>&lt;p&gt;<span class="predefined-type">int</span> main(<span class="predefined-type">int</span> argc, <span class="directive">const</span> <span class="predefined-type">char</span> * argv[])
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>{
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>    <span class="predefined-type">int</span> change&lt;a href=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming</span><span class="delimiter">&quot;</span></span> title=<span class="string"><span class="delimiter">&quot;</span><span class="content">DP video</span><span class="delimiter">&quot;</span></span>&gt;<span class="integer">4</span>&lt;/a&gt; = {<span class="integer">1</span>, <span class="integer">5</span>, <span class="integer">10</span>, <span class="integer">25</span>};
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>    <span class="predefined-type">int</span> changeSize = <span class="keyword">sizeof</span>(change)/<span class="keyword">sizeof</span>(change[<span class="integer">0</span>]);
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>    <span class="predefined-type">int</span> SUM = <span class="integer">16</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>&lt;pre&gt;&lt;code&gt;printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">MinChange for sum %d = %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, SUM, mincount(change, changeSize, SUM));
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>
<span class="line-numbers"><a href="#n67" name="n67">67</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curious Case Of Recursion]]></title>
    <link href="http://distkeys.com/blog/2014/06/18/curious-case-of-recursion/"/>
    <updated>2014-06-18T22:03:00-07:00</updated>
    <id>http://distkeys.com/blog/2014/06/18/curious-case-of-recursion</id>
    <content type="html"><![CDATA[
<p>Recursion has always been imaginative to me. How do I write the recursive function so that it solve the problem, what all cases it would uncover as recursion progress. As input value increases things gets complex and I am lost.</p>

<p>To understand it better I was looking around internet and I found very ordinary yet powerful statement.</p>

<p><blockquote><p>Functions can call other functions – this is a fact that most programmers know. Recursion is simply a special case where instead of calling another function, a function calls itself.</p></blockquote> </p>

<!-- more -->

<p>This is pretty good insight. This statement helps you to forget imaging the complex cases where you have high input value, what happens behind the scenes and so on.
<br /><br /></p>

<p><strong>Lets take an example</strong></p>

<p>Write a function, for a given number, print out all different ways to make this number, by using addition and any number equal to or smaller than this number and greater than zero. </p>

<p>For example, given a 5, we have the following different ways to make up 5:<br />
1st 1, 1, 1, 1, 1 <br />
2nd: 1, 4 <br />
3rd : 1, 1, 1, 2 <br />
4th : 1, 1, 3 <br />
5th : 2, 3 <br />
6th : 1, 2, 2 <br />
7th : 5 <br /></p>

<p>There are two ways of thinking about this problem<br />
1. 1 + 1 = 2 <br /> 
2. 2 = 1 + 1</p>

<p>You would be wondering they both look pretty same. They both are same when result matters but they are different in approach.</p>

<p><strong>Lets consider input as 3</strong> <br />
Using approach 1, 3 be written as 1 + 1 + 1<br />
But, using approach 2, 3 will be written as 3 = 1 + 2 and now how 2 can be written. Yes, 2 = 1 + 1</p>

<p>Finally, 3 = 1 + 2 = 1 + (1 + 1)<br />
              4 = 1 + 3 = 1 + (1 + 2) = 1 + (1 + ( 1 + 1))<br />
              and so on….</p>

<p>We can clearly see recursion pattern forming here. In this case now all we need to worry is given input just subtract 1 and call the same function again.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Recursion1</span>  <a href='http://ideone.com/v0vZKf' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="preprocessor">#include</span> <span class="include">&lt;iostream /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;using namespace std;&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span class="directive">void</span> printSeq(<span class="predefined-type">int</span> num, <span class="predefined-type">int</span> a[], <span class="predefined-type">int</span> opIndx,<span class="predefined-type">int</span> s){
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     <span class="keyword">if</span>(num &amp;lt;= <span class="integer">0</span>){
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>         <span class="comment">// Display the result</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>         <span class="keyword">for</span>(<span class="predefined-type">int</span> j=<span class="integer">0</span>;j&amp;lt;opIndx;j++)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>             cout<span class="error">«</span>a[j]<span class="error">«</span><span class="error">”</span>,<span class="error">”</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>         cout<span class="error">«</span>endl;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>         <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>     }&lt;/p&gt;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>&lt;pre&gt;&lt;code&gt; a[opIndx] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span> <span class="comment">// Call the function again, remember 3 = 1 + 2</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span> printSeq(num-<span class="integer">1</span>, a, opIndx+<span class="integer">1</span>, <span class="integer">1</span>);  }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;p&gt;<span class="predefined-type">int</span> main(){
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>     <span class="predefined-type">int</span> a[<span class="integer">5</span>];
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>     printSeq(<span class="integer">5</span>,a,<span class="integer">0</span>,<span class="integer">1</span>);
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>     <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span> }
</pre></div>
</div>
 </figure></notextile></div></p>

<p>We just saw case 1 but there are other combinations of 5. Lets consider the next combinations which are<br />
 5 = 2 + (3). Later 3 will have its own combinations which don’t need to bother.<br />
 5 = 3 + (2)<br />
 5 = 4 + (1)<br />
 5 = 5 + (0)<br /></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Combination</span>  <a href='http://ideone.com/AQrLwO' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="preprocessor">#include</span> <span class="include">&lt;iostream /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;using namespace std;&lt;/p&gt;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span class="directive">void</span> printSeq(<span class="predefined-type">int</span> num, <span class="predefined-type">int</span> a[], <span class="predefined-type">int</span> opIndx,<span class="predefined-type">int</span> s){
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>      <span class="keyword">if</span>(num &amp;lt;= <span class="integer">0</span>){
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>          <span class="comment">//Display the output</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          <span class="keyword">for</span>(<span class="predefined-type">int</span> j = <span class="integer">0</span>; j &amp;lt; opIndx; j++)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>              cout <span class="error">«</span><span class="error"> </span>a[j] <span class="error">«</span><span class="error"> </span><span class="error">”</span>,<span class="error">”</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>          cout <span class="error">«</span><span class="error"> </span>endl;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>          <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>      }&lt;/p&gt;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>&lt;pre&gt;&lt;code&gt;  <span class="comment">// s starts from 1 and later it will change to</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="comment">// 2, 3, 4, 5.</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>  <span class="comment">// It is the case$</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span class="comment">// 5 = 2 + (3)</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  <span class="comment">// 5 = 3 + (2)</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  <span class="comment">// 5 = 4 + (1)</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="comment">// 5 = 5 + (0)</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>  <span class="keyword">for</span>(<span class="predefined-type">int</span> i = s; i &amp;lt;= num; i++){
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>      a[opIndx] = i;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>      printSeq(num-i, a, opIndx + <span class="integer">1</span>, i);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  }   }   
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>&lt;p&gt;<span class="predefined-type">int</span> main(){
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>      <span class="predefined-type">int</span> a[<span class="integer">15</span>];
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>      printSeq(<span class="integer">5</span>, a, <span class="integer">0</span>, <span class="integer">1</span>);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>      <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>  }
</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /><br /><br /><br />
<strong>References</strong> <br />
 <a href="http://www.reddit.com/r/learnprogramming/comments/135rdz/help_me_understand_recursion/">Recursion on reddit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trie and Trees]]></title>
    <link href="http://distkeys.com/blog/2013/11/26/trie-and-trees/"/>
    <updated>2013-11-26T23:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/26/trie-and-trees</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#trie-problems">Trie Problems</a></li>
  <li><a href="#trie-explanation">Trie explanation</a></li>
  <li><a href="#trie-code">Trie Code</a></li>
  <li><a href="#ifdef-debug">ifdef DEBUG</a></li>
  <li><a href="#ifdef-debug-1">ifdef DEBUG</a>    <ul>
      <li><a href="#infix-to-postfix">Infix to Postfix</a></li>
      <li><a href="#postfix-to-infix">Postfix to Infix</a>        <ul>
          <li><a href="#evaluate-postfix-expression">Evaluate Postfix expression</a></li>
        </ul>
      </li>
      <li><a href="#tree-problems">Tree Problems</a>        <ul>
          <li><a href="#find-bst-is-balanced-or-not">Find BST is balanced or not</a></li>
          <li><a href="#find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</a></li>
          <li><a href="#bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</a></li>
          <li><a href="#bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</a></li>
          <li><a href="#bst---morris-inorder-traversal">BST - Morris Inorder Traversal</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>This article is about Trie and Trees data structure.</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png"/>
  
  <h2>trie</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <strong>trie</strong>, also called <strong>digital tree</strong> and sometimes <strong>radix tree</strong> or <strong>prefix tree</strong> (as they can be searched by prefixes), is an <a href="http://en.wikipedia.org/wiki/Ordered_tree_data_structure" title="Ordered tree data structure" class="mw-redirect">ordered tree</a> <a href="http://en.wikipedia.org/wiki/Data_structure" title="Data structure">data structure</a> that is used to store a <a href="http://en.wikipedia.org/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">dynamic set</a> or <a href="http://en.wikipedia.org/wiki/Associative_array" title="Associative array">associative array</a> where the keys are usually <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">strings</a>. Unlike a <a href="http://en.wikipedia.org/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common <a href="http://en.wikipedia.org/wiki/Prefix" title="Prefix">prefix</a> of the string associated with that node, and the root is associated with the <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">empty string</a>. Values are normally not associated with every node, only with leaves and some inner nodes that correspond to keys of interest. For the space-optimized presentation of prefix tree, see <a href="http://en.wikipedia.org/wiki/Compact_prefix_tree" title="Compact prefix tree" class="mw-redirect">compact prefix tree</a>.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Trie">Read more</a>
</div>
</p>

<!-- more -->
<p><br /></p>

<p>Trie is one of the most important data structure for autocomplete.</p>

<h3 id="trie-problems">Trie Problems</h3>

<p>Various problems on Trie can be found <a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=usingTries" target="_blnk">here</a></p>

<h3 id="trie-explanation">Trie explanation</h3>

<p>Trie code implementation is based on this <a href="https://www.dropbox.com/s/tg94q18u1t86y23/Trie.pdf" target="_blank">article.</a></p>

<h3 id="trie-code">Trie Code</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Trie.h </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">typedef</span> <span class="predefined-type">int</span> trieValueT;&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="keyword">typedef</span> <span class="keyword">struct</span> trieNodeTag {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="predefined-type">char</span> key;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> words;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> prefix;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    trieValueT value;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">struct</span> trieNodeTag *next, *children;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>} trieNodeT;&lt;/p&gt;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>&lt;p&gt;<span class="keyword">typedef</span> <span class="keyword">struct</span> trieCDT {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    trieNodeT *root;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>} trieCDT;&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;p&gt;<span class="keyword">typedef</span> <span class="keyword">struct</span> trieCDT *trieADT;&lt;/p&gt;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;p&gt;<span class="comment">// Functions</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="directive">void</span> trieCreate(trieCDT &lt;em&gt;trie);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> trieAdd(trieNodeT *trie, <span class="predefined-type">char</span> *key, <span class="predefined-type">int</span> value);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>trieNodeT&lt;/em&gt; addChild(<span class="predefined-type">char</span> key);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="predefined-type">int</span> trieIsMember(trieCDT trie, <span class="predefined-type">char</span> keys[]);
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> totalStringsWithPrefix(trieCDT trie, <span class="predefined-type">char</span> keys[]);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="directive">void</span> trieDestroy(trieNodeT *root);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="directive">void</span> test1();
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="directive">void</span> startTesting();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="directive">void</span> startTestingFromFile(<span class="predefined-type">char</span>** stdip_v);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Trie.c</span>  <a href='http://ideone.com/AV5jKS' target='_blank'>Run Trie.c </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h&gt;</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span><span class="preprocessor">#include</span> <span class="include">&quot;trie.h&quot;</span>&lt;/stdlib.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span>&lt;p&gt;<span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> TEST <span class="integer">1</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="comment">// To test trie by providing input from file, uncomment ‘TESTFROMFILE’</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span><span class="comment">// Compile code and while executing provide file name at command line</span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// For e.g. &amp;gt; ./a.out ipFile.txt</span>
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span class="comment">//#define TESTFROMFILE 1</span>
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span><span class="comment">// To enable debug messages uncomment ‘DEBUG’</span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span><span class="comment">//#define DEBUG 1&lt;/p&gt;</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span>
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">ifdef-debug</span><span class="delimiter">&quot;</span></span>&gt;ifdef DEBUG&lt;/h1&gt;
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>&lt;p&gt;<span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="preprocessor">#endif</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>&lt;p&gt;<span class="predefined-type">int</span> main(<span class="predefined-type">int</span> argc, <span class="predefined-type">char</span>* argv[])
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>{
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>    <span class="preprocessor">#ifdef</span> TEST
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>        startTesting();
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>    <span class="preprocessor">#endif</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>&lt;pre&gt;&lt;code&gt;<span class="preprocessor">#ifdef</span> TESTFROMFILE
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    startTestingFromFile(argv);
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span><span class="preprocessor">#endif</span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span>&lt;p&gt;<span class="comment">// Create root node of trie</span>
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span><span class="directive">void</span> trieCreate(trieCDT &lt;em&gt;trie)
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>{
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    trie-&amp;gt;root = (trieNodeT&lt;/em&gt;)calloc(<span class="integer">1</span>,<span class="keyword">sizeof</span>(trieNodeT));&lt;/p&gt;
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (trie-&amp;gt;root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Can not alloc memory</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span><span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span>}
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>trie-&amp;gt;root-&amp;gt;key = <span class="char">'\0'</span>;
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>trie-&amp;gt;root-&amp;gt;value = -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>trie-&amp;gt;root-&amp;gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>trie-&amp;gt;root-&amp;gt;children = <span class="predefined-constant">NULL</span>; }
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span>&lt;p&gt;<span class="comment">// This is recursive function for adding node in trie</span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span class="comment">// It covers 3 cases</span>
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span class="comment">// Case 1: When only root node is present in a trie. In this</span>
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span><span class="comment">//         case keep on adding node one level after another.</span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span><span class="comment">//         If input given is “Good” and if ‘G’ is not found then</span>
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span><span class="comment">//         insert ‘G’ and return ‘G’ node from where next insertion</span>
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span><span class="comment">//         has to be done as we have already found there is no</span>
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span><span class="comment">//         other ‘G’ exist.</span>
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span><span class="comment">// Case 2: When matching key node is already found return the matching</span>
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span><span class="comment">//         node and increment key</span>
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span><span class="comment">// Case 3: When key does not match to existing children i.e. for</span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span><span class="comment">//         “abcd”, “abef” and “abgh”</span>
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span><span class="comment">//         .  —-&amp;gt; root</span>
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span class="comment">//         a</span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span><span class="comment">//         b</span>
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span><span class="comment">//         c ===&amp;gt; e ===&amp;gt; g        (LL, children of b)</span>
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span><span class="comment">//         |      |      |</span>
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span><span class="comment">//         d      f      h&lt;/p&gt;</span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>&lt;p&gt;<span class="directive">void</span> trieAdd(trieNodeT* trie, <span class="predefined-type">char</span> *key, <span class="predefined-type">int</span> value) {&lt;/p&gt;
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// Get root of children</span>
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span><span class="keyword">if</span> (key == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span><span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (trie-&amp;gt;children == <span class="predefined-constant">NULL</span> &amp;amp;&amp;amp; trie-&amp;gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>    <span class="comment">// Case 1</span>
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>trieNodeT* child = addChild(*key);
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>trie-&amp;gt;children = child;
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span><span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>    child-&amp;gt;value = value;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>    child-&amp;gt;words++;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>}
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span><span class="keyword">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>}
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>trieNodeT* level = trie-&amp;gt;children;
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>trieNodeT* current;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span><span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&amp;gt;next) {
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>
<span class="line-numbers"><a href="#n101" name="n101">101</a></span><span class="comment">// Case 2</span>
<span class="line-numbers"><a href="#n102" name="n102">102</a></span><span class="keyword">if</span> (current-&amp;gt;key == *key) {
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>    current-&amp;gt;prefix++;
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>    <span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>    current-&amp;gt;words++;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>    }
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>    <span class="keyword">return</span> trieAdd(current, ++key, value);
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>}
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>
<span class="line-numbers"><a href="#n112" name="n112">112</a></span><span class="comment">// This is last element in LL and key is not found</span>
<span class="line-numbers"><a href="#n113" name="n113">113</a></span><span class="comment">// For e.g. for &quot;abc&quot; and &quot;abd&quot;, c and d should be</span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span><span class="comment">// child of b.</span>
<span class="line-numbers"><a href="#n115" name="n115">115</a></span><span class="comment">// Since, c != d, Append d to c in LL signifying they</span>
<span class="line-numbers"><a href="#n116" name="n116">116</a></span><span class="comment">// are both child of 'b' and are on same level</span>
<span class="line-numbers"><a href="#n117" name="n117">117</a></span><span class="comment">//</span>
<span class="line-numbers"><a href="#n118" name="n118">118</a></span><span class="comment">// Case 3</span>
<span class="line-numbers"><a href="#n119" name="n119">119</a></span><span class="keyword">if</span> (current-&amp;gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>    <span class="comment">//Add key</span>
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>    trieNodeT* child = addChild(*key);
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>    current-&amp;gt;next = child;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>    <span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>        child-&amp;gt;words++;
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>    child-&amp;gt;value = value;
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>    }
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>    <span class="keyword">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>}
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>} }
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>&lt;p&gt;trieNodeT* addChild(<span class="predefined-type">char</span> key)
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>{
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>    trieNodeT* child = (trieNodeT*)calloc(<span class="integer">1</span>,<span class="keyword">sizeof</span>(trieNodeT));&lt;/p&gt;
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (child == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Can not alloc memory</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n141" name="n141">141</a></span><span class="keyword">return</span> <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>}
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>child-&amp;gt;key = key;
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>child-&amp;gt;value = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>child-&amp;gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>child-&amp;gt;children = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>child-&amp;gt;prefix = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>child-&amp;gt;words = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span><span class="keyword">return</span> child; }
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>&lt;p&gt;<span class="predefined-type">int</span> totalStringsWithPrefix(trieCDT trie, <span class="predefined-type">char</span> keys[])
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>{
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>    trieNodeT *level = trie.root-&amp;gt;children;&lt;/p&gt;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">while</span> (keys != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>trieNodeT *found = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>trieNodeT *current;
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>
<span class="line-numbers"><a href="#n161" name="n161">161</a></span><span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&amp;gt;next) {
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>    <span class="keyword">if</span> (current-&amp;gt;key == *keys) {
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>    found = current;
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>    }
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>}
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>
<span class="line-numbers"><a href="#n168" name="n168">168</a></span><span class="keyword">if</span> (found == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>} <span class="keyword">else</span> <span class="keyword">if</span> (*(keys + <span class="integer">1</span>)  == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    <span class="keyword">return</span> found-&amp;gt;prefix;
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>}
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>level = found -&amp;gt; children;
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>keys++;
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>}
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>
<span class="line-numbers"><a href="#n177" name="n177">177</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span>&lt;p&gt;<span class="predefined-type">int</span> trieIsMember(trieCDT trie, <span class="predefined-type">char</span> keys[])
<span class="line-numbers"><a href="#n181" name="n181">181</a></span>{
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>    trieNodeT *level = trie.root-&amp;gt;children;&lt;/p&gt;
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">while</span> (keys != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n185" name="n185">185</a></span>trieNodeT *found = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>trieNodeT *current;
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>
<span class="line-numbers"><a href="#n188" name="n188">188</a></span><span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&amp;gt;next) {
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>    <span class="keyword">if</span> (current-&amp;gt;key == *keys) {
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>    found = current;
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>    }
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>}
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>
<span class="line-numbers"><a href="#n195" name="n195">195</a></span><span class="keyword">if</span> (found == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>} <span class="keyword">else</span> <span class="keyword">if</span> (*keys == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>    <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"><a href="#n199" name="n199">199</a></span>}
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>level = found -&amp;gt; children;
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>keys++;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>}
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>
<span class="line-numbers"><a href="#n204" name="n204">204</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>
<span class="line-numbers"><a href="#n207" name="n207">207</a></span>&lt;p&gt;<span class="directive">void</span> trieDestroy(trieNodeT * root)
<span class="line-numbers"><a href="#n208" name="n208">208</a></span>{
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>    <span class="keyword">if</span> (root-&amp;gt;children == <span class="predefined-constant">NULL</span> &amp;amp;&amp;amp; root-&amp;gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>        D(printf(<span class="error">“</span>Destroying %d<span class="error">\</span>n<span class="error">”</span>, root-&amp;gt;value));
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>    free (root);
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>&lt;pre&gt;&lt;code&gt;<span class="comment">// If root have next and children free them first</span>
<span class="line-numbers"><a href="#n216" name="n216">216</a></span><span class="keyword">if</span> (root-&amp;gt;next != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>trieDestroy(root-&amp;gt;next);
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>}
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span><span class="keyword">if</span> (root-&amp;gt;children != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>trieDestroy(root-&amp;gt;children);
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>}
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n224" name="n224">224</a></span>
<span class="line-numbers"><a href="#n225" name="n225">225</a></span>&lt;h1 id=<span class="string"><span class="delimiter">&quot;</span><span class="content">ifdef-debug-1</span><span class="delimiter">&quot;</span></span>&gt;ifdef DEBUG&lt;/h1&gt;
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (root-&amp;gt;key != <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Destroying %c</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, root-&amp;gt;key);
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>} <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Destroying Root %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, root-&amp;gt;value);
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span>} <span class="preprocessor">#endif</span>
<span class="line-numbers"><a href="#n231" name="n231">231</a></span>
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>free (root); }
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>
<span class="line-numbers"><a href="#n235" name="n235">235</a></span>&lt;p&gt;<span class="directive">void</span> test1()
<span class="line-numbers"><a href="#n236" name="n236">236</a></span>{
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>    <span class="predefined-type">char</span> s[] = <span class="error">“</span>ABCD<span class="error">”</span>;
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>    <span class="predefined-type">char</span> s1[] = <span class="error">“</span>ABCDE<span class="error">”</span>;
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>    trieCDT trie;
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>    trieCreate(&amp;amp;trie);
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>    trieAdd(trie.root, <span class="error">“</span>ABCD<span class="error">”</span>, <span class="integer">20</span>);
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>    trieAdd(trie.root, <span class="error">“</span>ABCDE<span class="error">”</span>, <span class="integer">30</span>);&lt;/p&gt;
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (trieIsMember(trie, s)) {
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Found member 'ABCD'</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>}
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>i = totalStringsWithPrefix(trie, <span class="string"><span class="delimiter">&quot;</span><span class="content">ABC</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total words with prefix 'ABC' %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>trieDestroy(trie.root); }
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>
<span class="line-numbers"><a href="#n255" name="n255">255</a></span>&lt;p&gt;<span class="directive">void</span> startTesting()
<span class="line-numbers"><a href="#n256" name="n256">256</a></span>{
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>    test1();
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span>&lt;p&gt;<span class="directive">void</span> startTestingFromFile(<span class="predefined-type">char</span>** stdip_v)
<span class="line-numbers"><a href="#n261" name="n261">261</a></span>{
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>    FILE *fp = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>    <span class="predefined-type">char</span> key[<span class="integer">50</span>];
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>    trieCDT trie;
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>&lt;pre&gt;&lt;code&gt;fp = fopen(stdip_v[<span class="integer">1</span>], <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n268" name="n268">268</a></span><span class="keyword">if</span>(fp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>fprintf(stderr, <span class="string"><span class="delimiter">&quot;</span><span class="content">Can not read file!!</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span><span class="keyword">return</span>;
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>}
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>trieCreate(&amp;amp;trie);
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>
<span class="line-numbers"><a href="#n275" name="n275">275</a></span><span class="keyword">while</span>(fscanf(fp, <span class="string"><span class="delimiter">&quot;</span><span class="content">%s</span><span class="delimiter">&quot;</span></span>, key) != <span class="predefined-constant">EOF</span>) {
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>trieAdd(trie.root, key, i);
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>i++;
<span class="line-numbers"><a href="#n278" name="n278">278</a></span>
<span class="line-numbers"><a href="#n279" name="n279">279</a></span><span class="keyword">if</span>(!trieIsMember(trie, key)) {
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Key '%s' NOT found in trie</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, key);
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>}
<span class="line-numbers"><a href="#n282" name="n282">282</a></span>}
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total words inserted in trie %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>i = totalStringsWithPrefix(trie, <span class="string"><span class="delimiter">&quot;</span><span class="content">Abe</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total prefixs with 'Abe' %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>trieDestroy(trie.root); } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p><br /></p>

<h3 id="infix-to-postfix">Infix to Postfix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/rA0x7b4YiMI" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="postfix-to-infix">Postfix to Infix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/OlRENYiiIiw" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="evaluate-postfix-expression">Evaluate Postfix expression</h4>

<p>Valid operators are +, -, *, /.<br /> Each operand may be an integer or another expression.</p>

<p>Some examples:<br />
<code>
["2", "1", "+", "3", "*"] -&gt; ((2 + 1) * 3) -&gt; 9<br />
["4", "13", "5", "/", "+"] -&gt; (4 + (13 / 5)) -&gt; 6
</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Postfix  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>class Solution {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="label">public:</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Solution(){};
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    ~Solution() {};&lt;/p&gt;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>&lt;pre&gt;&lt;code&gt;<span class="predefined-type">int</span> evalRPN(vector&amp;lt;string&amp;gt; &amp;amp;tokens) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> num = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    vector&amp;lt;string&amp;gt;::const_iterator cii;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">for</span>(<span class="predefined-type">int</span> ii=<span class="integer">0</span>; ii &amp;lt; tokens.size(); ii++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    num = atoi(tokens.at(ii).c_str());
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">if</span> (!((tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">+</span><span class="delimiter">&quot;</span></span>) || (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">-</span><span class="delimiter">&quot;</span></span>) ||
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">*</span><span class="delimiter">&quot;</span></span>) || (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>))) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        mystack.push(num);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        <span class="keyword">if</span> (mystack.empty()) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        num = mystack.top();
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        mystack.pop();
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>        <span class="keyword">if</span> (mystack.empty()) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">+</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        num += mystack.top();
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">-</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>        num = mystack.top() - num;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">*</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        num *= mystack.top();
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        <span class="keyword">if</span> (num == <span class="integer">0</span>)  {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>            <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>        num = mystack.top() / num;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>        }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        mystack.pop();
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>        mystack.push(num);
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>    <span class="keyword">return</span> mystack.top();
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>}
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>std::stack&amp;lt;<span class="predefined-type">int</span>&amp;gt; mystack; }; </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="tree-problems">Tree Problems</h3>

<h4 id="find-bst-is-balanced-or-not">Find BST is balanced or not</h4>

<p>Balanced tree is defined to be a tree such that no two leaf nodes differ in distance from the root by more than one.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Balance BST</span>  <a href='http://ideone.com/2rEls9' target='_blank'>Run </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h /&gt;</span>&lt;/stdio.h&gt;&lt;/p&gt;
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span class="predefined-type">int</span> arrLen = <span class="integer">5</span>;
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> maxdepth = <span class="integer">0</span>;
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> mindepth = <span class="integer">10</span>;
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="predefined-type">int</span> totalElem = <span class="integer">8</span>;&lt;/p&gt;
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span>&lt;p&gt;<span class="keyword">typedef</span> <span class="keyword">struct</span> BST {
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> data;
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span>    <span class="keyword">struct</span> BST *left;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span>    <span class="keyword">struct</span> BST *right;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>} nodeBST;&lt;/p&gt;
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span>&lt;p&gt;<span class="directive">void</span> balanceBST(<span class="predefined-type">int</span> arr[]);
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>nodeBST* addNode(<span class="predefined-type">int</span> data);
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span><span class="directive">void</span> addNodeToBST(nodeBST *root, nodeBST *node);
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="directive">void</span> traverse(nodeBST *root);
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> maxDepth(nodeBST *root, <span class="predefined-type">int</span> depth);
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="directive">void</span> minDepth(nodeBST *root, <span class="predefined-type">int</span> depth);&lt;/p&gt;
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>&lt;p&gt;<span class="predefined-type">int</span> maxDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> maxDeep);
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span><span class="predefined-type">int</span> minDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> minDeep);&lt;/p&gt;
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>{
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>    <span class="predefined-type">int</span> arr[<span class="integer">10</span>] = {<span class="integer">5</span>,<span class="integer">3</span>,<span class="integer">7</span>,<span class="integer">10</span>,<span class="integer">6</span>,<span class="integer">12</span>,<span class="integer">2</span>,<span class="integer">1</span>};&lt;/p&gt;
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>&lt;pre&gt;&lt;code&gt;(<span class="directive">void</span>)balanceBST(arr);
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span><span class="keyword">return</span> <span class="integer">0</span>; }
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>&lt;p&gt;<span class="directive">void</span> balanceBST(<span class="predefined-type">int</span> arr[])
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span>{
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>    nodeBST *node;
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>    nodeBST *root;
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    <span class="predefined-type">int</span> max = <span class="integer">0</span>;
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>    <span class="predefined-type">int</span> min = <span class="integer">100000</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &amp;lt; totalElem; i++) {
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>node = addNode(arr[i]);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span><span class="keyword">if</span> (node == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>}
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span><span class="keyword">if</span> (i == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>    root = node;
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>    <span class="keyword">continue</span>;
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>}
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span>addNodeToBST(root, node);
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span>}
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Nodes created</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>traverse(root);
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>maxDepth(root, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Max Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, maxdepth);
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>minDepth(root, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Min Depth %d</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, mindepth);
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>max = maxDepthWithoutGlobalVar(root, <span class="integer">0</span>, max);
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Max Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, max);
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>min = minDepthWithoutGlobalVar(root, <span class="integer">0</span>, min);
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Min Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, min);
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span class="keyword">if</span> ((max - min) &amp;gt; <span class="integer">1</span>) {
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Binary search tree is not Balanced</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>} <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Binary search tree is Balanced</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>} }
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>&lt;p&gt;nodeBST* addNode(<span class="predefined-type">int</span> data)
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>{
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>    nodeBST &lt;em&gt;node = (nodeBST&lt;/em&gt;)calloc(<span class="integer">1</span>, <span class="keyword">sizeof</span>(nodeBST));&lt;/p&gt;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (node == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span><span class="keyword">return</span> <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>}
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>node-&amp;gt;data = data;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>node-&amp;gt;left = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>node-&amp;gt;right = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span><span class="keyword">return</span> node; }
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>&lt;p&gt;<span class="directive">void</span> addNodeToBST(nodeBST *root, nodeBST *node)
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>{
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>    <span class="keyword">while</span>(root != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>    <span class="keyword">if</span> (node-&amp;gt;data &amp;lt; root-&amp;gt;data) {
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>        <span class="keyword">if</span> (root-&amp;gt;left != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>        root = root-&amp;gt;left;
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>        root-&amp;gt;left = node;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>        }
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>        <span class="keyword">if</span> (root-&amp;gt;right != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>        root = root-&amp;gt;right;
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>        root-&amp;gt;right = node;
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>        }
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>    }
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>    }&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span>; }
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span>&lt;p&gt;<span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>{
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>    traverse(root-&amp;gt;left);
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>    printf(<span class="error">“</span>%d <span class="error">“</span>, root-&amp;gt;data);
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>    traverse(root-&amp;gt;right);
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span>; }
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>&lt;p&gt;<span class="directive">void</span> maxDepth(nodeBST *root, <span class="predefined-type">int</span> depth)
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>{
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>    <span class="keyword">if</span> (maxdepth &amp;lt; depth) {
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>        maxdepth = depth;
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>    }
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>    maxDepth(root-&amp;gt;left, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>    maxDepth(root-&amp;gt;right, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>    }
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>}&lt;/p&gt;
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>&lt;p&gt;<span class="directive">void</span> minDepth(nodeBST *root, <span class="predefined-type">int</span> depth)
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>{
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    <span class="keyword">if</span> (mindepth &amp;gt; depth) {
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>        mindepth = depth;
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>    }
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>    minDepth(root-&amp;gt;left, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    minDepth(root-&amp;gt;right, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>    }
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>}&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>&lt;p&gt;<span class="predefined-type">int</span> maxDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> maxDeep)
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>{
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>    <span class="keyword">if</span> (maxDeep &amp;lt;= depth) {
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>        maxDeep = depth;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>    }
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>    <span class="keyword">return</span> maxDeep;
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>        maxDeep = maxDepthWithoutGlobalVar(root-&amp;gt;left, (depth + <span class="integer">1</span>), maxDeep);
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>    maxDeep = maxDepthWithoutGlobalVar(root-&amp;gt;right, (depth + <span class="integer">1</span>), maxDeep);
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span> maxDeep; }
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>&lt;p&gt;<span class="predefined-type">int</span> minDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> minDeep)
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>{
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>    <span class="keyword">if</span> (minDeep &amp;gt;= depth) {
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>        minDeep = depth;
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    }
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>    <span class="keyword">return</span> minDeep;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>        minDeep = minDepthWithoutGlobalVar(root-&amp;gt;left, (depth + <span class="integer">1</span>), minDeep);
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>    minDeep = minDepthWithoutGlobalVar(root-&amp;gt;right, (depth + <span class="integer">1</span>), minDeep);
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>    }&lt;/p&gt;
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">return</span> minDeep; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</h4>

<p>A binary search tree (BST) is a node based binary tree data structure which has the following properties.<br />
• The left subtree of a node contains only nodes with keys less than the node’s key.<br />
• The right subtree of a node contains only nodes with keys greater than the node’s key.<br />
• Both the left and right subtrees must also be binary search trees.<br /><br /></p>

<p><strong>Method 1</strong></p>

<p>Perform inorder traversal on tree and store it in temporary array. By property of inorder traversal the numbers stored should be sorted sequence of it’s a BST else it’s not BST.</p>

<blockquote>
  <p>The only caveat is that this method require O(n) space</p>
</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Verify BST  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>&lt;p&gt;<span class="predefined-type">int</span> temp[TREESIZE];&lt;/p&gt;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>&lt;p&gt;<span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="directive">static</span> <span class="predefined-type">int</span> n = <span class="integer">0</span>;&lt;/p&gt;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>} <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    traverse(root-&amp;gt;left);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    temp[n++] = root-&amp;gt;data;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    traverse1(root-&amp;gt;right);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="keyword">return</span>; }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>&lt;/code&gt;&lt;/pre&gt;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>&lt;p&gt;<span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &amp;lt; TREESIZE; i++) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="keyword">if</span> (temp[i] &amp;gt; temp [i + <span class="integer">1</span>]) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">return</span> <span class="integer">0</span>; <span class="comment">// Binary tree is not BST</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>}
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="keyword">return</span> <span class="integer">1</span>;
</pre></div>
</div>
 </figure></notextile></div></p>

<p><br /><br /></p>

<p><strong>Method 2</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Verify BST  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">int</span> isBSTUtil(nodeBST* node, <span class="predefined-type">int</span> min, <span class="predefined-type">int</span> max);&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="comment">/* Returns true if the given tree is a binary search tree </span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment"> (efficient version). &lt;em&gt;/</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment">int isBST(nodeBST&lt;/em&gt; node) </span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">{ </span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">  return(isBSTUtil(node, INT_MIN, INT_MAX)); </span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">} &lt;/p&gt;</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment"></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">&lt;p&gt;/* Returns true if the given tree is a BST and its </span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment">   values are &amp;gt;= min and &amp;lt;= max. &lt;em&gt;/</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="comment">int isBSTUtil(nodeBST&lt;/em&gt; node, int min, int max) </span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment">{ </span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="comment">  /* an empty tree is BST */</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="keyword">if</span> (node==<span class="predefined-constant">NULL</span>) 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>     <span class="keyword">return</span> <span class="integer">1</span>;&lt;/p&gt;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>&lt;p&gt;<span class="comment">/* false if this node violates the min/max constraint */</span> 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  <span class="keyword">if</span> (node-&amp;gt;data &amp;lt; min || node-&amp;gt;data &amp;gt; max) 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>     <span class="keyword">return</span> <span class="integer">0</span>; &lt;/p&gt;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>&lt;p&gt;<span class="comment">/* otherwise check the subtrees recursively, </span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="comment">   tightening the min or max constraint */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  <span class="keyword">return</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    isBSTUtil(node-&amp;gt;left, min, (node-&amp;gt;data - <span class="integer">1</span>)) &amp;amp;&amp;amp;  <span class="comment">// Allow only distinct values</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    isBSTUtil(node-&amp;gt;right, (node-&amp;gt;data + <span class="integer">1</span>), max);  <span class="comment">// Allow only distinct values</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>} 
</pre></div>
</div>
 </figure></notextile></div></p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack for function calls</p>
</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Recursive Inorder</span>  <a href='http://ideone.com/Bo2ZpL' target='_blank'>Run Code</a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="comment">// Recursive inorder traverse</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>     <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>         <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>         traverse(root-&amp;gt;left);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>         printf(<span class="error">“</span>%d <span class="error">“</span>, root-&amp;gt;data);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>         traverse(root-&amp;gt;right);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>     }&lt;/p&gt;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>&lt;pre&gt;&lt;code&gt; <span class="keyword">return</span>;  } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack </p>
</blockquote>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Iterative Inorder</span>  <a href='http://ideone.com/Bo2ZpL' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="comment">// Iterative</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="comment">// 1) Create an empty stack S.</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="comment">// 2) Initialize current node as root</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> <span class="comment">// 3) Push the current node to S and set current = current-&amp;gt;left until curt is NULL</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="comment">// 4) If current is NULL and stack is not empty then$</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> <span class="comment">//      a) Pop the top item from stack.</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="comment">//      b) Print the popped item, set current = current-&amp;gt;right</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> <span class="comment">//      c) Go to step 3.</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> <span class="comment">// 5) If current is NULL and stack is empty then we are done.&lt;/p&gt;</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>&lt;p&gt;<span class="directive">void</span> iterativeInorder(nodeBST *root)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>     createStack();&lt;/p&gt;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>&lt;pre&gt;&lt;code&gt; <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>     <span class="keyword">if</span> (root != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>         <span class="comment">// Keep pushing in the stack</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>         push(root);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>         root = root-&amp;gt;left;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>     } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>         <span class="keyword">if</span> (isStackEmpty()) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>             <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>         }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span> 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>         root = pop();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>         printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, root-&amp;gt;data);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span> 
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>         root = root-&amp;gt;right;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>     }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span> }  } </pre></div>
</div>
 </figure></notextile></div> &lt;hr style="border-top: 1.5px dotted black"/&gt;&lt;br&gt; &lt;br&gt;
</code></pre>

<h4 id="bst---morris-inorder-traversal">BST - Morris Inorder Traversal</h4>

<p>Morris Inorder Traversal run without using recursion and without extra stack space.</p>

<blockquote>
  <p>Morris Inorder runs in O(NlogN) time and O(1) space</p>
</blockquote>

<p><img src="/assets/morris.png" title="[morris.png]" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Morris Inorder</span>  <a href='http://ideone.com/Bo2ZpL' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="directive">void</span> MorrisInorder(nodeBST &lt;em&gt;root) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      nodeBST&lt;/em&gt; current,*pre;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      current=root;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      <span class="keyword">while</span>(current!=<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          <span class="keyword">if</span>(current-&amp;gt;left==<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>              printf(<span class="error">“</span>%d <span class="error">“</span>,current-&amp;gt;data);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>              current=current-&amp;gt;right;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>          <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>              pre=current-&amp;gt;left;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>              <span class="keyword">while</span>(pre-&amp;gt;right != <span class="predefined-constant">NULL</span> &amp;amp;&amp;amp; pre-&amp;gt;right !=current)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                  pre=pre-&amp;gt;right;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>              <span class="keyword">if</span>(pre-&amp;gt;right==<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                  printf(<span class="error">“</span>Link %d, %d<span class="error">\</span>n<span class="error">”</span>, pre-&amp;gt;data, current-&amp;gt;data);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                  pre-&amp;gt;right=current;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                  current=current-&amp;gt;left;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>              }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>              <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                  pre-&amp;gt;right=<span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                  printf(<span class="error">“</span>%d <span class="error">“</span>,current-&amp;gt;data);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                  current=current-&amp;gt;right;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>              }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>          }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  }
</pre></div>
</div>
 </figure></notextile></div>
&lt;hr style="border-top: 1.5px dotted black"/&gt;<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://distkeys.com/blog/2013/11/18/recursion/"/>
    <updated>2013-11-18T22:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/18/recursion</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recusion-problems">Recusion problems</a>    <ul>
      <li><a href="#factorial">Factorial</a></li>
      <li><a href="#total-bunnyears">Total BunnyEars</a></li>
      <li><a href="#evenodd-bunnyears">Even/Odd BunnyEars</a></li>
      <li><a href="#triangle">Triangle</a></li>
      <li><a href="#sum-of-digits">Sum of Digits</a></li>
      <li><a href="#count-no-7">Count no 7</a></li>
      <li><a href="#count-x-in-string">Count X in String</a></li>
      <li><a href="#count-hi">Count Hi</a></li>
      <li><a href="#change-xy-string">Change XY String</a></li>
      <li><a href="#change-pi">Change PI</a></li>
      <li><a href="#no-x-in-string">No X in String</a></li>
      <li><a href="#no-star-in-string">No Star in String</a></li>
      <li><a href="#substring">Substring</a></li>
      <li><a href="#string-permutation-non-repeating">String permutation non repeating</a></li>
      <li><a href="#power-x-n">Power (x, n)</a></li>
    </ul>
  </li>
</ul>

<p>This article is all about recusion.</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/6/62/Droste.jpg/220px-Droste.jpg"/>
  
  <h2>Recursion</h2>
  <div>
    <p><strong>Recursion</strong> is the process of repeating items in a <a href="http://en.wikipedia.org/wiki/Self-similarity" title="Self-similarity">self-similar</a> way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from <a href="http://en.wikipedia.org/wiki/Linguistics" title="Linguistics">linguistics</a> to <a href="http://en.wikipedia.org/wiki/Logic" title="Logic">logic</a>. The most common application of recursion is in <a href="http://en.wikipedia.org/wiki/Mathematics" title="Mathematics">mathematics</a> and <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, in which it refers to a method of defining <a href="http://en.wikipedia.org/wiki/Function_(mathematics)" title="Function (mathematics)">functions</a> in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Recursion">Read more</a>
</div>
</p>

<!-- more -->
<p><br /></p>

<p>Recursion is basis Dynamic programming, another important area in algorithms.</p>

<p>Best way to learn about recursion is to solve recursion problem.</p>

<p><br /></p>

<h3 id="recusion-problems">Recusion problems</h3>

<h4 id="factorial">Factorial</h4>

<p>Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) … 1
Compute the result recursively (without loops).</p>

<p>factorial(1) → 1<br />
factorial(2) → 2<br />
factorial(3) → 6<br /></p>

<script src="http://ideone.com/e.js/XWZvBI" type="text/javascript"></script>

<p><br /></p>

<h4 id="total-bunnyears">Total BunnyEars</h4>

<p>We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).</p>

<p>bunnyEars(0) → 0<br />
bunnyEars(1) → 2<br />
bunnyEars(2) → 4<br /></p>

<script src="http://ideone.com/e.js/vrDEiY" type="text/javascript"></script>

<p><br /></p>

<h4 id="evenodd-bunnyears">Even/Odd BunnyEars</h4>

<p>We have bunnies standing in a line, numbered 1, 2, … The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we’ll say have 3 ears, because they each have a raised foot. Recursively return the number of “ears” in the bunny line 1, 2, … n (without loops or multiplication).</p>

<p>bunnyEars2(0) → 0<br />
bunnyEars2(1) → 2<br />
bunnyEars2(2) → 5<br /></p>

<script src="http://ideone.com/e.js/U92tnQ" type="text/javascript"></script>

<p><br /></p>

<h4 id="triangle">Triangle</h4>

<p>We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. </p>

<p>triangle(0) → 0<br />
triangle(1) → 1<br />
triangle(2) → 3<br /></p>

<script src="http://ideone.com/e.js/3qfqXz" type="text/javascript"></script>

<p><br /></p>

<h4 id="sum-of-digits">Sum of Digits</h4>

<p>Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).</p>

<p>sumDigits(126) → 9<br />
sumDigits(49) → 13<br />
sumDigits(12) → 3<br /></p>

<script src="http://ideone.com/e.js/AmFVVT" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-no-7">Count no 7</h4>

<p>Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). </p>

<p>count7(717) → 2<br />
count7(7) → 1<br />
count7(123) → 0<br /></p>

<script src="http://ideone.com/e.js/QX5h4w" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-x-in-string">Count X in String</h4>

<p>Given a string, compute recursively (no loops) the number of lowercase ‘x’ chars in the string. </p>

<p>countX(“xxhixx”) → 4 <br />
countX(“xhixhix”) → 3<br />
countX(“hi”) → 0<br /></p>

<script src="http://ideone.com/e.js/DwK19H" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-hi">Count Hi</h4>

<p>Given a string, compute recursively (no loops) the number of times lowercase “hi” appears in the string. </p>

<p>countHi(“xxhixx”) → 1<br />
countHi(“xhixhix”) → 2<br />
countHi(“hi”) → 1<br /></p>

<script src="http://ideone.com/e.js/vGNoFy" type="text/javascript"></script>

<p><br /></p>

<h4 id="change-xy-string">Change XY String</h4>

<p>Given a string, compute recursively (no loops) a new string where all the lowercase ‘x’ chars have been changed to ‘y’ chars.</p>

<p>changeXY(“codex”) → “codey”<br />
changeXY(“xxhixx”) → “yyhiyy”<br />
changeXY(“xhixhix”) → “yhiyhiy”<br /></p>

<p>public String changeXY(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="change-pi">Change PI</h4>

<p>Given a string, compute recursively (no loops) a new string where all appearances of “pi” have been replaced by “3.14”. </p>

<p>changePi(“xpix”) → “x3.14x”<br />
changePi(“pipi”) → “3.143.14”<br />
changePi(“pip”) → “3.14p”<br /></p>

<p>public String changePi(String str) {</p>

<p>}
<br /></p>

<h4 id="no-x-in-string">No X in String</h4>

<p>Given a string, compute recursively a new string where all the ‘x’ chars have been removed. </p>

<p>noX(“xaxb”) → “ab” <br />
noX(“abc”) → “abc”<br />
noX(“xx”) → ““<br /></p>

<p>public String noX(String str) {</p>

<p>}
<br /></p>

<h4 id="no-star-in-string">No Star in String</h4>

<p>Given a string, compute recursively a new string where all the adjacent chars are now separated by a “*”. </p>

<p>allStar(“hello”) → “h*e*l*l*o”<br />
allStar(“abc”) → “a*b*c”<br />
allStar(“ab”) → “a*b”<br /></p>

<p>public String allStar(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="substring">Substring</h4>

<p>It’s also convenient to have a function that, given a sentence, selects a small portion
of a sentence for us. For example, if we had the sentence:<br />
(russians declare war rington vodka to be excellent)</p>

<p>We could imagine using a hypothetical subsentence function that would let us pull out the first few words
of that sentence, if we tell it where to start and stop the selection:<br />
(subsentence ‘(russians declare war rington vodka to be excellent) 1 3)<br />
(russians declare war)</p>

<p>(subsentence ‘(no shirt no shoes no service) 4 4)<br />
(shoes)<br /></p>

<p>Write the function subsentence, which takes in three arguments: a sentence, the starting endpoint,
and the stopping endpoint. It should return back a sentence that includes the words between the start and
stop endpoints. Assume that the user is nice, and won’t give weird input. In Scheme notation, we mean
that we can assume (&lt;= 1 start stop (count sent)) is always true.</p>

<script src="http://ideone.com/e.js/EsxIJg" type="text/javascript"></script>

<p><br /></p>

<h4 id="string-permutation-non-repeating">String permutation non repeating</h4>

<p>Write all the non repeating permutations of given string i.e.</p>

<p>For string ABC<br />
ABC, ACB, BAC, BCA, CAB, CBA</p>

<p>Detailed solution with explanation can be found <a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" target="_blank">here</a></p>

<p><img class="left" src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif"></p>

<p><br /></p>

<script src="http://ideone.com/e.js/yvIH1b" type="text/javascript"></script>

<p>This code will output reapeated string if input string given is say ‘ABA’.<br />
To avoid that store all the strings generated in array/hash and compare everytime for uniquesness.
<br /></p>

<h4 id="power-x-n">Power (x, n)</h4>

<p>Write a C program to calculate pow(x, n)</p>

<p>For e.g <br /></p>

<script type="math/tex; mode=display">\begin{align}
  2^4 = 16
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
2^3 = 8
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-2} = 0.25
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-4} = 0.0625
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
      -2^{-3} = -0.125
\end{align}</script>

<p><strong>Solution</strong>
Idea is that if power is even then multiply evenly i.e. </p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>4</mn></msup></math> will be (2 * 2) * (2 * 2)</p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>3</mn></msup></math> will be 2 * (2  * 2)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>Power (x, n)</span>  <a href='http://ideone.com/BpMEJ8' target='_blank'>Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h /&gt;</span>&lt;/p&gt;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>&lt;p&gt;<span class="predefined-type">float</span> power(<span class="predefined-type">float</span> x, <span class="predefined-type">int</span> n)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">float</span> temp;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">if</span>( n == <span class="integer">0</span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    temp = power(x, n/<span class="integer">2</span>);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">if</span> ((n % <span class="integer">2</span>) == <span class="integer">0</span>)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> temp&lt;em&gt;temp;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">else</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">if</span>(n &amp;gt; <span class="integer">0</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">return</span> x&lt;/em&gt;temp*temp;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">else</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">return</span> (temp * temp) / x;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>}&lt;/p&gt;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>&lt;p&gt;<span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>{
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="predefined-type">float</span> res = power(<span class="integer">2</span>, <span class="integer">4</span>);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    printf(<span class="error">“</span>Result <span class="integer">2</span>^<span class="integer">4</span> = %f <span class="error">\</span>n<span class="error">”</span>, res);&lt;/p&gt;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>&lt;pre&gt;&lt;code&gt;res = power(<span class="integer">2</span>, <span class="integer">3</span>);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^3 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>res = power(<span class="integer">2</span>, -<span class="integer">2</span>);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^-2 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>res = power(<span class="integer">2</span>, -<span class="integer">4</span>);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^-4 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>res = power(-<span class="integer">2</span>, -<span class="integer">3</span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^4 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span><span class="keyword">return</span> <span class="integer">0</span>; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

]]></content>
  </entry>
  
</feed>
