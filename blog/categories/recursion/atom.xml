<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Recursion | Learnings]]></title>
  <link href="http://learnwrite.github.io/blog/categories/recursion/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-11-27T01:40:11-08:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trie and Trees]]></title>
    <link href="http://learnwrite.github.io/blog/2013/11/26/trie-and-trees/"/>
    <updated>2013-11-26T23:18:00-08:00</updated>
    <id>http://learnwrite.github.io/blog/2013/11/26/trie-and-trees</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#trie-problems">Trie Problems</a></li>
  <li><a href="#trie-explanation">Trie explanation</a></li>
  <li><a href="#trie-code">Trie Code</a></li>
  <li><a href="#infix-to-postfix">Infix to Postfix</a></li>
  <li><a href="#postfix-to-infix">Postfix to Infix</a></li>
</ul>

<p>This article is about Trie and Trees data structure.</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png"/>
  
  <h2>trie</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <strong>trie</strong>, also called <strong>digital tree</strong> and sometimes <strong>radix tree</strong> or <strong>prefix tree</strong> (as they can be searched by prefixes), is an <a href="http://en.wikipedia.org/wiki/Ordered_tree_data_structure" title="Ordered tree data structure" class="mw-redirect">ordered tree</a> <a href="http://en.wikipedia.org/wiki/Data_structure" title="Data structure">data structure</a> that is used to store a <a href="http://en.wikipedia.org/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">dynamic set</a> or <a href="http://en.wikipedia.org/wiki/Associative_array" title="Associative array">associative array</a> where the keys are usually <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">strings</a>. Unlike a <a href="http://en.wikipedia.org/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common <a href="http://en.wikipedia.org/wiki/Prefix" title="Prefix">prefix</a> of the string associated with that node, and the root is associated with the <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">empty string</a>. Values are normally not associated with every node, only with leaves and some inner nodes that correspond to keys of interest. For the space-optimized presentation of prefix tree, see <a href="http://en.wikipedia.org/wiki/Compact_prefix_tree" title="Compact prefix tree" class="mw-redirect">compact prefix tree</a>.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Trie">Read more</a>
</div>
</p>

<p><br /></p>

<p>Trie is one of the most important data structure for autocomplete.</p>

<h3 id="trie-problems">Trie Problems</h3>

<p>Various problems on Trie can be found <a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=usingTries" target="_blnk">here</a></p>

<h3 id="trie-explanation">Trie explanation</h3>

<p>Trie code implementation is based on this <a href="https://www.dropbox.com/s/tg94q18u1t86y23/Trie.pdf" target="_blank">article.</a></p>

<h3 id="trie-code">Trie Code</h3>

<p>trie.h</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">typedef</span> <span style="color:#0a8;font-weight:bold">int</span> trieValueT;
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#080;font-weight:bold">typedef</span> <span style="color:#080;font-weight:bold">struct</span> trieNodeTag {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#0a8;font-weight:bold">char</span> key;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#0a8;font-weight:bold">int</span> words;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#0a8;font-weight:bold">int</span> prefix;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    trieValueT value;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#080;font-weight:bold">struct</span> trieNodeTag *next, *children;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>} trieNodeT;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#080;font-weight:bold">typedef</span> <span style="color:#080;font-weight:bold">struct</span> trieCDT {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    trieNodeT *root;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>} trieCDT;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#080;font-weight:bold">typedef</span> <span style="color:#080;font-weight:bold">struct</span> trieCDT *trieADT;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#777">// Functions</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="color:#088;font-weight:bold">void</span> trieCreate(trieCDT *trie);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#088;font-weight:bold">void</span> trieAdd(trieNodeT *trie, <span style="color:#0a8;font-weight:bold">char</span> *key, <span style="color:#0a8;font-weight:bold">int</span> value);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>trieNodeT* addChild(<span style="color:#0a8;font-weight:bold">char</span> key);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="color:#0a8;font-weight:bold">int</span> trieIsMember(trieCDT trie, <span style="color:#0a8;font-weight:bold">char</span> keys[]);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="color:#0a8;font-weight:bold">int</span> totalStringsWithPrefix(trieCDT trie, <span style="color:#0a8;font-weight:bold">char</span> keys[]);
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="color:#088;font-weight:bold">void</span> trieDestroy(trieNodeT *root);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="color:#088;font-weight:bold">void</span> test1();
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="color:#088;font-weight:bold">void</span> startTesting();
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="color:#088;font-weight:bold">void</span> startTestingFromFile(<span style="color:#0a8;font-weight:bold">char</span>** stdip_v);
</pre></div>
</div>
</div>

<p><br /></p>

<p>trie.c</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdlib.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&quot;trie.h&quot;</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span style="color:#777">// To enable debug messages uncomment #define</span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span style="color:#579">#define</span> TEST <span style="color:#00D">1</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span style="color:#777">// To test trie by providing input from file, uncomment 'TESTFROMFILE'</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span style="color:#777">// Compile code and while executing provide file name at command line</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span><span style="color:#777">// For e.g. &gt; ./a.out ipFile.txt</span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#777">//</span>
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span style="color:#777">//#define TESTFROMFILE 1</span>
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span style="color:#777">//</span>
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span style="color:#777">// To enable debug messages uncomment 'DEBUG'</span>
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span><span style="color:#777">//#define DEBUG 1</span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span><span style="color:#579">#ifdef</span> DEBUG
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span><span style="color:#579">#  define</span> D(x) x
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span><span style="color:#579">#else</span>
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span style="color:#579">#  define</span> D(x)
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span style="color:#579">#endif</span>
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span><span style="color:#0a8;font-weight:bold">int</span> main(<span style="color:#0a8;font-weight:bold">int</span> argc, <span style="color:#0a8;font-weight:bold">char</span>* argv[])
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>{
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>    <span style="color:#579">#ifdef</span> TEST
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>        startTesting();
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>    <span style="color:#579">#endif</span>
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>    <span style="color:#579">#ifdef</span> TESTFROMFILE
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>        startTestingFromFile(argv);
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    <span style="color:#579">#endif</span>
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span><span style="color:#777">// Create root node of trie</span>
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span><span style="color:#088;font-weight:bold">void</span> trieCreate(trieCDT *trie)
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>{
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>    trie-&gt;root = (trieNodeT*)calloc(<span style="color:#00D">1</span>,<span style="color:#080;font-weight:bold">sizeof</span>(trieNodeT));
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (trie-&gt;root == <span style="color:#069">NULL</span>) {
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Can not alloc memory</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>    }
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span>
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>    trie-&gt;root-&gt;key = <span style="color:#D20">'\0'</span>;
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>    trie-&gt;root-&gt;value = -<span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>    trie-&gt;root-&gt;next = <span style="color:#069">NULL</span>;
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>    trie-&gt;root-&gt;children = <span style="color:#069">NULL</span>;
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>}
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span><span style="color:#777">// This is recursive function for adding node in trie</span>
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span><span style="color:#777">// It covers 3 cases</span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span style="color:#777">// Case 1: When only root node is present in a trie. In this</span>
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span style="color:#777">//         case keep on adding node one level after another.</span>
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span><span style="color:#777">//</span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span><span style="color:#777">//         If input given is &quot;Good&quot; and if 'G' is not found then</span>
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span><span style="color:#777">//         insert 'G' and return 'G' node from where next insertion</span>
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span><span style="color:#777">//         has to be done as we have already found there is no</span>
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span><span style="color:#777">//         other 'G' exist.</span>
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span><span style="color:#777">//</span>
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span><span style="color:#777">// Case 2: When matching key node is already found return the matching</span>
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span><span style="color:#777">//         node and increment key</span>
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span><span style="color:#777">//</span>
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span><span style="color:#777">// Case 3: When key does not match to existing children i.e. for</span>
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span><span style="color:#777">//         &quot;abcd&quot;, &quot;abef&quot; and &quot;abgh&quot;</span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span><span style="color:#777">//         .  ----&gt; root</span>
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span><span style="color:#777">//         |</span>
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span><span style="color:#777">//         a</span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span style="color:#777">//         |</span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span><span style="color:#777">//         b</span>
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span><span style="color:#777">//         |</span>
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span><span style="color:#777">//         c ===&gt; e ===&gt; g        (LL, children of b)</span>
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span><span style="color:#777">//         |      |      |</span>
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span><span style="color:#777">//         d      f      h</span>
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span><span style="color:#088;font-weight:bold">void</span> trieAdd(trieNodeT* trie, <span style="color:#0a8;font-weight:bold">char</span> *key, <span style="color:#0a8;font-weight:bold">int</span> value) {
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>    <span style="color:#777">// Get root of children</span>
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (key == <span style="color:#069">NULL</span>) {
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (trie-&gt;children == <span style="color:#069">NULL</span> &amp;&amp; trie-&gt;next == <span style="color:#069">NULL</span>) {
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>        <span style="color:#777">// Case 1</span>
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>        trieNodeT* child = addChild(*key);
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>        trie-&gt;children = child;
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>        <span style="color:#080;font-weight:bold">if</span> (*key == <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>            child-&gt;value = value;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>            child-&gt;words++;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>            <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>        }
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>        <span style="color:#080;font-weight:bold">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>    }
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>    trieNodeT* level = trie-&gt;children;
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>    trieNodeT* current;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>    <span style="color:#080;font-weight:bold">for</span> (current = level; current != <span style="color:#069">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>        <span style="color:#777">// Case 2</span>
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>        <span style="color:#080;font-weight:bold">if</span> (current-&gt;key == *key) {
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>            current-&gt;prefix++;
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>            <span style="color:#080;font-weight:bold">if</span> (*key == <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>                current-&gt;words++;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>                <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>            }
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>            <span style="color:#080;font-weight:bold">return</span> trieAdd(current, ++key, value);
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>        }
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>        <span style="color:#777">// This is last element in LL and key is not found</span>
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>        <span style="color:#777">// For e.g. for &quot;abc&quot; and &quot;abd&quot;, c and d should be</span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span>        <span style="color:#777">// child of b.</span>
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>        <span style="color:#777">// Since, c != d, Append d to c in LL signifying they</span>
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>        <span style="color:#777">// are both child of 'b' and are on same level</span>
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>        <span style="color:#777">//</span>
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>        <span style="color:#777">// Case 3</span>
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>        <span style="color:#080;font-weight:bold">if</span> (current-&gt;next == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>            <span style="color:#777">//Add key</span>
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>            trieNodeT* child = addChild(*key);
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>            current-&gt;next = child;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>            <span style="color:#080;font-weight:bold">if</span> (*key == <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>                child-&gt;words++;
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>                child-&gt;value = value;
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>                <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>            }
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>            <span style="color:#080;font-weight:bold">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>        }
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>    }
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>}
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>trieNodeT* addChild(<span style="color:#0a8;font-weight:bold">char</span> key)
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>{
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>    trieNodeT* child = (trieNodeT*)calloc(<span style="color:#00D">1</span>,<span style="color:#080;font-weight:bold">sizeof</span>(trieNodeT));
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>    <span style="color:#080;font-weight:bold">if</span> (child == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Can not alloc memory</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>        <span style="color:#080;font-weight:bold">return</span> <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    }
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>    child-&gt;key = key;
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>    child-&gt;value = -<span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    child-&gt;next = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>    child-&gt;children = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    child-&gt;prefix = <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>    child-&gt;words = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>    <span style="color:#080;font-weight:bold">return</span> child;
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>}
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>
<span class="line-numbers"><a href="#n153" name="n153">153</a></span><span style="color:#0a8;font-weight:bold">int</span> totalStringsWithPrefix(trieCDT trie, <span style="color:#0a8;font-weight:bold">char</span> keys[])
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>{
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>    trieNodeT *level = trie.root-&gt;children;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>    <span style="color:#080;font-weight:bold">while</span> (keys != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>        trieNodeT *found = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>        trieNodeT *current;
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>        <span style="color:#080;font-weight:bold">for</span> (current = level; current != <span style="color:#069">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>            <span style="color:#080;font-weight:bold">if</span> (current-&gt;key == *keys) {
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>                found = current;
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>                <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>            }
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>        }
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>        <span style="color:#080;font-weight:bold">if</span> (found == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>            <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>        } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (*(keys + <span style="color:#00D">1</span>)  == <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>            <span style="color:#080;font-weight:bold">return</span> found-&gt;prefix;
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>        }
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>        level = found -&gt; children;
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>        keys++;
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>    }
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>}
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span><span style="color:#0a8;font-weight:bold">int</span> trieIsMember(trieCDT trie, <span style="color:#0a8;font-weight:bold">char</span> keys[])
<span class="line-numbers"><a href="#n181" name="n181">181</a></span>{
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>    trieNodeT *level = trie.root-&gt;children;
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>    <span style="color:#080;font-weight:bold">while</span> (keys != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n185" name="n185">185</a></span>        trieNodeT *found = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>        trieNodeT *current;
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>
<span class="line-numbers"><a href="#n188" name="n188">188</a></span>        <span style="color:#080;font-weight:bold">for</span> (current = level; current != <span style="color:#069">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>            <span style="color:#080;font-weight:bold">if</span> (current-&gt;key == *keys) {
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>                found = current;
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>                <span style="color:#080;font-weight:bold">break</span>;
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>            }
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>        }
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>
<span class="line-numbers"><a href="#n195" name="n195">195</a></span>        <span style="color:#080;font-weight:bold">if</span> (found == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>            <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>        } <span style="color:#080;font-weight:bold">else</span> <span style="color:#080;font-weight:bold">if</span> (*keys == <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>            <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">1</span>;
<span class="line-numbers"><a href="#n199" name="n199">199</a></span>        }
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>        level = found -&gt; children;
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>        keys++;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>    }
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>
<span class="line-numbers"><a href="#n204" name="n204">204</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>}
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>
<span class="line-numbers"><a href="#n207" name="n207">207</a></span><span style="color:#088;font-weight:bold">void</span> trieDestroy(trieNodeT * root)
<span class="line-numbers"><a href="#n208" name="n208">208</a></span>{
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>    <span style="color:#080;font-weight:bold">if</span> (root-&gt;children == <span style="color:#069">NULL</span> &amp;&amp; root-&gt;next == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>        D(printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Destroying %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, root-&gt;value));
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>        free (root);
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>    }
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>    <span style="color:#777">// If root have next and children free them first</span>
<span class="line-numbers"><a href="#n216" name="n216">216</a></span>    <span style="color:#080;font-weight:bold">if</span> (root-&gt;next != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>        trieDestroy(root-&gt;next);
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>    }
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (root-&gt;children != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>        trieDestroy(root-&gt;children);
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>    }
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>
<span class="line-numbers"><a href="#n224" name="n224">224</a></span><span style="color:#579">#ifdef</span> DEBUG
<span class="line-numbers"><a href="#n225" name="n225">225</a></span>    <span style="color:#080;font-weight:bold">if</span> (root-&gt;key != <span style="color:#D20">'\0'</span>) {
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Destroying %c</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, root-&gt;key);
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Destroying Root %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, root-&gt;value);
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>    }
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span><span style="color:#579">#endif</span>
<span class="line-numbers"><a href="#n231" name="n231">231</a></span>
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>    free (root);
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>}
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>
<span class="line-numbers"><a href="#n235" name="n235">235</a></span><span style="color:#088;font-weight:bold">void</span> test1()
<span class="line-numbers"><a href="#n236" name="n236">236</a></span>{
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>    <span style="color:#0a8;font-weight:bold">char</span> s[] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ABCD</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>    <span style="color:#0a8;font-weight:bold">char</span> s1[] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ABCDE</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>    trieCDT trie;
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>    trieCreate(&amp;trie);
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>    trieAdd(trie.root, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ABCD</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">20</span>);
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>    trieAdd(trie.root, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ABCDE</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">30</span>);
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>    <span style="color:#080;font-weight:bold">if</span> (trieIsMember(trie, s)) {
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Found member 'ABCD'</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>    }
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>    i = totalStringsWithPrefix(trie, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ABC</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Total words with prefix 'ABC' %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>    trieDestroy(trie.root);
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>}
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>
<span class="line-numbers"><a href="#n255" name="n255">255</a></span><span style="color:#088;font-weight:bold">void</span> startTesting()
<span class="line-numbers"><a href="#n256" name="n256">256</a></span>{
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>    test1();
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>}
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span><span style="color:#088;font-weight:bold">void</span> startTestingFromFile(<span style="color:#0a8;font-weight:bold">char</span>** stdip_v)
<span class="line-numbers"><a href="#n261" name="n261">261</a></span>{
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>    FILE *fp = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>    <span style="color:#0a8;font-weight:bold">char</span> key[<span style="color:#00D">50</span>];
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>    trieCDT trie;
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>    fp = fopen(stdip_v[<span style="color:#00D">1</span>], <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n268" name="n268">268</a></span>    <span style="color:#080;font-weight:bold">if</span>(fp == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>        fprintf(stderr, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Can not read file!!</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>    }
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>    trieCreate(&amp;trie);
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>
<span class="line-numbers"><a href="#n275" name="n275">275</a></span>    <span style="color:#080;font-weight:bold">while</span>(fscanf(fp, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%s</span><span style="color:#710">&quot;</span></span>, key) != <span style="color:#069">EOF</span>) {
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>        trieAdd(trie.root, key, i);
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>        i++;
<span class="line-numbers"><a href="#n278" name="n278">278</a></span>
<span class="line-numbers"><a href="#n279" name="n279">279</a></span>        <span style="color:#080;font-weight:bold">if</span>(!trieIsMember(trie, key)) {
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>            printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Key '%s' NOT found in trie</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, key);
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>        }
<span class="line-numbers"><a href="#n282" name="n282">282</a></span>    }
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Total words inserted in trie %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>    i = totalStringsWithPrefix(trie, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Abe</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>    printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Total prefixs with 'Abe' %d</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>    trieDestroy(trie.root);
<span class="line-numbers"><a href="#n291" name="n291">291</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="infix-to-postfix">Infix to Postfix</h3>

<h3 id="postfix-to-infix">Postfix to Infix</h3>

<iframe width="420" height="315" src="http://learnwrite.github.io//www.youtube.com/embed/OlRENYiiIiw" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://learnwrite.github.io/blog/2013/11/18/recursion/"/>
    <updated>2013-11-18T22:18:00-08:00</updated>
    <id>http://learnwrite.github.io/blog/2013/11/18/recursion</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recusion-problems">Recusion problems</a>    <ul>
      <li><a href="#factorial">Factorial</a></li>
      <li><a href="#total-bunnyears">Total BunnyEars</a></li>
      <li><a href="#evenodd-bunnyears">Even/Odd BunnyEars</a></li>
      <li><a href="#triangle">Triangle</a></li>
      <li><a href="#sum-of-digits">Sum of Digits</a></li>
      <li><a href="#count-no-7">Count no 7</a></li>
      <li><a href="#count-x-in-string">Count X in String</a></li>
      <li><a href="#count-hi">Count Hi</a></li>
      <li><a href="#change-xy-string">Change XY String</a></li>
      <li><a href="#change-pi">Change PI</a></li>
      <li><a href="#no-x-in-string">No X in String</a></li>
      <li><a href="#no-star-in-string">No Star in String</a></li>
      <li><a href="#substring">Substring</a></li>
      <li><a href="#string-permutation-non-repeating">String permutation non repeating</a></li>
    </ul>
  </li>
</ul>

<p>This article is all about recusion.</p>

<p><div class="wikipedia">
  
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/6/62/Droste.jpg/220px-Droste.jpg"/>
  
  <h2>Recursion</h2>
  <div>
    <p><strong>Recursion</strong> is the process of repeating items in a <a href="http://en.wikipedia.org/wiki/Self-similarity" title="Self-similarity">self-similar</a> way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from <a href="http://en.wikipedia.org/wiki/Linguistics" title="Linguistics">linguistics</a> to <a href="http://en.wikipedia.org/wiki/Logic" title="Logic">logic</a>. The most common application of recursion is in <a href="http://en.wikipedia.org/wiki/Mathematics" title="Mathematics">mathematics</a> and <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, in which it refers to a method of defining <a href="http://en.wikipedia.org/wiki/Function_(mathematics)" title="Function (mathematics)">functions</a> in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Recursion">Read more</a>
</div>
</p>

<p><br /></p>

<p>Recursion is basis Dynamic programming, another important area in algorithms.</p>

<p>Best way to learn about recursion is to solve recursion problem.</p>

<p><br /></p>

<h3 id="recusion-problems">Recusion problems</h3>

<h4 id="factorial">Factorial</h4>

<p>Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) … 1
Compute the result recursively (without loops).</p>

<p>factorial(1) → 1<br />
factorial(2) → 2<br />
factorial(3) → 6<br /></p>

<script src="http://ideone.com/e.js/XWZvBI" type="text/javascript"></script>

<p><br /></p>

<h4 id="total-bunnyears">Total BunnyEars</h4>

<p>We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).</p>

<p>bunnyEars(0) → 0<br />
bunnyEars(1) → 2<br />
bunnyEars(2) → 4<br /></p>

<script src="http://ideone.com/e.js/vrDEiY" type="text/javascript"></script>

<p><br /></p>

<h4 id="evenodd-bunnyears">Even/Odd BunnyEars</h4>

<p>We have bunnies standing in a line, numbered 1, 2, … The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we’ll say have 3 ears, because they each have a raised foot. Recursively return the number of “ears” in the bunny line 1, 2, … n (without loops or multiplication).</p>

<p>bunnyEars2(0) → 0<br />
bunnyEars2(1) → 2<br />
bunnyEars2(2) → 5<br /></p>

<script src="http://ideone.com/e.js/U92tnQ" type="text/javascript"></script>

<p><br /></p>

<h4 id="triangle">Triangle</h4>

<p>We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. </p>

<p>triangle(0) → 0<br />
triangle(1) → 1<br />
triangle(2) → 3<br /></p>

<script src="http://ideone.com/e.js/3qfqXz" type="text/javascript"></script>

<p><br /></p>

<h4 id="sum-of-digits">Sum of Digits</h4>

<p>Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).</p>

<p>sumDigits(126) → 9<br />
sumDigits(49) → 13<br />
sumDigits(12) → 3<br /></p>

<script src="http://ideone.com/e.js/AmFVVT" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-no-7">Count no 7</h4>

<p>Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). </p>

<p>count7(717) → 2<br />
count7(7) → 1<br />
count7(123) → 0<br /></p>

<script src="http://ideone.com/e.js/QX5h4w" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-x-in-string">Count X in String</h4>

<p>Given a string, compute recursively (no loops) the number of lowercase ‘x’ chars in the string. </p>

<p>countX(“xxhixx”) → 4 <br />
countX(“xhixhix”) → 3<br />
countX(“hi”) → 0<br /></p>

<script src="http://ideone.com/e.js/DwK19H" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-hi">Count Hi</h4>

<p>Given a string, compute recursively (no loops) the number of times lowercase “hi” appears in the string. </p>

<p>countHi(“xxhixx”) → 1<br />
countHi(“xhixhix”) → 2<br />
countHi(“hi”) → 1<br /></p>

<script src="http://ideone.com/e.js/vGNoFy" type="text/javascript"></script>

<p><br /></p>

<h4 id="change-xy-string">Change XY String</h4>

<p>Given a string, compute recursively (no loops) a new string where all the lowercase ‘x’ chars have been changed to ‘y’ chars.</p>

<p>changeXY(“codex”) → “codey”<br />
changeXY(“xxhixx”) → “yyhiyy”<br />
changeXY(“xhixhix”) → “yhiyhiy”<br /></p>

<p>public String changeXY(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="change-pi">Change PI</h4>

<p>Given a string, compute recursively (no loops) a new string where all appearances of “pi” have been replaced by “3.14”. </p>

<p>changePi(“xpix”) → “x3.14x”<br />
changePi(“pipi”) → “3.143.14”<br />
changePi(“pip”) → “3.14p”<br /></p>

<p>public String changePi(String str) {</p>

<p>}
<br /></p>

<h4 id="no-x-in-string">No X in String</h4>

<p>Given a string, compute recursively a new string where all the ‘x’ chars have been removed. </p>

<p>noX(“xaxb”) → “ab” <br />
noX(“abc”) → “abc”<br />
noX(“xx”) → ““<br /></p>

<p>public String noX(String str) {</p>

<p>}
<br /></p>

<h4 id="no-star-in-string">No Star in String</h4>

<p>Given a string, compute recursively a new string where all the adjacent chars are now separated by a “*”. </p>

<p>allStar(“hello”) → “h*e*l*l*o”<br />
allStar(“abc”) → “a*b*c”<br />
allStar(“ab”) → “a*b”<br /></p>

<p>public String allStar(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="substring">Substring</h4>

<p>It’s also convenient to have a function that, given a sentence, selects a small portion
of a sentence for us. For example, if we had the sentence:<br />
(russians declare war rington vodka to be excellent)</p>

<p>We could imagine using a hypothetical subsentence function that would let us pull out the first few words
of that sentence, if we tell it where to start and stop the selection:<br />
(subsentence ‘(russians declare war rington vodka to be excellent) 1 3)<br />
(russians declare war)</p>

<p>(subsentence ‘(no shirt no shoes no service) 4 4)<br />
(shoes)<br /></p>

<p>Write the function subsentence, which takes in three arguments: a sentence, the starting endpoint,
and the stopping endpoint. It should return back a sentence that includes the words between the start and
stop endpoints. Assume that the user is nice, and won’t give weird input. In Scheme notation, we mean
that we can assume (&lt;= 1 start stop (count sent)) is always true.</p>

<script src="http://ideone.com/e.js/EsxIJg" type="text/javascript"></script>

<p><br /></p>

<h4 id="string-permutation-non-repeating">String permutation non repeating</h4>

<p>Write all the non repeating permutations of given string i.e.</p>

<p>For string ABC<br />
ABC, ACB, BAC, BCA, CAB, CBA</p>

<p>Detailed solution with explanation can be found <a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" target="_blank">here</a></p>

<p><img class="left" src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif"></p>

<p><br /></p>

<script src="http://ideone.com/e.js/yvIH1b" type="text/javascript"></script>

<p>This code will output reapeated string if input string given is say ‘ABA’.<br />
To avoid that store all the strings generated in array/hash and compare everytime for uniquesness.
<br /></p>
]]></content>
  </entry>
  
</feed>
