<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: recursion | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/recursion/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-12-31T12:55:31-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming]]></title>
    <link href="http://distkeys.com/blog/2014/11/27/dynamic-programming/"/>
    <updated>2014-11-27T18:32:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/11/27/dynamic-programming</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</a>    <ul>
      <li><a href="#combinational-search-and-optimization-i">Combinational Search and Optimization I</a></li>
      <li><a href="#combinational-search-and-optimization-ii">Combinational Search and Optimization II</a></li>
      <li><a href="#dynamic-programming">Dynamic Programming</a></li>
    </ul>
  </li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#coin-changing-problem---total-ways">Coin changing problem - Total ways</a></li>
      <li><a href="#coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</a></li>
    </ul>
  </li>
  <li><a href="#include-stdioh">include <stdio.h /></a></li>
</ul>

<p>{% wikipedia Dynamic_programming %}</p>

<!-- more -->

<p><br /></p>

<h2 id="combinational-search-and-dynamic-programming">Combinational Search and Dynamic Programming</h2>

<p>Recently, I came across these three videos about the <em>Combinational Search and Dynamic Programming</em> and I think these videos explains the complexity in great simplicity. I highly recommend for one who is beginner and want to learn the fundamentals.</p>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-i">Combinational Search and Optimization I</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/nSPBb71RS4c?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="combinational-search-and-optimization-ii">Combinational Search and Optimization II</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/PPFl2I6YVUo?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h3 id="dynamic-programming">Dynamic Programming</h3>

<iframe width="560" height="315" src="http://distkeys.com//www.youtube.com/embed/6h6Fi6AQiRM?list=PL233EC0961AB3369C" frameborder="0" allowfullscreen=""></iframe>

<p><br /> <br /></p>

<h2 id="problems">Problems</h2>

<h3 id="coin-changing-problem---total-ways">Coin changing problem - Total ways</h3>

<p>Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins doesn’t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.</p>

<p><br />
The first step is to come up with the simple recursive solution which solves this problem. Once that done we can map that problem to the dynamic problem(DP) solution.</p>

<blockquote>
  <p>For DP solution there are two ways top-down (with recursive called memoization technique) or bottom up (with iteration). </p>
</blockquote>

<p>This <a href="http://qr.ae/lAQbS" title="Dynamic programming approaches">article</a> explains about above quote in detail.</p>

<p>The recursive solution of this problem would look like this. If one have watched above videos, you would understand the logic or it is explained <a href="http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/" title="recursive code">here</a>. Till now, it is all same like any other source or web pages across internet for solution of this problem. But, soon it’s going to differ. </p>

<p>{% coderay lang:c linenos:true Coin change recursion http://ideone.com/XN6v0F Run Code %}
// Returns the count of ways we can sum  S[0…m-1] coins to get sum n
int count( int S[], int m, int n )
{
    // If n is 0 then there is 1 solution (do not include any coin)
    if (n == 0)
	return 1;</p>

<pre><code>// If n is less than 0 then no solution exists
if (n &lt; 0)
return 0;

// If there are no coins and n is greater than 0, then no solution exist
if (m &lt;=0 &amp;&amp; n &gt;= 1)
return 0;

// count is sum of solutions (i) including S[m-1] (ii) excluding S[m-1]
return count( S, m - 1, n ) + count( S, m, n-S[m-1] ); } {% endcoderay %}
</code></pre>

<p><br /></p>

<p><a href="http://amzn.com/098478280X%20" title="cracking the coding interview">Cracking the coding interview</a> book also have same problem with below recursive solution. In this code S = {25, 10, 5, 1}</p>

<p>{% coderay lang:c linenos:true Coin change recursion http://ideone.com/XN6v0F Run Code %}
int getchange(int n, int denom)
{
    int next_denom = 0;</p>

<pre><code>switch(denom) {
case 25:
    next_denom = 10;
    break;

case 10:
    next_denom = 5;
    break;

case 5:
    next_denom = 1;
    break;

case 1:
    return 1;
}

int ways = 0;

for (int i = 0; i*denom &lt;= n; i++) {
ways += getchange(n - i*denom, next_denom);
}

return ways; } {% endcoderay %}
</code></pre>

<p><br /></p>

<p>As explained in <a href="http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming" title="DP video">dynamic programming video</a> above, lets convert this program into dynamic programming program. This is a top down approach.</p>

<p>{% coderay lang:c linenos:true Coin change recursion http://ideone.com/XN6v0F Run Code %}</p>

<p>define N 50
define CHANGESIZE 4</p>

<p>int changeSize;</p>

<p>// Sum upto 50
int table[N + 1][CHANGESIZE + 1];</p>

<p>// Converted top down DP version of count()
int countDP(int S[], int m, int n)
{
    if (n == 0) {
	table[n][m] = 1;
	return table[n][m];
    }
    if (n &lt; 0) {
	return 0;
    }</p>

<pre><code>if (m &lt;=0 &amp;&amp; n &gt;= 1)
return 0;

if (n-S[m-1] &lt; 0) {
return 0;
}

if (table[n][m-1] == 0) {
table[n][m-1] = countDP(S, m-1, n);
}

if (table[n-S[m-1]][m] == 0) {
table[n-S[m-1]][m] = countDP(S, m, n-S[m-1]);
}

return (table[n][m-1] + table[n-S[m-1]][m]); }
</code></pre>

<p>void inittable()
{
    for (int i = 0; i &lt; N + 1 ; i++) {
	for (int j = 0; j &lt; changeSize + 1; j++) {
	    table[i][j] = 0;
	}
    }</p>

<pre><code>return; }
</code></pre>

<p>int main()
{
    int ways = 0;
    int change<a href="http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming" title="DP video">4</a> = {25, 10, 5, 1};
    changeSize = sizeof(change)/sizeof(change[0]);</p>

<pre><code>for (int sum = 1; sum &lt; 50; sum++) {
printf("Sum %d\n", sum);        
ways = countDP(change, changeSize, sum);
printf("CountDP = %d\n", ways);
printf("============\n\n");

inittable();
}

return 0; }
</code></pre>

<p>{% endcoderay %}</p>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

<h3 id="coin-changing-problem---minimum-ways">Coin changing problem - Minimum ways</h3>

<p>Given a list of N coins, their values (V1, V2, … , VN),
and the total sum S. Find the minimum number of coins the sum of which is
S (we can use as many coins of one type as we want), or report that it’s
not possible to select coins in such a way that they sum up to S.</p>

<p>This problem has been published at various sites including following with explanation in great detail</p>

<ul>
  <li><a href="http://www.topcoder.com/tc?d1=tutorials&amp;d2=dynProg&amp;module=Static" title="topcoder coin changing problem">Topcoder coin changing problem</a></li>
  <li><a href="http://www.bogotobogo.com/Algorithms/dynamic_programming.php" title="DP">Dynamic programming</a></li>
</ul>

<p>Topcode article explains the bottom up part very well. The idea here is to determine how many minimum coins are required for sum 1 then for sum 2 then for sum 3 and so on. </p>

<p><em>TopCoder article says</em></p>

<p>For a better understanding let’s take this example:<br />
Given coins with values 1, 3, and 5.<br />
And the sum S is set to be 11.<br /></p>

<p>First of all we mark that for state 0 (sum 0) we have found a solution with a minimum number of 0 coins. We then go to sum 1. First, we mark that we haven’t yet found a solution for this one (a value of Infinity would be fine). Then we see that only coin 1 is less than or equal to the current sum. Analyzing it, we see that for sum 1-V1= 0 we have a solution with 0 coins. Because we add one coin to this solution, we’ll have a solution with 1 coin for sum 1. It’s the only solution yet found for this sum. We write (save) it.</p>

<p>Then we proceed to the next state - sum 2. We again see that the only coin which is less or equal to this sum is the first coin, having a value of 1. The optimal solution found for sum (2-1) = 1 is coin 1. This coin 1 plus the first coin will sum up to 2, and thus make a sum of 2 with the help of only 2 coins. This is the best and only solution for sum 2.</p>

<p>Now we proceed to sum 3. We now have 2 coins which are to be analyzed - first and second one, having values of 1 and 3. Let’s see the first one. There exists a solution for sum 2 (3 - 1) and therefore we can construct from it a solution for sum 3 by adding the first coin to it. Because the best solution for sum 2 that we found has 2 coins, the new solution for sum 3 will have 3 coins. Now let’s take the second coin with value equal to 3. The sum for which this coin needs to be added to make 3 , is 0. We know that sum 0 is made up of 0 coins. Thus we can make a sum of 3 with only one coin - 3. We see that it’s better than the previous found solution for sum 3 , which was composed of 3 coins. We update it and mark it as having only 1 coin. The same we do for sum 4, and get a solution of 2 coins - 1+3. And so on.</p>

<p>I followed this explanation and tried to come up with the program which is as follows</p>

<p>{% coderay lang:c linenos:true Min coin change http://ideone.com/IXJL0d Run Code %}
//  Given a list of N coins, their values (V1, V2, … , VN),
//  and the total sum S. Find the minimum number of coins the sum of which is
//  S (we can use as many coins of one type as we want), or report that it’s
//  not possible to select coins in such a way that they sum up to S.</p>

<h1 id="include-stdioh">include <stdio.h /></h1>

<p>int mincount(int change[], int changeSize, int SUM)
{
    int table[SUM + 1];</p>

<pre><code>table[0] = 0;
int min = INT32_MAX;


for (int sum = 1; sum &lt;= SUM; sum++) {
for (int j = 0; j &lt; changeSize; j++) {
    // Pick first coin and substract with the sum
    // Check if sum is less than 0
    if (sum - change[j] &lt; 0) {
	continue;
    } else if (sum - change[j] == 0) {
	// This is the case when sum is either 1, 5, 10, 25
	// In this case mininum number of coin required is 1
	min = 1;
	break;
    }

    // This is case when we say sum is 3
    // In this case lets start with first coint which is 1
    // If we choose coint 1 then the sum left os 3 - 1 = 2
    // Given we are calculating for sum 3 means we have already
    // calculated for sum 2. So go to table for sum = 2 and
    // get the min number of ways sum 2 is computed.
    // Here i is the sum i.e. lets say as per our example
    // i = 3, j = 0
    // 1 + table[3 - change[0]];
    // 1 + table[3 - 1];
    // 1 + table[2];
    // 1 + 2 = 3
    // Sum 3 requires at least 3 coins {1, 1, 1}

    if (min &gt; (1 + table[sum - change[j]])) {
	min = 1 + table[sum - change[j]];
    }
}
table[sum] = min;
min = INT32_MAX;
}

for (int i = 0; i &lt;= SUM; i++) {
printf("SUM[%d]: %d\n", i, table[i]);
}

return table[SUM]; }
</code></pre>

<p>int main(int argc, const char * argv[])
{
    int change<a href="http://distkeys.com/blog/2014/11/27/dynamic-programming/#dynamic-programming" title="DP video">4</a> = {1, 5, 10, 25};
    int changeSize = sizeof(change)/sizeof(change[0]);
    int SUM = 16;</p>

<pre><code>printf("MinChange for sum %d = %d\n", SUM, mincount(change, changeSize, SUM));

return 0; } {% endcoderay %}
</code></pre>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curious Case Of Recursion]]></title>
    <link href="http://distkeys.com/blog/2014/06/18/curious-case-of-recursion/"/>
    <updated>2014-06-18T22:03:00-07:00</updated>
    <id>http://distkeys.com/blog/2014/06/18/curious-case-of-recursion</id>
    <content type="html"><![CDATA[
<p>Recursion has always been imaginative to me. How do I write the recursive function so that it solve the problem, what all cases it would uncover as recursion progress. As input value increases things gets complex and I am lost.</p>

<p>To understand it better I was looking around internet and I found very ordinary yet powerful statement.</p>

<p>{% blockquote %}
Functions can call other functions – this is a fact that most programmers know. Recursion is simply a special case where instead of calling another function, a function calls itself.
{% endblockquote %} </p>

<!-- more -->

<p>This is pretty good insight. This statement helps you to forget imaging the complex cases where you have high input value, what happens behind the scenes and so on.
<br /><br /></p>

<p><strong>Lets take an example</strong></p>

<p>Write a function, for a given number, print out all different ways to make this number, by using addition and any number equal to or smaller than this number and greater than zero. </p>

<p>For example, given a 5, we have the following different ways to make up 5:<br />
1st 1, 1, 1, 1, 1 <br />
2nd: 1, 4 <br />
3rd : 1, 1, 1, 2 <br />
4th : 1, 1, 3 <br />
5th : 2, 3 <br />
6th : 1, 2, 2 <br />
7th : 5 <br /></p>

<p>There are two ways of thinking about this problem<br />
1. 1 + 1 = 2 <br /> 
2. 2 = 1 + 1</p>

<p>You would be wondering they both look pretty same. They both are same when result matters but they are different in approach.</p>

<p><strong>Lets consider input as 3</strong> <br />
Using approach 1, 3 be written as 1 + 1 + 1<br />
But, using approach 2, 3 will be written as 3 = 1 + 2 and now how 2 can be written. Yes, 2 = 1 + 1</p>

<p>Finally, 3 = 1 + 2 = 1 + (1 + 1)<br />
              4 = 1 + 3 = 1 + (1 + 2) = 1 + (1 + ( 1 + 1))<br />
              and so on….</p>

<p>We can clearly see recursion pattern forming here. In this case now all we need to worry is given input just subtract 1 and call the same function again.</p>

<p>{% coderay lang:c linenos:true Recursion1 http://ideone.com/v0vZKf Run Code %}
 #include <iostream /></p>

<p>using namespace std;</p>

<p>void printSeq(int num, int a[], int opIndx,int s){
     if(num &lt;= 0){
         // Display the result
         for(int j=0;j&lt;opIndx;j++)
             cout«a[j]«”,”;
         cout«endl;
         return;
     }</p>

<pre><code> a[opIndx] = 1;
 // Call the function again, remember 3 = 1 + 2
 printSeq(num-1, a, opIndx+1, 1);  }
</code></pre>

<p>int main(){
     int a[5];
     printSeq(5,a,0,1);
     return 0;
 }
{% endcoderay %}</p>

<p>We just saw case 1 but there are other combinations of 5. Lets consider the next combinations which are<br />
 5 = 2 + (3). Later 3 will have its own combinations which don’t need to bother.<br />
 5 = 3 + (2)<br />
 5 = 4 + (1)<br />
 5 = 5 + (0)<br /></p>

<p>{% coderay lang:c linenos:true Combination http://ideone.com/AQrLwO Run Code %}
  #include <iostream /></p>

<p>using namespace std;</p>

<p>void printSeq(int num, int a[], int opIndx,int s){
      if(num &lt;= 0){
          //Display the output
          for(int j = 0; j &lt; opIndx; j++)
              cout « a[j] « ”,”;
          cout « endl;
          return;
      }</p>

<pre><code>  // s starts from 1 and later it will change to
  // 2, 3, 4, 5.
  // It is the case$
  // 5 = 2 + (3)
  // 5 = 3 + (2)
  // 5 = 4 + (1)
  // 5 = 5 + (0)
  for(int i = s; i &lt;= num; i++){
      a[opIndx] = i;
      printSeq(num-i, a, opIndx + 1, i);
  }   }   
</code></pre>

<p>int main(){
      int a[15];
      printSeq(5, a, 0, 1);
      return 0;
  }
{% endcoderay %}</p>

<p><br /><br /><br /><br />
<strong>References</strong> <br />
 <a href="http://www.reddit.com/r/learnprogramming/comments/135rdz/help_me_understand_recursion/">Recursion on reddit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trie and Trees]]></title>
    <link href="http://distkeys.com/blog/2013/11/26/trie-and-trees/"/>
    <updated>2013-11-26T23:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/26/trie-and-trees</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#trie-problems">Trie Problems</a></li>
  <li><a href="#trie-explanation">Trie explanation</a></li>
  <li><a href="#trie-code">Trie Code</a></li>
  <li><a href="#ifdef-debug">ifdef DEBUG</a></li>
  <li><a href="#ifdef-debug-1">ifdef DEBUG</a>    <ul>
      <li><a href="#infix-to-postfix">Infix to Postfix</a></li>
      <li><a href="#postfix-to-infix">Postfix to Infix</a>        <ul>
          <li><a href="#evaluate-postfix-expression">Evaluate Postfix expression</a></li>
        </ul>
      </li>
      <li><a href="#tree-problems">Tree Problems</a>        <ul>
          <li><a href="#find-bst-is-balanced-or-not">Find BST is balanced or not</a></li>
          <li><a href="#find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</a></li>
          <li><a href="#bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</a></li>
          <li><a href="#bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</a></li>
          <li><a href="#bst---morris-inorder-traversal">BST - Morris Inorder Traversal</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>This article is about Trie and Trees data structure.</p>

<p>{% wikipedia Trie %}</p>

<!-- more -->
<p><br /></p>

<p>Trie is one of the most important data structure for autocomplete.</p>

<h3 id="trie-problems">Trie Problems</h3>

<p>Various problems on Trie can be found <a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=usingTries" target="_blnk">here</a></p>

<h3 id="trie-explanation">Trie explanation</h3>

<p>Trie code implementation is based on this <a href="https://www.dropbox.com/s/tg94q18u1t86y23/Trie.pdf" target="_blank">article.</a></p>

<h3 id="trie-code">Trie Code</h3>

<p>{% coderay lang:c linenos:true Trie.h %}
typedef int trieValueT;</p>

<p>typedef struct trieNodeTag {
    char key;
    int words;
    int prefix;
    trieValueT value;
    struct trieNodeTag *next, *children;
} trieNodeT;</p>

<p>typedef struct trieCDT {
    trieNodeT *root;
} trieCDT;</p>

<p>typedef struct trieCDT *trieADT;</p>

<p>// Functions
void trieCreate(trieCDT <em>trie);
void trieAdd(trieNodeT *trie, char *key, int value);
trieNodeT</em> addChild(char key);
int trieIsMember(trieCDT trie, char keys[]);
int totalStringsWithPrefix(trieCDT trie, char keys[]);
void trieDestroy(trieNodeT *root);
void test1();
void startTesting();
void startTestingFromFile(char** stdip_v);
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true Trie.c http://ideone.com/AV5jKS Run Trie.c %}
#include <stdio.h>
#include <stdlib.h>
#include "trie.h"</stdlib.h></stdio.h></p>

<p>// To enable debug messages uncomment #define
#define TEST 1
// To test trie by providing input from file, uncomment ‘TESTFROMFILE’
// Compile code and while executing provide file name at command line
// For e.g. &gt; ./a.out ipFile.txt
//
//#define TESTFROMFILE 1
//
// To enable debug messages uncomment ‘DEBUG’
//#define DEBUG 1</p>

<h1 id="ifdef-debug">ifdef DEBUG</h1>
<p>#  define D(x) x
#else
#  define D(x)
#endif</p>

<p>int main(int argc, char* argv[])
{
    #ifdef TEST
        startTesting();
    #endif</p>

<pre><code>#ifdef TESTFROMFILE
    startTestingFromFile(argv);
#endif

return 0; }
</code></pre>

<p>// Create root node of trie
void trieCreate(trieCDT <em>trie)
{
    trie-&gt;root = (trieNodeT</em>)calloc(1,sizeof(trieNodeT));</p>

<pre><code>if (trie-&gt;root == NULL) {
printf("Can not alloc memory\n");
return;
}

trie-&gt;root-&gt;key = '\0';
trie-&gt;root-&gt;value = -1;
trie-&gt;root-&gt;next = NULL;
trie-&gt;root-&gt;children = NULL; }
</code></pre>

<p>// This is recursive function for adding node in trie
// It covers 3 cases
// Case 1: When only root node is present in a trie. In this
//         case keep on adding node one level after another.
//
//         If input given is “Good” and if ‘G’ is not found then
//         insert ‘G’ and return ‘G’ node from where next insertion
//         has to be done as we have already found there is no
//         other ‘G’ exist.
//
// Case 2: When matching key node is already found return the matching
//         node and increment key
//
// Case 3: When key does not match to existing children i.e. for
//         “abcd”, “abef” and “abgh”
//         .  —-&gt; root
//         |
//         a
//         |
//         b
//         |
//         c ===&gt; e ===&gt; g        (LL, children of b)
//         |      |      |
//         d      f      h</p>

<p>void trieAdd(trieNodeT* trie, char *key, int value) {</p>

<pre><code>// Get root of children
if (key == NULL) {
return;
} else if (trie-&gt;children == NULL &amp;&amp; trie-&gt;next == NULL) {

    // Case 1
trieNodeT* child = addChild(*key);
trie-&gt;children = child;

if (*key == '\0') {
    child-&gt;value = value;
    child-&gt;words++;
    return;
}

return trieAdd(child, ++key, value);
}

trieNodeT* level = trie-&gt;children;
trieNodeT* current;
for (current = level; current != NULL; current = current-&gt;next) {

// Case 2
if (current-&gt;key == *key) {
    current-&gt;prefix++;

    if (*key == '\0') {
	current-&gt;words++;
	return;
    }
    return trieAdd(current, ++key, value);
}

// This is last element in LL and key is not found
// For e.g. for "abc" and "abd", c and d should be
// child of b.
// Since, c != d, Append d to c in LL signifying they
// are both child of 'b' and are on same level
//
// Case 3
if (current-&gt;next == NULL) {
    //Add key
    trieNodeT* child = addChild(*key);
    current-&gt;next = child;

    if (*key == '\0') {
        child-&gt;words++;
	child-&gt;value = value;
	return;
    }

    return trieAdd(child, ++key, value);
}
} }
</code></pre>

<p>trieNodeT* addChild(char key)
{
    trieNodeT* child = (trieNodeT*)calloc(1,sizeof(trieNodeT));</p>

<pre><code>if (child == NULL) {
printf("Can not alloc memory\n");
return NULL;
}
child-&gt;key = key;
child-&gt;value = -1;
child-&gt;next = NULL;
child-&gt;children = NULL;
child-&gt;prefix = 1;
child-&gt;words = 0;

return child; }
</code></pre>

<p>int totalStringsWithPrefix(trieCDT trie, char keys[])
{
    trieNodeT *level = trie.root-&gt;children;</p>

<pre><code>while (keys != NULL) {
trieNodeT *found = NULL;
trieNodeT *current;

for (current = level; current != NULL; current = current-&gt;next) {
    if (current-&gt;key == *keys) {
	found = current;
	break;
    }
}

if (found == NULL) {
    return 0;
} else if (*(keys + 1)  == '\0') {
    return found-&gt;prefix;
}
level = found -&gt; children;
keys++;
}

return 0; }
</code></pre>

<p>int trieIsMember(trieCDT trie, char keys[])
{
    trieNodeT *level = trie.root-&gt;children;</p>

<pre><code>while (keys != NULL) {
trieNodeT *found = NULL;
trieNodeT *current;

for (current = level; current != NULL; current = current-&gt;next) {
    if (current-&gt;key == *keys) {
	found = current;
	break;
    }
}

if (found == NULL) {
    return 0;
} else if (*keys == '\0') {
    return 1;
}
level = found -&gt; children;
keys++;
}

return 0; }
</code></pre>

<p>void trieDestroy(trieNodeT * root)
{
    if (root-&gt;children == NULL &amp;&amp; root-&gt;next == NULL) {
        D(printf(“Destroying %d\n”, root-&gt;value));
	free (root);
	return;
    }</p>

<pre><code>// If root have next and children free them first
if (root-&gt;next != NULL) {
trieDestroy(root-&gt;next);
}

if (root-&gt;children != NULL) {
trieDestroy(root-&gt;children);
}
</code></pre>

<h1 id="ifdef-debug-1">ifdef DEBUG</h1>
<pre><code>if (root-&gt;key != '\0') {
printf("Destroying %c\n", root-&gt;key);
} else {
printf("Destroying Root %d\n", root-&gt;value);
} #endif

free (root); }
</code></pre>

<p>void test1()
{
    char s[] = “ABCD”;
    char s1[] = “ABCDE”;
    int i = 0;
    trieCDT trie;
    trieCreate(&amp;trie);
    trieAdd(trie.root, “ABCD”, 20);
    trieAdd(trie.root, “ABCDE”, 30);</p>

<pre><code>if (trieIsMember(trie, s)) {
printf("Found member 'ABCD'\n");
}

i = totalStringsWithPrefix(trie, "ABC");
printf("Total words with prefix 'ABC' %d\n", i);

trieDestroy(trie.root); }
</code></pre>

<p>void startTesting()
{
    test1();
}</p>

<p>void startTestingFromFile(char** stdip_v)
{
    FILE *fp = NULL;
    char key[50];
    trieCDT trie;
    int i = 0;</p>

<pre><code>fp = fopen(stdip_v[1], "r");
if(fp == NULL) {
fprintf(stderr, "Can not read file!!\n");
return;
}

trieCreate(&amp;trie);

while(fscanf(fp, "%s", key) != EOF) {
trieAdd(trie.root, key, i);
i++;

if(!trieIsMember(trie, key)) {
    printf("Key '%s' NOT found in trie\n", key);
}
}

printf("Total words inserted in trie %d\n", i);

i = totalStringsWithPrefix(trie, "Abe");

printf("Total prefixs with 'Abe' %d\n", i);

trieDestroy(trie.root); } {% endcoderay %}
</code></pre>

<p><br /></p>

<h3 id="infix-to-postfix">Infix to Postfix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/rA0x7b4YiMI" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="postfix-to-infix">Postfix to Infix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/OlRENYiiIiw" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="evaluate-postfix-expression">Evaluate Postfix expression</h4>

<p>Valid operators are +, -, *, /.<br /> Each operand may be an integer or another expression.</p>

<p>Some examples:<br />
<code>
["2", "1", "+", "3", "*"] -&gt; ((2 + 1) * 3) -&gt; 9<br />
["4", "13", "5", "/", "+"] -&gt; (4 + (13 / 5)) -&gt; 6
</code></p>

<p>{% coderay lang:c linenos:true Postfix  %}
class Solution {
    public:
	Solution(){};
	~Solution() {};</p>

<pre><code>int evalRPN(vector&lt;string&gt; &amp;tokens) {
    int num = 0;
    vector&lt;string&gt;::const_iterator cii;

    for(int ii=0; ii &lt; tokens.size(); ii++)
    {
	num = atoi(tokens.at(ii).c_str());
	if (!((tokens[ii] == "+") || (tokens[ii] == "-") ||
		    (tokens[ii] == "*") || (tokens[ii] == "/"))) {
	    mystack.push(num);
	} else {
	    if (mystack.empty()) {
		return 0;
	    }

	    num = mystack.top();
	    mystack.pop();

	    if (mystack.empty()) {
		return 0;
	    }

	    if (tokens[ii] == "+") {
		num += mystack.top();
	    } else if (tokens[ii] == "-") {
		num = mystack.top() - num;
	    } else if (tokens[ii] == "*") {
		num *= mystack.top();
	    } else if (tokens[ii] == "/") {
		if (num == 0)  {
		    return 0;
		}
		num = mystack.top() / num;
	    } else {
		return 0;
	    }

	    mystack.pop();
	    mystack.push(num);
	}
    }

    return mystack.top();
}

std::stack&lt;int&gt; mystack; }; {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="tree-problems">Tree Problems</h3>

<h4 id="find-bst-is-balanced-or-not">Find BST is balanced or not</h4>

<p>Balanced tree is defined to be a tree such that no two leaf nodes differ in distance from the root by more than one.</p>

<p>{% coderay lang:cplusplus linenos:true Balance BST http://ideone.com/2rEls9 Run %}
#include <stdio.h>
#include <stdlib.h /></stdio.h></p>

<p>int arrLen = 5;
int maxdepth = 0;
int mindepth = 10;
int totalElem = 8;</p>

<p>typedef struct BST {
    int data;
    struct BST *left;
    struct BST *right;
} nodeBST;</p>

<p>void balanceBST(int arr[]);
nodeBST* addNode(int data);
void addNodeToBST(nodeBST *root, nodeBST *node);
void traverse(nodeBST *root);
void maxDepth(nodeBST *root, int depth);
void minDepth(nodeBST *root, int depth);</p>

<p>int maxDepthWithoutGlobalVar(nodeBST *root, int depth, int maxDeep);
int minDepthWithoutGlobalVar(nodeBST *root, int depth, int minDeep);</p>

<p>int main()
{
    int arr[10] = {5,3,7,10,6,12,2,1};</p>

<pre><code>(void)balanceBST(arr);

return 0; }
</code></pre>

<p>void balanceBST(int arr[])
{
    nodeBST *node;
    nodeBST *root;
    int max = 0;
    int min = 100000;</p>

<pre><code>for (int i = 0; i &lt; totalElem; i++) {
node = addNode(arr[i]);
if (node == NULL) {
    return;
}

if (i == 0) {
    root = node;
    continue;
}

addNodeToBST(root, node);
}

printf("Nodes created\n");
traverse(root);
maxDepth(root, 0);
printf("\nMax Depth %d\n", maxdepth);
minDepth(root, 0);
printf("Min Depth %d\n\n", mindepth);

max = maxDepthWithoutGlobalVar(root, 0, max);
printf("Max Depth %d\n", max);

min = minDepthWithoutGlobalVar(root, 0, min);
printf("Min Depth %d\n", min);

if ((max - min) &gt; 1) {
printf("Binary search tree is not Balanced\n");
} else {
printf("Binary search tree is Balanced\n");
} }
</code></pre>

<p>nodeBST* addNode(int data)
{
    nodeBST <em>node = (nodeBST</em>)calloc(1, sizeof(nodeBST));</p>

<pre><code>if (node == NULL) {
return NULL;
}

node-&gt;data = data;
node-&gt;left = NULL;
node-&gt;right = NULL;

return node; }
</code></pre>

<p>void addNodeToBST(nodeBST *root, nodeBST *node)
{
    while(root != NULL) {
	if (node-&gt;data &lt; root-&gt;data) {
	    if (root-&gt;left != NULL) {
		root = root-&gt;left;
	    } else {
		root-&gt;left = node;
		return;
	    }
	} else {
	    if (root-&gt;right != NULL) {
		root = root-&gt;right;
	    } else {
		root-&gt;right = node;
		return;
	    }
	}
    }</p>

<pre><code>return; }
</code></pre>

<p>void traverse(nodeBST *root)
{
    if (root == NULL) {
	return;
    } else {
	traverse(root-&gt;left);
	printf(“%d “, root-&gt;data);
	traverse(root-&gt;right);
    }</p>

<pre><code>return; }
</code></pre>

<p>void maxDepth(nodeBST *root, int depth)
{
    if (root == NULL) {
	if (maxdepth &lt; depth) {
	    maxdepth = depth;
	}
    } else {
	maxDepth(root-&gt;left, (depth + 1));
	maxDepth(root-&gt;right, (depth + 1));
    }
}</p>

<p>void minDepth(nodeBST *root, int depth)
{
    if (root == NULL) {
	if (mindepth &gt; depth) {
	    mindepth = depth;
	}
    } else {
	minDepth(root-&gt;left, (depth + 1));
	minDepth(root-&gt;right, (depth + 1));
    }
}</p>

<p>int maxDepthWithoutGlobalVar(nodeBST *root, int depth, int maxDeep)
{
    if (root == NULL) {
	if (maxDeep &lt;= depth) {
	    maxDeep = depth;
	}
	return maxDeep;
    } else {
        maxDeep = maxDepthWithoutGlobalVar(root-&gt;left, (depth + 1), maxDeep);
	maxDeep = maxDepthWithoutGlobalVar(root-&gt;right, (depth + 1), maxDeep);
    }</p>

<pre><code>return maxDeep; }
</code></pre>

<p>int minDepthWithoutGlobalVar(nodeBST *root, int depth, int minDeep)
{
    if (root == NULL) {
	if (minDeep &gt;= depth) {
	    minDeep = depth;
	}
	return minDeep;
    } else {
        minDeep = minDepthWithoutGlobalVar(root-&gt;left, (depth + 1), minDeep);
	minDeep = minDepthWithoutGlobalVar(root-&gt;right, (depth + 1), minDeep);
    }</p>

<pre><code>return minDeep; } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</h4>

<p>A binary search tree (BST) is a node based binary tree data structure which has the following properties.<br />
• The left subtree of a node contains only nodes with keys less than the node’s key.<br />
• The right subtree of a node contains only nodes with keys greater than the node’s key.<br />
• Both the left and right subtrees must also be binary search trees.<br /><br /></p>

<p><strong>Method 1</strong></p>

<p>Perform inorder traversal on tree and store it in temporary array. By property of inorder traversal the numbers stored should be sorted sequence of it’s a BST else it’s not BST.</p>

<blockquote>
  <p>The only caveat is that this method require O(n) space</p>
</blockquote>

<p>{% coderay lang:cplusplus linenos:true Verify BST  %}</p>

<p>int temp[TREESIZE];</p>

<p>void traverse(nodeBST *root)
{
    static int n = 0;</p>

<pre><code>if (root == NULL) {
    return;
} else {
    traverse(root-&gt;left);
    temp[n++] = root-&gt;data;
    traverse1(root-&gt;right);
}

return; }
</code></pre>

<p>for (int i = 0; i &lt; TREESIZE; i++) {
	if (temp[i] &gt; temp [i + 1]) {
		return 0; // Binary tree is not BST
	}	
}
return 1;
{% endcoderay %}</p>

<p><br /><br /></p>

<p><strong>Method 2</strong></p>

<p>{% coderay lang:cplusplus linenos:true Verify BST  %}
int isBSTUtil(nodeBST* node, int min, int max);</p>

<p>/* Returns true if the given tree is a binary search tree 
 (efficient version). <em>/
int isBST(nodeBST</em> node) 
{ 
  return(isBSTUtil(node, INT_MIN, INT_MAX)); 
} </p>

<p>/* Returns true if the given tree is a BST and its 
   values are &gt;= min and &lt;= max. <em>/
int isBSTUtil(nodeBST</em> node, int min, int max) 
{ 
  /* an empty tree is BST */
  if (node==NULL) 
     return 1;</p>

<p>/* false if this node violates the min/max constraint */ 
  if (node-&gt;data &lt; min || node-&gt;data &gt; max) 
     return 0; </p>

<p>/* otherwise check the subtrees recursively, 
   tightening the min or max constraint */
  return
    isBSTUtil(node-&gt;left, min, (node-&gt;data - 1)) &amp;&amp;  // Allow only distinct values
    isBSTUtil(node-&gt;right, (node-&gt;data + 1), max);  // Allow only distinct values
} 
{% endcoderay %}</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack for function calls</p>
</blockquote>

<p>{% coderay lang:cplusplus linenos:true  Recursive Inorder http://ideone.com/Bo2ZpL Run Code%}
 // Recursive inorder traverse
 void traverse(nodeBST *root)
 {
     if (root == NULL) {
         return;
     } else {
         traverse(root-&gt;left);
         printf(“%d “, root-&gt;data);
         traverse(root-&gt;right);
     }</p>

<pre><code> return;  } {% endcoderay %}
</code></pre>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack </p>
</blockquote>

<p>{% coderay lang:cplusplus linenos:true  Iterative Inorder http://ideone.com/Bo2ZpL Run Code %}
 // Iterative
 // 1) Create an empty stack S.
 // 2) Initialize current node as root
 // 3) Push the current node to S and set current = current-&gt;left until curt is NULL
 // 4) If current is NULL and stack is not empty then$
 //      a) Pop the top item from stack.
 //      b) Print the popped item, set current = current-&gt;right
 //      c) Go to step 3.
 // 5) If current is NULL and stack is empty then we are done.</p>

<p>void iterativeInorder(nodeBST *root)
 {
     createStack();</p>

<pre><code> while(1) {
     if (root != NULL) {
         // Keep pushing in the stack
         push(root);
         root = root-&gt;left;
     } else {
         if (isStackEmpty()) {
             break;
         }
 
         root = pop();
         printf("%d ", root-&gt;data);
 
         root = root-&gt;right;
     }
 }  } {% endcoderay %} &lt;hr style="border-top: 1.5px dotted black"/&gt;&lt;br&gt; &lt;br&gt;
</code></pre>

<h4 id="bst---morris-inorder-traversal">BST - Morris Inorder Traversal</h4>

<p>Morris Inorder Traversal run without using recursion and without extra stack space.</p>

<blockquote>
  <p>Morris Inorder runs in O(NlogN) time and O(1) space</p>
</blockquote>

<p>{% img /assets/morris.png [morris.png] %}</p>

<p>{% coderay lang:cplusplus linenos:true Morris Inorder http://ideone.com/Bo2ZpL Run Code %}
  void MorrisInorder(nodeBST <em>root) {
      nodeBST</em> current,*pre;
      current=root;
      while(current!=NULL) {
          if(current-&gt;left==NULL) {
              printf(“%d “,current-&gt;data);
              current=current-&gt;right;
          }
          else {
              pre=current-&gt;left;
              while(pre-&gt;right != NULL &amp;&amp; pre-&gt;right !=current)
                  pre=pre-&gt;right;
              if(pre-&gt;right==NULL) {
                  printf(“Link %d, %d\n”, pre-&gt;data, current-&gt;data);
                  pre-&gt;right=current;
                  current=current-&gt;left;
              }
              else {
                  pre-&gt;right=NULL;
                  printf(“%d “,current-&gt;data);
                  current=current-&gt;right;
              }
          }
      }
  }
{% endcoderay %}
&lt;hr style="border-top: 1.5px dotted black"/&gt;<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://distkeys.com/blog/2013/11/18/recursion/"/>
    <updated>2013-11-18T22:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/18/recursion</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recusion-problems">Recusion problems</a>    <ul>
      <li><a href="#factorial">Factorial</a></li>
      <li><a href="#total-bunnyears">Total BunnyEars</a></li>
      <li><a href="#evenodd-bunnyears">Even/Odd BunnyEars</a></li>
      <li><a href="#triangle">Triangle</a></li>
      <li><a href="#sum-of-digits">Sum of Digits</a></li>
      <li><a href="#count-no-7">Count no 7</a></li>
      <li><a href="#count-x-in-string">Count X in String</a></li>
      <li><a href="#count-hi">Count Hi</a></li>
      <li><a href="#change-xy-string">Change XY String</a></li>
      <li><a href="#change-pi">Change PI</a></li>
      <li><a href="#no-x-in-string">No X in String</a></li>
      <li><a href="#no-star-in-string">No Star in String</a></li>
      <li><a href="#substring">Substring</a></li>
      <li><a href="#string-permutation-non-repeating">String permutation non repeating</a></li>
      <li><a href="#power-x-n">Power (x, n)</a></li>
    </ul>
  </li>
</ul>

<p>This article is all about recusion.</p>

<p>{% wikipedia Recursion %}</p>

<!-- more -->
<p><br /></p>

<p>Recursion is basis Dynamic programming, another important area in algorithms.</p>

<p>Best way to learn about recursion is to solve recursion problem.</p>

<p><br /></p>

<h3 id="recusion-problems">Recusion problems</h3>

<h4 id="factorial">Factorial</h4>

<p>Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) … 1
Compute the result recursively (without loops).</p>

<p>factorial(1) → 1<br />
factorial(2) → 2<br />
factorial(3) → 6<br /></p>

<script src="http://ideone.com/e.js/XWZvBI" type="text/javascript"></script>

<p><br /></p>

<h4 id="total-bunnyears">Total BunnyEars</h4>

<p>We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).</p>

<p>bunnyEars(0) → 0<br />
bunnyEars(1) → 2<br />
bunnyEars(2) → 4<br /></p>

<script src="http://ideone.com/e.js/vrDEiY" type="text/javascript"></script>

<p><br /></p>

<h4 id="evenodd-bunnyears">Even/Odd BunnyEars</h4>

<p>We have bunnies standing in a line, numbered 1, 2, … The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we’ll say have 3 ears, because they each have a raised foot. Recursively return the number of “ears” in the bunny line 1, 2, … n (without loops or multiplication).</p>

<p>bunnyEars2(0) → 0<br />
bunnyEars2(1) → 2<br />
bunnyEars2(2) → 5<br /></p>

<script src="http://ideone.com/e.js/U92tnQ" type="text/javascript"></script>

<p><br /></p>

<h4 id="triangle">Triangle</h4>

<p>We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. </p>

<p>triangle(0) → 0<br />
triangle(1) → 1<br />
triangle(2) → 3<br /></p>

<script src="http://ideone.com/e.js/3qfqXz" type="text/javascript"></script>

<p><br /></p>

<h4 id="sum-of-digits">Sum of Digits</h4>

<p>Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).</p>

<p>sumDigits(126) → 9<br />
sumDigits(49) → 13<br />
sumDigits(12) → 3<br /></p>

<script src="http://ideone.com/e.js/AmFVVT" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-no-7">Count no 7</h4>

<p>Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). </p>

<p>count7(717) → 2<br />
count7(7) → 1<br />
count7(123) → 0<br /></p>

<script src="http://ideone.com/e.js/QX5h4w" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-x-in-string">Count X in String</h4>

<p>Given a string, compute recursively (no loops) the number of lowercase ‘x’ chars in the string. </p>

<p>countX(“xxhixx”) → 4 <br />
countX(“xhixhix”) → 3<br />
countX(“hi”) → 0<br /></p>

<script src="http://ideone.com/e.js/DwK19H" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-hi">Count Hi</h4>

<p>Given a string, compute recursively (no loops) the number of times lowercase “hi” appears in the string. </p>

<p>countHi(“xxhixx”) → 1<br />
countHi(“xhixhix”) → 2<br />
countHi(“hi”) → 1<br /></p>

<script src="http://ideone.com/e.js/vGNoFy" type="text/javascript"></script>

<p><br /></p>

<h4 id="change-xy-string">Change XY String</h4>

<p>Given a string, compute recursively (no loops) a new string where all the lowercase ‘x’ chars have been changed to ‘y’ chars.</p>

<p>changeXY(“codex”) → “codey”<br />
changeXY(“xxhixx”) → “yyhiyy”<br />
changeXY(“xhixhix”) → “yhiyhiy”<br /></p>

<p>public String changeXY(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="change-pi">Change PI</h4>

<p>Given a string, compute recursively (no loops) a new string where all appearances of “pi” have been replaced by “3.14”. </p>

<p>changePi(“xpix”) → “x3.14x”<br />
changePi(“pipi”) → “3.143.14”<br />
changePi(“pip”) → “3.14p”<br /></p>

<p>public String changePi(String str) {</p>

<p>}
<br /></p>

<h4 id="no-x-in-string">No X in String</h4>

<p>Given a string, compute recursively a new string where all the ‘x’ chars have been removed. </p>

<p>noX(“xaxb”) → “ab” <br />
noX(“abc”) → “abc”<br />
noX(“xx”) → ““<br /></p>

<p>public String noX(String str) {</p>

<p>}
<br /></p>

<h4 id="no-star-in-string">No Star in String</h4>

<p>Given a string, compute recursively a new string where all the adjacent chars are now separated by a “*”. </p>

<p>allStar(“hello”) → “h*e*l*l*o”<br />
allStar(“abc”) → “a*b*c”<br />
allStar(“ab”) → “a*b”<br /></p>

<p>public String allStar(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="substring">Substring</h4>

<p>It’s also convenient to have a function that, given a sentence, selects a small portion
of a sentence for us. For example, if we had the sentence:<br />
(russians declare war rington vodka to be excellent)</p>

<p>We could imagine using a hypothetical subsentence function that would let us pull out the first few words
of that sentence, if we tell it where to start and stop the selection:<br />
(subsentence ‘(russians declare war rington vodka to be excellent) 1 3)<br />
(russians declare war)</p>

<p>(subsentence ‘(no shirt no shoes no service) 4 4)<br />
(shoes)<br /></p>

<p>Write the function subsentence, which takes in three arguments: a sentence, the starting endpoint,
and the stopping endpoint. It should return back a sentence that includes the words between the start and
stop endpoints. Assume that the user is nice, and won’t give weird input. In Scheme notation, we mean
that we can assume (&lt;= 1 start stop (count sent)) is always true.</p>

<script src="http://ideone.com/e.js/EsxIJg" type="text/javascript"></script>

<p><br /></p>

<h4 id="string-permutation-non-repeating">String permutation non repeating</h4>

<p>Write all the non repeating permutations of given string i.e.</p>

<p>For string ABC<br />
ABC, ACB, BAC, BCA, CAB, CBA</p>

<p>Detailed solution with explanation can be found <a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" target="_blank">here</a></p>

<p>{% img left http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif %}</p>

<p><br /></p>

<script src="http://ideone.com/e.js/yvIH1b" type="text/javascript"></script>

<p>This code will output reapeated string if input string given is say ‘ABA’.<br />
To avoid that store all the strings generated in array/hash and compare everytime for uniquesness.
<br /></p>

<h4 id="power-x-n">Power (x, n)</h4>

<p>Write a C program to calculate pow(x, n)</p>

<p>For e.g <br /></p>

<script type="math/tex; mode=display">\begin{align}
  2^4 = 16
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
2^3 = 8
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-2} = 0.25
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-4} = 0.0625
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
      -2^{-3} = -0.125
\end{align}</script>

<p><strong>Solution</strong>
Idea is that if power is even then multiply evenly i.e. </p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>4</mn></msup></math> will be (2 * 2) * (2 * 2)</p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>3</mn></msup></math> will be 2 * (2  * 2)</p>

<p>{% coderay lang:cplusplus linenos:true Power (x, n) http://ideone.com/BpMEJ8 Run Code %}
#include <stdio.h /></p>

<p>float power(float x, int n)
{
    float temp;
    if( n == 0)
        return 1;
    temp = power(x, n/2);
    if ((n % 2) == 0)
        return temp<em>temp;
    else
    {
        if(n &gt; 0)
            return x</em>temp*temp;
        else
            return (temp * temp) / x;
    }
}</p>

<p>int main()
{
    float res = power(2, 4);
    printf(“Result 2^4 = %f \n”, res);</p>

<pre><code>res = power(2, 3);
printf("Result 2^3 = %f \n", res);

res = power(2, -2);
printf("Result 2^-2 = %f \n", res);

res = power(2, -4);
printf("Result 2^-4 = %f \n", res);

res = power(-2, -3);
printf("Result 2^4 = %f \n", res);

return 0; } {% endcoderay %}
</code></pre>

]]></content>
  </entry>
  
</feed>
