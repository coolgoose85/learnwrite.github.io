<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/debug/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-02-22T19:05:25-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://distkeys.com/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[
<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br />
<!-- more --></p>

<h3>Code snippet</h3>

<p>{% coderay lang:cplusplus linenos:true Print bit values %}
#include <stdio.h>
#include <stdlib.h>
#include <string.h /></stdlib.h></stdio.h></p>

<p>int main()
{
    char <em>*container = (char **)malloc(10 * sizeof(char</em>));
    char **start = container;
    char *node;</p>

<pre><code>char name[] = "Vaibhav";
int i = 0;

if (container == NULL) {
return 0;
}

for (i = 0; i &lt;= 2; i++) {
node = (char *)malloc(10 * sizeof(char));
memcpy(node, &amp;name, strlen(name) + 1); 
*container = node;
container++;
}
*container = NULL;

while (*start != NULL) {
printf("%s\n", *start);
start++;
}

return 0; } {% endcoderay %}
</code></pre>

<p><br />
Focusing on following code section</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; = <span class="integer">2</span>; i++) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    node = (<span class="predefined-type">char</span> *)malloc(<span class="integer">10</span> * <span class="keyword">sizeof</span>(<span class="predefined-type">char</span>));
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    memcpy(node, &amp;name, strlen(name) + <span class="integer">1</span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    *container = node;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    container++;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p><br />In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<p>{% blockquote %}
Compile code using for GDB
gcc -g fileName.c
{% endblockquote %}</p>

<p><br /></p>

<p>{% coderay lang:cplusplus linenos:true GDB Trace %}
(gdb) l
16      }
17	
18	    for (i = 0; i &lt; = 2; i++) {
19	        node = (char *)malloc(10 * sizeof(char));
20	        memcpy(node, &amp;name, strlen(name) + 1);
21	        *container = node;
22	        container++;
23	    }
24	    *container = NULL;
25	
(gdb) ptype node
type = char *
(gdb) p node
$1 = 0x1001000e0 “Vaibhav”
(gdb) x/8bb node
0x1001000e0:	0x56	0x61	0x69	0x62	0x68	0x61	0x76	0x00
(gdb) x/8ub node
0x1001000e0:	86	97	105	98	104	97	118	0
(gdb) x/8tb node
0x1001000e0:	01010110	01100001	01101001	01100010	01101000	01100001	01110110	00000000
{% endcoderay %}</p>
]]></content>
  </entry>
  
</feed>
