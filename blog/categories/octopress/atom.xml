<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2015-01-02T21:34:19-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3.js and Octopress]]></title>
    <link href="http://distkeys.com/blog/2014/01/04/D3-and-Octopress/"/>
    <updated>2014-01-04T11:33:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/01/04/D3-and-Octopress</id>
    <content type="html"><![CDATA[
<script src="http://d3js.org/d3.v3.min.js"></script>

<style type="text/css">
.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 11px;
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

  </style>

<style>

#chart, #header, #footer {
  position: absolute;
  top: 0;
}

#header.inverted, #footer.inverted {
  color: #fff;
  text-shadow: 0 1px 4px #000;
}


rect {
  fill: none;
  pointer-events: all;
}

line {
  stroke: #000;
  stroke-width: 1.5px;
}

.string, .regexp {
  color: #f39;
}

.keyword {
  color: #00c;
}

.comment {
  color: #777;
  font-style: oblique;
}

.number {
  color: #369;
}

.class, .special {
  color: #1181B8;
}

</style>

<p>This article is about how to use versatile <a href="http://d3js.org/" target="_blank">D3.js</a> with <a href="http://octopress.org/" target="_blank">Octopress.</a></p>

<p>Recently I was looking for flow chart diagram or tree structure diagram, but I did not want to produce static image diagrams using Microsoft Vizio or similar softwares.</p>

<p>My requirement was to come up with tree structure data representation, which I could change in future unlike static pictures and can not be changed in future.</p>

<p>I found D3.js to be perfect for this scenario. Here, I store data in JSON file and I use D3.js to display that data according to my needs.</p>

<!-- more -->

<p>Challenge was how to fuse D3.js with Octopress.</p>

<p>First approcah to understand the <a href="https://github.com/mbostock/d3/wiki" target="_blank"> D3.js</a> from scratch but since I was short in time so I choose hacker way.</p>

<p>D3.js have long list of <a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank">examples/gallery</a> which are extremly helpful and powerful.</p>

<p>In this blog I am trying to incorporate this <a href="http://mbostock.github.io/d3/talk/20111018/tree.html" target="_blank">example.</a></p>

<u><b>Step 1</b></u>

<p>New post in Octopress created as .markdown file using</p>

<p><blockquote><p>rake new_post [“D3.js and Octopress”]</p></blockquote></p>

<p>This markdown file will now need to have have </p>

<ol>
  <li>CSS - D3.js related stylesheet code for styling<br /></li>
  <li>Javascript code - D3.js code to interpret data and bind with style sheet code</li>
  <li>JSON data file - This is going to be data file apart from .markdown file</li>
</ol>

<u><b>Step 2</b></u>

<p>JSON data file need to be placed in a folder from where it can be extracted when final html rendering is done.</p>

<p>I have choosen 
JSON file location to be</p>

<p><blockquote><p>/assets/flare.json<br/>d3.json(“/assets/flare.json”, function(json) {</p></p><p><p>Here, assets folder for octopress is <br/>&gt; octopress -&gt; /source/assets</p></blockquote></p>

<p>JSON file can be found <a href="https://www.dropbox.com/s/j1a52ipdpg755n4/flare.json" target="_blank">here</a></p>

<p>In below code snippet confiure following parameters to customize height and width of tree
<blockquote><p>h = 650 - m[0] - m[2]     (replace 650 with 800 for expanded tree)</p></p><p><p>// Normalize for fixed-depth.<br/>nodes.forEach(function(d) { d.y = d.depth * 130; });   ===&gt; (Use 180 instead of 130 for wider tree)</p></p><p><p></p></blockquote></p>

<p><blockquote><p>// Initialize the display to show a few nodes.<br/>  root.children.forEach(toggleAll);<br/>  toggle(root.children[1]);<br/>  toggle(root.children[1].children[2]);<br/>  toggle(root.children[5]);                   =====&gt; Here is number of 1st level childs<br/>  toggle(root.children[5].children[0]);</p></blockquote></p>

<p>[Update] To make each node a hyperlink comment following code and instead insert below code.<br />
Make sure JSON file have a field name url<br />
<blockquote><p>//  nodeEnter.append(“svg:text”)<br/>//      .attr(“x”, function(d) { return d.children || d._children ? -10 : 10; })<br/>//      .attr(“dy”, “.35em”)<br/>//      .attr(“text-anchor”, function(d) { return d.children || d._children ? “end” : “start”; <br/>//      .text(function(d) { return d.name; })<br/>//      .style(“fill-opacity”, 1e-6);</p></p><p><p>nodeEnter.append(“svg:a”).attr(“xlink:href”, function(d) { return d.url; }).attr(“target”, “_blank”)<br/>       .append(“svg:text”).text(function(d) { return d.name; })<br/>       .attr(“x”, function(d) { return d.children || d._children ? -10 : 10; })<br/>       .attr(“dy”, “.35em”)<br/>       .attr(“text-anchor”, function(d) { return d.children || d._children ? “end” : “start”; })<br/>       .text(function(d) { return d.name; })<br/>       .style(“fill-opacity”, 1e-6);</p></blockquote></p>

<p>Code for blog post (.markdown file) is as follows</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header'><span>D3.js and Octopress.markdown  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
&lt;script src=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">http://d3js.org/d3.v3.min.js</span><span style="color:#710">&quot;</span></span>&gt;&lt;/script&gt;
&lt;style type=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">text/css</span><span style="color:#710">&quot;</span></span>&gt;
.node circle {
  <span style="color:#970;font-weight:bold">cursor:</span> pointer;
  <span style="color:#970;font-weight:bold">fill:</span> <span style="color:#579">#fff</span>;
  <span style="color:#970;font-weight:bold">stroke:</span> steelblue;
  stroke-width: <span style="color:#60E">1</span><span style="color:#60E">.5</span>px;
}&lt;/style&gt;&lt;/p&gt;

&lt;p&gt;.node text {
  font-size: <span style="color:#00D">11</span>px;
}&lt;/p&gt;

&lt;p&gt;path.link {
  <span style="color:#970;font-weight:bold">fill:</span> none;
  <span style="color:#970;font-weight:bold">stroke:</span> <span style="color:#579">#ccc</span>;
  stroke-width: <span style="color:#60E">1</span><span style="color:#60E">.5</span>px;
}&lt;/p&gt;

&lt;p&gt;&amp;lt;/style&amp;gt;&lt;/p&gt;
&lt;style&gt;

<span style="color:#579">#chart</span>, <span style="color:#579">#header</span>, <span style="color:#579">#footer</span> {
  position: absolute;
  <span style="color:#970;font-weight:bold">top:</span> <span style="color:#00D">0</span>;
}

<span style="color:#579">#header</span>.inverted, <span style="color:#579">#footer</span>.inverted {
  color: <span style="color:#579">#fff</span>;
  text-shadow: <span style="color:#00D">0</span> <span style="color:#00D">1</span>px <span style="color:#00D">4</span>px <span style="color:#579">#000</span>;
}


rect {
  <span style="color:#970;font-weight:bold">fill:</span> none;
  pointer-events: all;
}

line {
  <span style="color:#970;font-weight:bold">stroke:</span> <span style="color:#579">#000</span>;
  stroke-width: <span style="color:#60E">1</span><span style="color:#60E">.5</span>px;
}

.string, .regexp {
  <span style="color:#970;font-weight:bold">color:</span> <span style="color:#579">#f39</span>;
}

.keyword {
  <span style="color:#970;font-weight:bold">color:</span> <span style="color:#579">#00c</span>;
}

.comment {
  <span style="color:#970;font-weight:bold">color:</span> <span style="color:#579">#777</span>;
  font-style: oblique;
}

.number {
  <span style="color:#970;font-weight:bold">color:</span> <span style="color:#579">#369</span>;
}

.class, .special {
  <span style="color:#970;font-weight:bold">color:</span> <span style="color:#579">#1181B8</span>;
}

&lt;/style&gt;

&lt;body&gt;
    &lt;div id=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">body</span><span style="color:#710">&quot;</span></span>&gt;              
        click or option-click to expand or collapse
    &lt;/div&gt;
    &lt;script type=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">text/javascript</span><span style="color:#710">&quot;</span></span>&gt;

var m = [<span style="color:#00D">20</span>, <span style="color:#00D">120</span>, <span style="color:#00D">20</span>, <span style="color:#00D">120</span>],
    w = <span style="color:#00D">1280</span> - m[<span style="color:#00D">1</span>] - m[<span style="color:#00D">3</span>],
    h = <span style="color:#00D">650</span> - m[<span style="color:#00D">0</span>] - m[<span style="color:#00D">2</span>],
    i = <span style="color:#00D">0</span>,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { <span style="color:#080;font-weight:bold">return</span> [d.y, d.x]; });

var vis = d3.select(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">#body</span><span style="color:#710">&quot;</span></span>).append(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:svg</span><span style="color:#710">&quot;</span></span>)
    .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">width</span><span style="color:#710">&quot;</span></span>, w + m[<span style="color:#00D">1</span>] + m[<span style="color:#00D">3</span>])
    .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">height</span><span style="color:#710">&quot;</span></span>, h + m[<span style="color:#00D">0</span>] + m[<span style="color:#00D">2</span>])
  .append(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:g</span><span style="color:#710">&quot;</span></span>)
    .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">transform</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">translate(</span><span style="color:#710">&quot;</span></span> + m[<span style="color:#00D">3</span>] + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> + m[<span style="color:#00D">0</span>] + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">)</span><span style="color:#710">&quot;</span></span>);

d3.json(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/assets/flare.json</span><span style="color:#710">&quot;</span></span>, function(json) {
  root = json;
  root.x0 = h / <span style="color:#00D">2</span>;
  root.y0 = <span style="color:#00D">0</span>;

  function toggleAll(d) {
    <span style="color:#080;font-weight:bold">if</span> (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  <span style="color:#777">// Initialize the display to show a few nodes.</span>
  root.children.forEach(toggleAll);
  toggle(root.children[<span style="color:#00D">1</span>]);
  toggle(root.children[<span style="color:#00D">1</span>].children[<span style="color:#00D">2</span>]);
  toggle(root.children[<span style="color:#00D">9</span>]);
  toggle(root.children[<span style="color:#00D">9</span>].children[<span style="color:#00D">0</span>]);

  update(root);
});

function update(source) {
  var duration = d3.event &amp;&amp; d3.event.altKey ? <span style="color:#00D">5000</span> : <span style="color:#00D">500</span>;

  <span style="color:#777">// Compute the new tree layout.</span>
  var nodes = tree.nodes(root).reverse();

  <span style="color:#777">// Normalize for fixed-depth.</span>
  nodes.forEach(function(d) { d.y = d.depth * <span style="color:#00D">130</span>; });

  <span style="color:#777">// Update the nodes…</span>
  var node = vis.selectAll(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">g.node</span><span style="color:#710">&quot;</span></span>)
      .data(nodes, function(d) { <span style="color:#080;font-weight:bold">return</span> d.id || (d.id = ++i); });

  <span style="color:#777">// Enter any new nodes at the parent's previous position.</span>
  var nodeEnter = node.enter().append(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:g</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">class</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">node</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">transform</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">translate(</span><span style="color:#710">&quot;</span></span> + source.y0 + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> + source.x0 + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">)</span><span style="color:#710">&quot;</span></span>; })
      .on(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">click</span><span style="color:#710">&quot;</span></span>, function(d) { toggle(d); update(d); });

  nodeEnter.append(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:circle</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>, <span style="color:#60E">1</span>e-<span style="color:#00D">6</span>)
      .style(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fill</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> d._children ? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lightsteelblue</span><span style="color:#710">&quot;</span></span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">#fff</span><span style="color:#710">&quot;</span></span>; });

  nodeEnter.append(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:text</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">x</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> d.children || d._children ? -<span style="color:#00D">10</span> : <span style="color:#00D">10</span>; })
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">dy</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">.35em</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">text-anchor</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> d.children || d._children ? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">end</span><span style="color:#710">&quot;</span></span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">start</span><span style="color:#710">&quot;</span></span>; })
      .text(function(d) { <span style="color:#080;font-weight:bold">return</span> d.name; })
      .style(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fill-opacity</span><span style="color:#710">&quot;</span></span>, <span style="color:#60E">1</span>e-<span style="color:#00D">6</span>);

  <span style="color:#777">// Transition nodes to their new position.</span>
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">transform</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">translate(</span><span style="color:#710">&quot;</span></span> + d.y + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> + d.x + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">)</span><span style="color:#710">&quot;</span></span>; });

  nodeUpdate.select(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">circle</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>, <span style="color:#60E">4</span><span style="color:#60E">.5</span>)
      .style(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fill</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> d._children ? <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">lightsteelblue</span><span style="color:#710">&quot;</span></span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">#fff</span><span style="color:#710">&quot;</span></span>; });

  nodeUpdate.select(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">text</span><span style="color:#710">&quot;</span></span>)
      .style(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fill-opacity</span><span style="color:#710">&quot;</span></span>, <span style="color:#00D">1</span>);

  <span style="color:#777">// Transition exiting nodes to the parent's new position.</span>
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">transform</span><span style="color:#710">&quot;</span></span>, function(d) { <span style="color:#080;font-weight:bold">return</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">translate(</span><span style="color:#710">&quot;</span></span> + source.y + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">,</span><span style="color:#710">&quot;</span></span> + source.x + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">)</span><span style="color:#710">&quot;</span></span>; })
      .remove();

  nodeExit.select(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">circle</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">r</span><span style="color:#710">&quot;</span></span>, <span style="color:#60E">1</span>e-<span style="color:#00D">6</span>);

  nodeExit.select(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">text</span><span style="color:#710">&quot;</span></span>)
      .style(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">fill-opacity</span><span style="color:#710">&quot;</span></span>, <span style="color:#60E">1</span>e-<span style="color:#00D">6</span>);

  <span style="color:#777">// Update the links…</span>
  var link = vis.selectAll(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">path.link</span><span style="color:#710">&quot;</span></span>)
      .data(tree.links(nodes), function(d) { <span style="color:#080;font-weight:bold">return</span> d.target.id; });

  <span style="color:#777">// Enter any new links at the parent's previous position.</span>
  link.enter().insert(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">svg:path</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">g</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">class</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">link</span><span style="color:#710">&quot;</span></span>)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">d</span><span style="color:#710">&quot;</span></span>, function(d) {
        var o = {<span style="color:#970;font-weight:bold">x:</span> source.x0, y: source.y0};
        <span style="color:#080;font-weight:bold">return</span> diagonal({<span style="color:#970;font-weight:bold">source:</span> o, target: o});
      })
    .transition()
      .duration(duration)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">d</span><span style="color:#710">&quot;</span></span>, diagonal);

  <span style="color:#777">// Transition links to their new position.</span>
  link.transition()
      .duration(duration)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">d</span><span style="color:#710">&quot;</span></span>, diagonal);

  <span style="color:#777">// Transition exiting nodes to the parent's new position.</span>
  link.exit().transition()
      .duration(duration)
      .attr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">d</span><span style="color:#710">&quot;</span></span>, function(d) {
        var o = {<span style="color:#970;font-weight:bold">x:</span> source.x, y: source.y};
        <span style="color:#080;font-weight:bold">return</span> diagonal({<span style="color:#970;font-weight:bold">source:</span> o, target: o});
      })
      .remove();

  <span style="color:#777">// Stash the old positions for transition.</span>
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

<span style="color:#777">// Toggle children.</span>
function toggle(d) {
  <span style="color:#080;font-weight:bold">if</span> (d.children) {
    d._children = d.children;
    d.children = null;
  } <span style="color:#080;font-weight:bold">else</span> {
    d.children = d._children;
    d._children = null;
  }
}

&lt;/script&gt;
&lt;/body&gt;

&lt;p&gt;</pre></div>
</div>
 </figure></notextile></div></p>

<body>
    <div id="body">     
        <br />
        <u><b>Demo</b></u> <br />        
        click or option-click to expand or collapse
    </div>
    <script type="text/javascript">

var m = [20, 120, 20, 120],
    w = 1280 - m[1] - m[3],
    h = 650 - m[0] - m[2],
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

d3.json("/assets/flare.json", function(json) {
  root = json;
  root.x0 = h / 2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  toggle(root.children[1]);
  toggle(root.children[1].children[2]);
  toggle(root.children[9]);
  toggle(root.children[9].children[0]);

  update(root);
});

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 130; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}

</script>
</body>

]]></content>
  </entry>
  
</feed>
