<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Operating | Distributed Knowledge]]></title>
  <link href="http://distkeys.com/blog/categories/operating/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-03-04T00:07:42-08:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Process synchronization in OS]]></title>
    <link href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-os/"/>
    <updated>2013-10-07T11:54:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/07/process-synchronization-in-os</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-a-process">What is a Process?</a></li>
  <li><a href="#issues-with-sharing">3 Issues with Sharing</a></li>
  <li><a href="#carls-jr-restaurant">Carl’s Jr. Restaurant</a></li>
  <li><a href="#algorithmic-approach">Algorithmic approach</a></li>
  <li><a href="#software-primitives">Software Primitives</a></li>
  <li><a href="#semaphores">Semaphores</a></li>
  <li><a href="#locks">Locks</a></li>
  <li><a href="#concurrent-programming-construct">Concurrent Programming Construct</a></li>
  <li><a href="#condition-variables">Condition Variables</a></li>
  <li><a href="#producer-consumer-problem">Producer-Consumer Problem</a></li>
  <li><a href="#recommended-reading">Recommended reading</a></li>
</ul>

<h3 id="what-is-a-process">What is a Process?</h3>

<p>Operating system(OS) <code>objective</code> is to keep as many as of the computer resources as busy as possible. It is used to keep track of all the things an OS must remember about the state of user program.</p>

<p>Process is like a box, a complete entity in itself which does a step by step task written in program. More formally it is called <code class="myyellow">program in execution.</code></p>

<p>Lets consider a very basic operating system with very least complexity. This operating system can run only <code>one process</code> at a time. Since, only one process is working at a time, it may happen that all the resources occupied by process will not be used at the same time. 
<!-- more -->
{% pullquote %}
To maximize the resource utilization, we need to have entities running at the same time. For multiple entities, it is logical that either we need to have multiple process running at the same time or light weight multiple entities running inside process as a part of process.
{“Process = Code + Allocated Resources + Book keeping information”}
{% endpullquote %}</p>

<p>Lets explore the second option, now consider process is like a box and it has resources inside the box. We create multiple <code class="myyellow">child of process which is called thread.</code></p>

<p>Thread is a child of process and hence it will use resources of process. Theoretically, there is no limit on number of child threads a process can have but it seems logical that process should have enough resource for administrative purpose for these threads. </p>

<p>Once there are multiple threads they are going to ask for same resource at the same time. For example, if two children are in one room then they will always fight for same toy. Same applies to threads.</p>

<h3 id="issues-with-sharing">3 Issues with Sharing</h3>
<ol>
  <li>How to <code>Share data</code>?</li>
  <li>How to ensure threads in a process, <code>executes one</code> at a time?</li>
  <li>How to ensure proper <code>sequencing</code> of events?</li>
</ol>

<p>To understand it better, lets take a real world example</p>

<h3 id="carls-jr-restaurant">Carl’s Jr. Restaurant</h3>
<p>Process</p>

<ol>
  <li>Customer arrives</li>
  <li>Employee takes order</li>
  <li>Employee cooks food</li>
  <li>Employee bag food</li>
  <li>Employee takes money</li>
  <li>Customer gets food and leaves</li>
</ol>

<p>If a single employee is doing steps from 1-6 then all other customers have to <code>wait</code> in line and its going to be long wait.
Instead, lets have multiple employees for taking order, cook food, bag food, take money. Each of these ‘employees’ are multiple threads on Process ‘Restaurant’. Each thread is responsible for doing <code>specialized task</code>.</p>

<p>Lets associate <code>3 issues</code> in current situation</p>

<ol>
  <li>What is shared data? - In step 2-3, Quantity of food. In step 3-4, how much food to bag</li>
  <li>Does sequence matters? -  Cook can’t cook food until order arrives. Employee can’t bag food until it is cooked. So, sequencing matters.</li>
</ol>

<p>Shared data can be passed for sharing either using <code>message passing</code> or storing that data in <code>global memory</code> of process and each thread read from that memory location.</p>

<p>The next logical question is how to ensure threads in a process executes one at a time i.e. in <code>exclusion</code>?
More formally there are three types of solution categories</p>

<ol>
  <li>Algorithmic approach</li>
  <li>Software Primitives</li>
  <li>Concurrent programming construct</li>
</ol>

<h3 id="algorithmic-approach">Algorithmic approach</h3>
<p>The algorithmic approach to process synchronization does not use any assistance from the computer architecture or the OS kernel. Instead it uses an arrangement of logical conditions to satisfy the desired synchronization requirements. <a href="http://books.google.com/books/about/Operating_Systems.html?id=kbBn4X9x2mcC" target="_blank">[Dhamdhere]</a></p>

<ul>
  <li>Two process algorithms</li>
  <li><a href="http://en.wikipedia.org/wiki/Dekker's_algorithm" target="_blank">Dekker’s Algorithm</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Peterson's_algorithm" target="_blank">Peterson’s Algorithm</a></li>
  <li>n process algorithm</li>
  <li><a href="http://en.wikipedia.org/wiki/Lamport's_bakery_algorithm" target="_blank">Bakery’s Algorithm</a></li>
</ul>

<h3 id="software-primitives">Software Primitives</h3>
<p>A set of software primitives for mutual exclusion e.g Semaphore, Locks etc. were developed to overcome the logical complexity of algorithmic implementations. This is implemented using some special architectural features of computer systems. But, ease of use and correctness still remained the major obstacle in a development of large concurrent systems.</p>

<h3 id="semaphores">Semaphores</h3>
<p>It is a shared integer variable with <code>non-negative</code> values that have <code>initialization, wait and signal</code> as a indivisible operation.</p>

<p>{% coderay lang:cplusplus linenos:true Semaphore Class %}
class Semaphore {
    public:
	//Constructor
	Semaphore(char *debugName, int initialValue);</p>

<pre><code>//Destructor
~Semaphore();

private:
int value;
List *waitQueue;
char *name; }; {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true Semaphore Constructor %}
Semaphore(char * debugName, int initialValue) {
    name      = debugName;
    value     = initialValue;
    waitQueue = new List;
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true Semaphore Destructor %}
~Semaphore() {
    delete waitQueue;
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true Semaphore Wait %}
//P() - Semaphore Wait
Semaphore::P() {
    //Disable interrupts
    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</p>

<pre><code>//Semaphore not available
while (value == 0) {
waitQueue-&gt;Append((void *)currentThread);
currentThread-&gt;Sleep();
}

//Semaphore now availble
value--;
(void)interrupt-&gt;SetLevel(oldLevel); } {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true Semaphore Signal %}
//Semaphore Signal
Semaphore::V() {
    Thread *thread;  </p>

<pre><code>IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);

//Remove first thread from wait queue
thread-&gt;(Thread *)waitQueue-&gt;Remove();

if (thread != NULL) {
scheduler-&gt;ReadyToRun(thread);  
}

value++;

(void)interrupt-&gt;SetLevel(oldLevel); } {% endcoderay %}
</code></pre>

<h3 id="locks">Locks</h3>
<p>The basic idea is to <code>close/acquire</code> a lock at the start of critical section or an indivisible operation and <code>open/release</code> it at the end of the critical section or the indivisible operation.</p>

<p>Locks solves how to ensure threads in a process executes one at a time but not the <code>sequencing problem.</code></p>

<p>Lock Class</p>

<p>{% coderay lang:cplusplus linenos:true Lock Class %}
class Lock {
    public:
	Lock (char *debugName);
	~Lock();</p>

<pre><code>char* getName() { return name; }

void acquire();
void release();
bool isHeldByCurrentThread;

private:
char*   name;
List*   lockWaitQueue;
bool    lockFree;
Thread* currentLockThread; }; {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true Lock Constructor %}
//Lock Constructor
Lock::Lock(char * debugName) {
    name              = debugName;
    currentLockThread = NULL;
    lockFree          = TRUE;
    lockWaitQueue     = new List;
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true Lock Destructor %}
//Lock Destructor
~Lock() {
    delete lockWaitQueue;<br />
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true Lock Acquire %}
Lock::acquire() {
    //Disable interrupts
    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</p>

<pre><code>//Check if current thread is an owner
if (currentThread == currentLockThread) {
//Already owner  
(void)interrupt-&gt;SetLevel(oldLevel);
return;
}

if(lockFree == TRUE) {
lockFree = FALSE;
currentLockThread = currentThread;      
} else {
lockWaitQueue-&gt;Append((void*) currentThread);
currentThread-&gt;Sleep();
}

(void)interrupt-&gt;SetLevel(oldLevel); } {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true Lock Release %}
Lock::release() {
    Thread* waitingThread;
    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</p>

<pre><code>if (!isHeldByCurrentThread()) {
//Thread is not valid owner of lock its
//trying to release
DEBUG("Not a lock owner");

(void)interrupt-&gt;SetLevel(oldLevel);
return;      
}

waitingThread = (Thread*)lockWaitQueue-&gt;Remove();

if (waitingThread != NULL) {
scheduler-&gt;ReadyToRun(waitingThread);
currentLockThread = waitingThread;      
} else {
lockFree = TRUE;
currentLockThread = NULL;
}

(void)interrupt-&gt;SetLevel(oldLevel); } {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true  Lock Owner %}
bool Lock::isHeldByCurrentThread() {
    return ((currentThread != currentLockThread) ?  FALSE : TRUE);
}
{% endcoderay %}</p>

<h3 id="concurrent-programming-construct">Concurrent Programming Construct</h3>
<p>Locks can only solve <code>mutual exclusion</code> problem, they can not solve <code>sequencing problem</code>. We need another mechanism <code>Monitors</code></p>

<p>Monitors is a programming language construct that supports both data access synchronization and control synchronization.</p>

<p>Monitors have 3 parts</p>

<ol>
  <li><code>Lock</code> for mutual exclusion</li>
  <li>1 or more <code>condition variables</code> for sequencing</li>
  <li>Monitor variables for make sequencing decisions -&gt; Shared data</li>
</ol>

<h3 id="condition-variables">Condition Variables</h3>
<p>Each condition variable is only associated with one lock.</p>

<p>{% coderay lang:cplusplus linenos:true Condition Class %}
class Condition {
    public:
	Condition(char *debugName);
	~Conditon();</p>

<pre><code>char* getName() { return name; }

void wait(Lock* conditionLock);
void signal(Lock* conditionLock);
void broadcast(Lock* conditionLock);

private:
char* name;
List* cvQueue;
Lock* cvLock;   }; {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true CV Constructor %}
Condition::Condition(char * debugName) {
    name    = debugName;
    cvQueue = new List;
    cvLock  = NULL;<br />
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true CV Destructor %}
Condition::~Condition() {
    delete cvQueue;  <br />
}
{% endcoderay %}</p>

<p>{% coderay lang:cplusplus linenos:true CV Wait %}
void Condition::wait(Lock* conditionLock) {
    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</p>

<pre><code>if (cvQueue-&gt;isEmpty()) {
//This lock is now associated with CV and
//only removed when last entry is removed
//from cvQueue.
cvLock = conditionLock;
}

if (conditionLock == NULL) {
interrupt-&gt;SetLevel(oldLevel);  
return;
}

conditionLock-&gt;release();
cvQueue-&gt;Append((void*) currentThread);
currentThread-&gt;Sleep();

//Acquire lock when get up
conditionLock-&gt;acquire();
interrupt-&gt;SetLevel(oldLevel);     } {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true CV Signal %}
void Conditon::signal(Lock * conditionLock) {
    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);</p>

<pre><code>//If nobody to signal, return
if (cvQueue-&gt;Empty()) {
interrupt-&gt;SetLevel(oldLevel);
return;
}

//Verify right lock is signalled
if (cvLock != conditionLock) {
interrupt-&gt;SetLevel(oldLevel);
return;
}

thread = cvQueue-&gt;Remove();
if (thread != NULL) {
scheduler-&gt;ReadyToRun(thread);
}

if (cvQueue-&gt;isEmpty()) {
cvLock = NULL;
}

interrupt-&gt;SetLevel(oldLevel); } {% endcoderay %}
</code></pre>

<h3 id="producer-consumer-problem">Producer-Consumer Problem</h3>

<p>Lets consider we have <code>infinite buffer</code></p>

<p>monitor variable  =&gt; int itemCount = 0;<br />
monitor lock      =&gt; monitorLock;<br />
monitor condition =&gt; needItem;<br /></p>

<p>{% coderay lang:cplusplus linenos:true Producer %}
while (true) {
    monitorLock.acquire();</p>

<pre><code>//Produce item
//Put in a buffer
itemCount++;

needItem.signal(&amp;monitorLock);

monitorLock.Release();     } {% endcoderay %}
</code></pre>

<p>{% coderay lang:cplusplus linenos:true Consumer %}
while (true) {
    monitorLock.acquire();</p>

<pre><code>while(intemCount == 0) {
needItem.wait(&amp;monitorLock);      
}

//Buffer has atleast one item
itemCount--;

monitorLock.Relase(); } {% endcoderay %}
</code></pre>

<h3 id="recommended-reading">Recommended reading</h3>

<ul>
  <li><a href="https://www.dropbox.com/s/8naej9kd0612gkr/implementingcvs.pdf" target="_blank">Implementing CV using semaphore</a></li>
  <li><a href="https://www.dropbox.com/s/gaallrwximrm14g/Monitors.pdf" target="_blank">Monitors by C.A.R Hoare </a></li>
  <li><a href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-linux-kernel/" target="_blank">Process synchronization in Linux Kernel</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
