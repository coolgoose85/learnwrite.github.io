<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learnings]]></title>
  <link href="http://learnwrite.github.io/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-10-08T22:59:53-07:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[World of Bits and Bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/08/world-of-bits-and-bytes/"/>
    <updated>2013-10-08T13:17:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/08/world-of-bits-and-bytes</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#basics">Basics</a></li>
  <li><a href="#bitwise-operators">Bitwise Operators</a></li>
  <li><a href="#bit-fields">Bit Fields</a></li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</a></li>
      <li><a href="#how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</a></li>
      <li><a href="#one-function-to-set-and-unset">One function to set and unset</a></li>
      <li><a href="#unset-range-of-bits">Unset range of bits</a></li>
      <li><a href="#set-range-of-bits">Set range of bits</a></li>
    </ul>
  </li>
  <li><a href="#recomended-readings">Recomended readings</a></li>
</ul>

<p>Recently, I have realized that no matter how much C, C++ or other high level languages you know it all comes down to bit and bytes view of program.<br />
I started realizing that after all it’s not that easy to actually think and write in bit/byte manipulation. This is my attempt to learn and be more comfortable about thinking in bit/bytes.</p>

<h3 id="basics">Basics</h3>

<p>Introduction <a href="http://www.codeproject.com/Articles/2247/An-introduction-to-bitwise-operators" target="_blank">here</a>
<br /><br /></p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>||              |               |               |              ||
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>|+- bit <span style="color:#00D">31</span>      |               |               |       bit <span style="color:#00D">0</span> -+|
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>|               |               |               |               |
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>+-- <span style="color:#036;font-weight:bold">BYTE</span> <span style="color:#00D">3</span> -----+--- <span style="color:#036;font-weight:bold">BYTE</span> <span style="color:#00D">2</span> ----+--- <span style="color:#036;font-weight:bold">BYTE</span> <span style="color:#00D">1</span> ----+-- <span style="color:#036;font-weight:bold">BYTE</span> <span style="color:#00D">0</span> -----+
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>|                               |                               |
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>+----------- <span style="color:#036;font-weight:bold">WORD</span> <span style="color:#00D">1</span> ------------+----------- <span style="color:#036;font-weight:bold">WORD</span> <span style="color:#00D">0</span> ------------+
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>|                                                               |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>+--------------------------- <span style="color:#036;font-weight:bold">DWORD</span> -----------------------------+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#036;font-weight:bold">Hexadecimal</span> <span style="color:#036;font-weight:bold">Numbers</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">2</span> <span style="color:#00D">3</span> <span style="color:#00D">4</span> <span style="color:#00D">5</span> <span style="color:#00D">6</span> <span style="color:#00D">7</span> <span style="color:#00D">8</span> <span style="color:#00D">9</span> <span style="color:#036;font-weight:bold">A</span> <span style="color:#036;font-weight:bold">B</span> <span style="color:#036;font-weight:bold">C</span> <span style="color:#036;font-weight:bold">D</span> <span style="color:#036;font-weight:bold">E</span> <span style="color:#036;font-weight:bold">F</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="bitwise-operators">Bitwise Operators</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">The</span> &amp; operator (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">1</span>   &amp;   <span style="color:#00D">1</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">1</span>   &amp;   <span style="color:#00D">0</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">0</span>   &amp;   <span style="color:#00D">1</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#00D">0</span>   &amp;   <span style="color:#00D">0</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#036;font-weight:bold">The</span> | operator (<span style="color:#036;font-weight:bold">OR</span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#00D">1</span>   |   <span style="color:#00D">1</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#00D">1</span>   |   <span style="color:#00D">0</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#00D">0</span>   |   <span style="color:#00D">1</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#00D">0</span>   |   <span style="color:#00D">0</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="color:#036;font-weight:bold">The</span> ^ operator (<span style="color:#036;font-weight:bold">XOR</span>)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="color:#00D">1</span>   ^   <span style="color:#00D">1</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#00D">1</span>   ^   <span style="color:#00D">0</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="color:#00D">0</span>   ^   <span style="color:#00D">1</span>   ==   <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#00D">0</span>   ^   <span style="color:#00D">0</span>   ==   <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#036;font-weight:bold">The</span> ~ operator
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="color:#036;font-weight:bold">The</span> ~ (<span style="color:#036;font-weight:bold">Ones</span> <span style="color:#036;font-weight:bold">Complement</span> <span style="color:#080;font-weight:bold">or</span> inversion) operator acts only on one value
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="color:#080;font-weight:bold">and</span> it inverts it.
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>The &gt;&gt; (<span style="color:#036;font-weight:bold">Right</span> <span style="color:#036;font-weight:bold">Shift</span>)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="color:#00D">00001100</span>  - b 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="color:#00D">00110000</span>  - b &lt;&lt; <span style="color:#00D">2</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span style="color:#036;font-weight:bold">The</span> &lt;&lt; (<span style="color:#036;font-weight:bold">Left</span> <span style="color:#036;font-weight:bold">Shift</span>)
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span style="color:#00D">00001100</span>  - b
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="color:#00D">00000011</span>  - b &gt;&gt; <span style="color:#00D">2</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="color:#036;font-weight:bold">Another</span> example is
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span style="color:#00D">1</span>&lt;&lt;<span style="color:#00D">4</span>; <span style="color:#00D">0001</span> <span style="color:#00D">0000</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="bit-fields">Bit Fields</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>struct date-struct {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">BYTE</span> day   : <span style="color:#00D">5</span>,   <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">1</span> to <span style="color:#00D">31</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>         month : <span style="color:#00D">4</span>,   <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">1</span> to <span style="color:#00D">12</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>         year  : <span style="color:#00D">14</span>;  <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> to <span style="color:#00D">9999</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} date
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>|<span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>|<span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>|<span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>|
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  |                           |       |         |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  +------ year ---------------+ month +-- day --+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>date.day = <span style="color:#00D">12</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>dateptr = &amp;date;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>dateptr-&gt;year = <span style="color:#00D">1852</span>;
</pre></div>
</div>
</div>

<p><a href="http://learnwrite.github.io/blog/2013/10/08/binary-number-operations/">Basics of Binary Arithmetic</a></p>

<p><br /></p>

<h3 id="problems">Problems</h3>

<h4 id="how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</h4>

<p>For e.g In byte 0000 1000 set bit no 6 will produce 0100 1000<br />
(Remember bit number starts with 0-7)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">For</span> problems where certain bit values needs to be changed, first we
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span><span style="color:#C2C">nee</span></span>d to create a bit mask.
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>//<span style="color:#036;font-weight:bold">Bit</span> mask is a temporary variable with some value. Using this value
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>we will access <span style="color:#080;font-weight:bold">and</span> change specific bits <span style="color:#080;font-weight:bold">in</span> a byte of data.
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>//<span style="color:#036;font-weight:bold">For</span> e.g.
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>//<span style="color:#036;font-weight:bold">To</span> set <span style="color:#00D">6</span>th bit <span style="color:#080;font-weight:bold">in</span> a byte <span style="color:#00D">0000</span> <span style="color:#00D">1000</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">We</span> have             <span style="color:#036;font-weight:bold">MASK</span> <span style="color:#00D">0100</span> <span style="color:#00D">0000</span>  (<span style="color:#036;font-weight:bold">OR</span>)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                    ——————————————
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                         <span style="color:#00D">0100</span> <span style="color:#00D">1000</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">To</span> turn on certain bit <span style="color:#080;font-weight:bold">in</span> a byte (<span style="color:#036;font-weight:bold">OR</span>) is used.
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>int set-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>{
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span style="color:#080;font-weight:bold">return</span> (val | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Here</span>, val    = <span style="color:#00D">0000</span> <span style="color:#00D">1000</span> = <span style="color:#00D">8</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      num    = <span style="color:#00D">6</span> (set <span style="color:#00D">6</span>th bit)
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      bitval = <span style="color:#00D">1</span> (set to <span style="color:#00D">1</span>)
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      <span style="color:#00D">0000</span> <span style="color:#00D">1000</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>(<span style="color:#036;font-weight:bold">OR</span>)  <span style="color:#00D">0100</span> <span style="color:#00D">0000</span>  (<span style="color:#00D">1</span> &lt;&lt; <span style="color:#00D">6</span>)
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      ————————-
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      <span style="color:#00D">0100</span> <span style="color:#00D">0000</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</h4>

<p>For e.g In byte 0100 1000 unset bit no 6 will produce 0000 1000<br />
(Remember bit number starts with 0-7)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">To</span> unset specific bit we will use (<span style="color:#036;font-weight:bold">AND</span>) operation.
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>//<span style="color:#036;font-weight:bold">Mask</span> value need to be ‘0’ <span style="color:#080;font-weight:bold">for</span> the bit to unset but rest of the bits
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span><span style="color:#C2C">nee</span></span>d to ‘1’. The reason <span style="color:#080;font-weight:bold">for</span> rest of the bits to set as ‘1’ is as
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>we are doing (<span style="color:#036;font-weight:bold">AND</span>), we don’t want to unset other bits which are
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>already set.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>//
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">For</span> e.g.
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>//<span style="color:#036;font-weight:bold">To</span> unset <span style="color:#00D">6</span>th bit <span style="color:#00D">0100</span> <span style="color:#00D">1000</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>            <span style="color:#036;font-weight:bold">MASK</span> <span style="color:#00D">1011</span> <span style="color:#00D">1111</span> (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                ——————————-
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                 <span style="color:#00D">0000</span> <span style="color:#00D">1000</span>   (<span style="color:#036;font-weight:bold">Result</span>)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>int unset-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>{
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">return</span> (val &amp; ~(bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Here</span>, val    = <span style="color:#00D">0100</span> <span style="color:#00D">1000</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      num    = <span style="color:#00D">6</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      bitval = <span style="color:#00D">0</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      (bitval &lt;&lt; num) = <span style="color:#00D">0100</span> <span style="color:#00D">0000</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>     ~(bitval &lt;&lt; num) = <span style="color:#00D">1011</span> <span style="color:#00D">1111</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      <span style="color:#00D">0100</span> <span style="color:#00D">1000</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      <span style="color:#00D">1011</span> <span style="color:#00D">1111</span> (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      —————————-
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      <span style="color:#00D">0000</span> <span style="color:#00D">1000</span>    (<span style="color:#036;font-weight:bold">Result</span>)
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="one-function-to-set-and-unset">One function to set and unset</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>int change-bit(int val, int num, bool bitval)
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>{
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span style="color:#080;font-weight:bold">return</span> (((val &amp; ~(bitval &lt;&lt; num)) | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="unset-range-of-bits">Unset range of bits</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Unset</span> range of bits
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">For</span> e.g. <span style="color:#F00;background-color:#FAA">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Unset</span> bits from <span style="color:#00D">2</span> to <span style="color:#00D">5</span> i.e. <span style="color:#F00;background-color:#FAA">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> =&gt; <span style="color:#00D">10</span> <span style="color:#00D">0000</span> <span style="color:#00D">01</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                               |- - - -| 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                      <span style="color:#036;font-weight:bold">Bits</span>  <span style="color:#00D">7</span> <span style="color:#00D">6</span> <span style="color:#00D">5</span> <span style="color:#00D">4</span> <span style="color:#00D">3</span> <span style="color:#00D">2</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>          
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Step1</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>------
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">To</span> unset range of bits we need to create <span style="color:#036;font-weight:bold">MASK</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> val  = <span style="color:#00D">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Mask</span> = <span style="color:#00D">1100</span> <span style="color:#00D">0011</span> (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      _____________
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>        <span style="color:#00D">1000</span> <span style="color:#00D">0001</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Step</span> <span style="color:#00D">2</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>-------
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">We</span> need to construct <span style="color:#036;font-weight:bold">MASK</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">In</span> <span style="color:#036;font-weight:bold">MASK</span>, bits <span style="color:#080;font-weight:bold">in</span> range are <span style="color:#00D">0</span> i.e. bits from <span style="color:#00D">2</span>-<span style="color:#00D">5</span> is <span style="color:#00D">0</span> <span style="color:#080;font-weight:bold">and</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>rest of the bits are <span style="color:#00D">1</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">MASK</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>         |- - - -|
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Bits</span> <span style="color:#00D">7</span> <span style="color:#00D">6</span> <span style="color:#00D">5</span> <span style="color:#00D">4</span> <span style="color:#00D">3</span> <span style="color:#00D">2</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Step</span> <span style="color:#00D">3</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>-------
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>  <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>  ((<span style="color:#00D">1</span> &lt;&lt; <span style="color:#00D">5</span>) - <span style="color:#00D">1</span>) i.e. (<span style="color:#00D">1</span> &lt;&lt; j) - <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">MAX</span>  <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>  <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>     <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>  <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>  (-)
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>    ------------------
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>     <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>  <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>         =====&gt; (<span style="color:#00D">1</span>)
<span class="line-numbers"><a href="#n32" name="n32">32</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> (<span style="color:#00D">1</span> &lt;&lt; <span style="color:#00D">2</span>) - <span style="color:#00D">1</span> i.e. (<span style="color:#00D">1</span> &lt;&lt; i) - <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> (-)
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>------------------
<span class="line-numbers"><a href="#n37" name="n37">37</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>                   =======&gt; (<span style="color:#00D">2</span>)
<span class="line-numbers"><a href="#n38" name="n38">38</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> (<span style="color:#00D">1</span>) <span style="color:#036;font-weight:bold">OR</span> (<span style="color:#00D">2</span>)
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n41" name="n41">41</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>   (<span style="color:#036;font-weight:bold">OR</span>)
<span class="line-numbers"><a href="#n42" name="n42">42</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>-------------------
<span class="line-numbers"><a href="#n43" name="n43">43</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Final</span> <span style="color:#036;font-weight:bold">Step</span>
<span class="line-numbers"><a href="#n46" name="n46">46</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> val  = <span style="color:#00D">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Mask</span> = <span style="color:#00D">1100</span> <span style="color:#00D">0011</span> (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"><a href="#n48" name="n48">48</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      _____________
<span class="line-numbers"><a href="#n49" name="n49">49</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>        <span style="color:#00D">1000</span> <span style="color:#00D">0001</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> i is start of range
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> j is <span style="color:#080;font-weight:bold">end</span> of range
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>int unsetBitsInRange(int val, int i, int j) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    int max = ~<span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    int left = max - ((<span style="color:#00D">1</span> &lt;&lt; j) - <span style="color:#00D">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    int right = (<span style="color:#00D">1</span> &lt;&lt; i) - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    int mask = left | right;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#080;font-weight:bold">return</span> (val &amp; mask);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h4 id="set-range-of-bits">Set range of bits</h4>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">This</span> mask is similar to <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Range Unset Mask</span><span style="color:#710">&quot;</span></span> created earlier
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> with an <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">exception</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">in</span> last
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#606">https</span>:<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>gist.github.com/coolgoose85/<span style="color:#00D">458</span>a1f67d61f8def1120
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>***********************************************************
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">In</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Range UNset Mask</span><span style="color:#710">&quot;</span></span> we created following
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">For</span> e.g. <span style="color:#F00;background-color:#FAA">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Unset</span> bits from <span style="color:#00D">2</span> to <span style="color:#00D">5</span> i.e. <span style="color:#F00;background-color:#FAA">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> =&gt; <span style="color:#00D">10</span> <span style="color:#00D">0000</span> <span style="color:#00D">01</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                               |- - - -| 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>                      <span style="color:#036;font-weight:bold">Bits</span>  <span style="color:#00D">7</span> <span style="color:#00D">6</span> <span style="color:#00D">5</span> <span style="color:#00D">4</span> <span style="color:#00D">3</span> <span style="color:#00D">2</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>    
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Step1</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>------
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">To</span> unset range of bits we need to create <span style="color:#036;font-weight:bold">MASK</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> val  = <span style="color:#00D">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Mask</span> = <span style="color:#00D">1100</span> <span style="color:#00D">0011</span> (<span style="color:#036;font-weight:bold">AND</span>)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      _____________
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>        <span style="color:#00D">1000</span> <span style="color:#00D">0001</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>***********************************************************
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">We</span> will be creating the same mask <span style="color:#080;font-weight:bold">in</span> addition we will 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">TOGGLE</span> the bits of <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">unset mask</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Unset</span> <span style="color:#036;font-weight:bold">MASK</span> = <span style="color:#00D">1100</span> <span style="color:#00D">0011</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">TOGGLE</span>     = <span style="color:#00D">0011</span> <span style="color:#00D">1100</span>    ~(<span style="color:#036;font-weight:bold">Unset</span> <span style="color:#036;font-weight:bold">Mask</span>)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Now</span> perform <span style="color:#036;font-weight:bold">OR</span> will val
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> val  = <span style="color:#00D">1001</span> <span style="color:#00D">1001</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> <span style="color:#036;font-weight:bold">Mask</span> = <span style="color:#00D">0011</span> <span style="color:#00D">1100</span> (<span style="color:#036;font-weight:bold">OR</span>)
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>      _____________
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>        <span style="color:#00D">1011</span> <span style="color:#00D">1101</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> i is start of the range
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span> j is <span style="color:#080;font-weight:bold">end</span> of the range
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>int setBitsInRange(int val, int i, int j) {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    int max = ~<span style="color:#00D">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    int left = max - ((<span style="color:#00D">1</span> &lt;&lt; j) - <span style="color:#00D">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    int right = (<span style="color:#00D">1</span> &lt;&lt; i) - <span style="color:#00D">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    int mask = left | right;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#080;font-weight:bold">return</span> (val | ~mask);  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="recomended-readings">Recomended readings</h3>

<ul>
  <li><a href="http://www.gamedev.net/page/resources/_/technical/general-programming/bitwise-operations-in-c-r1563" target="_blank">Gamedev</a></li>
  <li><a href="http://www.vipan.com/htdocs/bitwisehelp.html" target="_blank">Vipan</a></li>
  <li><a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank">Stanford</a></li>
  <li><a href="http://stackoverflow.com/questions/1167956/resources-to-learn-bitwise-programming" target="_blank">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary number operations]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/08/binary-number-operations/"/>
    <updated>2013-10-08T12:47:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/08/binary-number-operations</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addition">Addition</a></li>
  <li><a href="#subtraction">Subtraction</a></li>
  <li><a href="#multiplication">Multiplication</a></li>
  <li><a href="#negative-binary-numbers">Negative Binary numbers</a></li>
  <li><a href="#credits">Credits</a></li>
</ul>

<h3 id="addition">Addition</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#00D">0</span> + <span style="color:#00D">0</span> → <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">0</span> + <span style="color:#00D">1</span> → <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">1</span> + <span style="color:#00D">0</span> → <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">1</span> + <span style="color:#00D">1</span> → <span style="color:#00D">0</span>, carry <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span style="color:#036;font-weight:bold">For</span> e.g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>    (carried digits)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>+     <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    -------------
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>=   <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> = <span style="color:#00D">36</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="subtraction">Subtraction</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#00D">0</span> − <span style="color:#00D">0</span> → <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">0</span> − <span style="color:#00D">1</span> → <span style="color:#00D">1</span>, borrow <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">1</span> − <span style="color:#00D">0</span> → <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">1</span> − <span style="color:#00D">1</span> → <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#036;font-weight:bold">Subtracting</span> <span style="color:#00D">1</span> digit from <span style="color:#00D">0</span> digit produces the digit <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">1</span><span style="color:#710">&quot;</span></span>, <span style="color:#080;font-weight:bold">while</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#00D">1</span> will have to be subtracted from the <span style="color:#080;font-weight:bold">next</span> column. This is known as
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>borrowing.
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      *   * * *   (starred columns are borrowed from)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>−         <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        ----------------
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>=     <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="multiplication">Multiplication</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>        <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>   (<span style="color:#036;font-weight:bold">A</span>)
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>      × <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>   (<span style="color:#036;font-weight:bold">B</span>)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>       ---------
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>   ← <span style="color:#036;font-weight:bold">Corresponds</span> to the rightmost <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">zero</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">in</span> <span style="color:#036;font-weight:bold">B</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>+     <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>     ← <span style="color:#036;font-weight:bold">Corresponds</span> to the <span style="color:#080;font-weight:bold">next</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">one</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">in</span> <span style="color:#036;font-weight:bold">B</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>+   <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>+ <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  ---------------
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>= <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#036;font-weight:bold">Binary</span> <span style="color:#036;font-weight:bold">Multiplication</span> <span style="color:#080;font-weight:bold">for</span> binary point
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>                <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> . <span style="color:#F00;background-color:#FAA">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>       <span style="color:#036;font-weight:bold">A</span> (<span style="color:#60E">5.625</span> <span style="color:#080;font-weight:bold">in</span> decimal)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                × <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> . <span style="color:#F00;background-color:#FAA">0</span> <span style="color:#00D">1</span>       <span style="color:#036;font-weight:bold">B</span> (<span style="color:#60E">6.25</span>  <span style="color:#080;font-weight:bold">in</span> decimal)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>           -------------------
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                  <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>    ← <span style="color:#036;font-weight:bold">Corresponds</span> to a <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">one</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">in</span> <span style="color:#036;font-weight:bold">B</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    +           <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>      ← <span style="color:#036;font-weight:bold">Corresponds</span> to a <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">zero</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">in</span> <span style="color:#036;font-weight:bold">B</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    +         <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    +       <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    +     <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    ---------------------------
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    = <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">1</span> . <span style="color:#F00;background-color:#FAA">0</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span> <span style="color:#00D">0</span> <span style="color:#00D">1</span>  (<span style="color:#60E">35.15625</span> <span style="color:#080;font-weight:bold">in</span> decimal)
</pre></div>
</div>
</div>

<p><br /></p>

<h3 id="negative-binary-numbers">Negative Binary numbers</h3>

<p>How can we represent a negative number? We cannot use a ‘-‘ sign because all we can store in the computer is zeros and ones.</p>

<p>There are three methods</p>

<ol>
  <li>Signed Magnitude</li>
  <li>1’s Complement</li>
  <li>2’s complement</li>
</ol>

<p><a href="https://docs.google.com/file/d/0BySPJjyZBnC2VDhrMkFMX2FYWW8/edit?usp=sharing”%20target=“_blank">Full text</a> about binary number operations.</p>

<h3 id="credits">Credits</h3>

<p><a href="http://turing.cs.camosun.bc.ca/COMP166/resources/binary.html">CS Camosun</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process synchronization in Linux Kernel]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-linux-kernel/"/>
    <updated>2013-10-07T20:56:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-linux-kernel</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#synchronization-primitives">Synchronization Primitives</a></li>
  <li><a href="#summary-of-synchronization-primitives">Summary of Synchronization Primitives</a></li>
  <li><a href="#per-cpu-variables">Per-CPU variables</a></li>
  <li><a href="#atomic-operations">Atomic Operations</a></li>
  <li><a href="#optimization-barriers--memory-barriers">Optimization Barriers &amp; Memory Barriers</a></li>
  <li><a href="#semaphores">Semaphores</a></li>
  <li><a href="#spin-locks">Spin Locks</a>    <ul>
      <li><a href="#readwrite-spin-locks">Read/Write Spin Locks</a></li>
    </ul>
  </li>
  <li><a href="#seqlocks">SeqLocks</a></li>
  <li><a href="#read-copy-update-rcu">Read Copy Update (RCU)</a></li>
</ul>

<p>As we have discussed earlier about process synchronization, lets discuss about process synchronization primitives offered in Linux Kernel.</p>

<p>This blog is summary of this <a href="https://docs.google.com/file/d/0BySPJjyZBnC2UVYzWkdSLWNrdEE/edit?usp=sharing" target="-blank">article</a></p>

<h3 id="synchronization-primitives">Synchronization Primitives</h3>

<ol>
  <li>Per-CPU variables</li>
  <li>Atomic Operation</li>
  <li>Memory barrier</li>
  <li>Spin Lock</li>
  <li>Semaphore</li>
  <li>SeqLocks</li>
  <li>Local Interrupt disabling</li>
  <li>Local softirq disabling</li>
  <li>Read-Copy-Update</li>
</ol>

<h3 id="summary-of-synchronization-primitives">Summary of Synchronization Primitives</h3>

<table>
<tr>
<td>Technique</td><td>Description</td><td>Scope</td>
</tr>
<tr>
<td>Per-CPU variables</td><td>Duplicate a data structure among the CPUs</td><td><code>All CPUs</code></td>
</tr>
<tr>
<td>Atomic operation</td><td>Atomic read-modify-write instruction to a counter</td><td><code>All CPUs</code></td>
</tr>
<tr>
<td>Memory barrier</td><td>Avoid instruction reordering</td><td><code>Local CPU or All CPUs</code></td>
</tr>
<tr>
<td>Spin lock</td><td>Lock with busy wait</td><td><code>All CPUs</code></td>
</tr>
<tr>
<td>Semaphore</td><td>Lock with blocking wait (sleep)</td><td><code>All CPUs</code></td>
</tr>
<tr>
<td>Seqlocks</td><td>Lock based on an access counter</td><td><code>All CPUs</code></td>
</tr>
<tr>
<td>Local interrupt disabling</td><td>Forbid interrupt handling on a single CPU</td><td>Local CPU</td>
</tr>
<tr>
<td>Local softirq disabling</td><td>Forbid deferrable function handling on a single CPU</td><td>Local CPU</td>
</tr>
<tr>
<td>Read-copy-update (RCU)</td><td>Lock-free access to shared data structures through pointers</td><td><code>All CPUs</code></td>
</tr>
</table>
<p><br /></p>

<h3 id="per-cpu-variables">Per-CPU variables</h3>

<p>The best synchronization technique consists in designing the kernel so as to avoid
the need for synchronization in the first place.</p>

<p><code>Basically, a per-CPU variable is an array of data structures, one element per each CPU in the system.</code>
A CPU should not access the elements of the array corresponding to the other CPUs.</p>

<p><code>Pros</code></p>

<ul>
  <li>Freely read and modify its own element without fear of race conditions.<br /></li>
  <li>It avoids cache line snooping and invalidations, which are costly operations.</li>
</ul>

<p><strong>[Snooping and Invalidations]</strong> Snooping is the process where the individual caches monitor address lines,  for accesses to memory locations that they have cached. When a write operation is observed to a location that a cache has a copy of, the cache controller invalidates its own copy of the snooped memory location.</p>

<p><code>Cons</code>
* It can only be used when it make sense to <code>logically split</code> the data across the CPUs of the system
* Do not provide <code>protection</code> against access from asynchronous functions such as <code>interrupt handlers and deferrable functions.</code>
* Per-CPU variables are variables are prone to <code>race conditions</code> caused by kernel preemption, both in uniprocessor and multiprocessor systems.</p>

<p><strong>[Problem]</strong> What would happen if a kernel control path gets the address of its local copy of a per-CPU variable, and then it is preempted and moved to another CPU: the address still refers to the element of the previous CPU.</p>

<p>As a general rule, a kernel control path should access a per-CPU variable with kernel preemption disabled.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="atomic-operations">Atomic Operations</h3>

<p><strong>[Problem]</strong> Several assembly language instructions are of type “read-modify-write” i.e. memory location is accessed twice first to read the old value and second time to write a new value</p>

<p><strong>Detailed explanation</strong><br />
Suppose that two kernel control paths running on two CPUs try to “read-modify-write” the same memory location at the same time by executing nonatomic operations.<br />
At first, <code>both CPUs try to read the same location</code>, but the memory arbiter (a hardware circuit that serializes accesses to the RAM chips) steps in to grant access to one of them and delay the other. However, when the first read operation has completed, the delayed CPU reads exactly the same (old) value from the memory location.
<code>Both CPUs then try to write the same (new) value to the memory location</code>; again, the bus memory access is serialized by the memory arbiter, and eventually both write operations succeed. However, the global result is incorrect because both CPUs write the same (new) value. Thus, the two interleaving “read-modify-write” operations act as a single one.</p>

<p><strong>[Solution]</strong> Reason for problem here is that Both CPU’s try to access memory location at the same time. If operation of “read-modify-write” can be made atomic then problem would be solved i.e. Every such <code>operation must be executed in a single instruction without being interrupted</code> in the middle and avoiding accesses to the same memory location by other CPUs.</p>

<ul>
  <li>Read-modify-write assembly language instructions are atomic if no other processor has taken the memory bus after the read and before the write. <code>Memory bus stealing never happens in a uniprocessor system.</code></li>
  <li>For multiprocessor system, Read-modify-write assembly language instructions whose opcode is prefixed by the <strong>Lock byte</strong> (0xf0) are atomic. </li>
  <li>Other processors cannot access the memory location while the locked instruction is being executed.</li>
</ul>

<p>Sample functions: atomic-read(v), atomic-set(v,i), atomic-add(i,v), atomic-sub(i,v) etc…</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="optimization-barriers--memory-barriers">Optimization Barriers &amp; Memory Barriers</h3>

<p>Compilers optimize the code for efficient usage of CPU time and memory but this optimizations could be disastrous sometimes when dealing with shared data.</p>

<p>It can never be guaranteed that instructions will be performed in the same order in which they appear in source code mainly because reordering by compiler to optimize and CPU executing several instructions in parallel. This might lead to reordering of memory access patterns.</p>

<p>To avoid this behavior we need a synchronization primitive at two levels</p>

<ul>
  <li>Synchronization primitive at Compiler level - Optimization barrier</li>
  <li>Synchronization primitive at CPU level      - Memory barrier</li>
</ul>

<p>In linux <em>barrier()</em> macro acts as an <em>optimization barrier</em>. <code>Optimization barrier primitive ensures that assembly language instructions of C statements mentioned before *barrier()* and assembly language instructions of C statements mentioned after, remains in the same sequence.</code></p>

<p>But, Optimization barrier cannot control in which fashion instructions will be executed by CPU.</p>

<p>A <em>memory barrier</em> primitive ensures that the operations placed before the primitive are finished before starting the operations placed after the primitive. Read <em>memory barrier</em> act only on instructions that read from memory, while Write <em>memory barriers</em> act only on instructions that write to memory.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="semaphores">Semaphores</h3>

<p>Please visit <a href="http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os/#semaphores">Semaphore Page</a></p>

<h3 id="spin-locks">Spin Locks</h3>

<p>When a kernel control path must access a shared data structure or enter a critical section it need to acquire a lock.<br />
Spin Locks are a special kind of lock designed to work in a multiprocessor environment. If kernel control path finds Spin Lock <em>Open</em> it acquires the lock and continue execution else it <em>Spin</em> around repeatedly executing tight instruction loop, until the lock is released.</p>

<p>The waiting kernel control path keeps running on the CPU, even if it has nothing to do besides waste time. <code>Kernel preemption is disabled</code> in CR protected by Spin Locks.
Spin locks are usually convenient, because many kernel resources are locked for a <code>fraction of a millisecond only</code>; therefore, it would be far more time-consuming to release the CPU and reacquire it later.<br />
Kernel preemption is still enabled during the busy wait phase, thus a process waiting for a spin lock to be released could be replaced by a higher priority process.</p>

<table>
<tr>
<td>Macro</td><td>Description</td>
</tr>
<tr>
<td>spin-lock-init()</td><td>Set the spin lock to 1 (unlocked)</td>
</tr>
<tr>
<td>spin-lock()</td><td>Cycle until spin lock becomes 1 (unlocked), then set it to 0 (locked)</td>
</tr>
<tr>
<td>spin-unlock()</td><td>Set the spin lock to 1 (unlocked)</td>
</tr>
<tr>
<td>spin-unlock-wait()</td><td>Wait until the spin lock becomes 1 (unlocked)</td>
</tr>
<tr>
<td>spin-is-locked()</td><td>Return 0 if the spin lock is set to 1 (unlocked); 1 otherwise</td>
</tr>
<tr>
<td>spin-trylock()</td><td>Set the spin lock to 0 (locked), and return 1 if the previous value of the lock was 1; 0 otherwise</td>
</tr>
</table>
<p><br /></p>

<p>Spin Lock with kernel preemption</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Invokes</span> preempt-disable() to disable kernel preemption.
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>; Intel syntax
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#606">locked</span>:                      ; <span style="color:#036;font-weight:bold">The</span> lock variable. <span style="color:#F00;background-color:#FAA">1</span> = locked, <span style="color:#00D">0</span> = unlocked.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>dd      <span style="color:#00D">0</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>spin-<span style="color:#606">lock</span>:
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>mov     eax(new), <span style="color:#00D">1</span>     ; <span style="color:#036;font-weight:bold">Set</span> the <span style="color:#036;font-weight:bold">EAX</span> register to <span style="color:#00D">1</span>.
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>xchg    eax(new), [locked]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>; <span style="color:#036;font-weight:bold">Atomically</span> swap the <span style="color:#036;font-weight:bold">EAX</span> register with
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>;  the lock variable.
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>; This will always store <span style="color:#00D">1</span> to the lock, leaving
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>;  previous value <span style="color:#080;font-weight:bold">in</span> the <span style="color:#036;font-weight:bold">EAX</span> register.
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>test    eax(new), eax(prev)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>; <span style="color:#036;font-weight:bold">Test</span> <span style="color:#036;font-weight:bold">EAX</span> with itself. Among other things, this will
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>;  set the processor<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">s Zero Flag if EAX is 0.</span></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#D20">; If EAX is 0, then the lock was unlocked and</span></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#D20">;  we just locked it.</span></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#D20">; Otherwise, EAX is 1 and we didn</span><span style="color:#710">'</span></span>t acquire the lock.
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>//   <span style="color:#036;font-weight:bold">Enable</span> kernel preemption preempt-enable() 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>jnz     spin-lock       ; <span style="color:#036;font-weight:bold">Jump</span> back to the <span style="color:#036;font-weight:bold">MOV</span> instruction <span style="color:#080;font-weight:bold">if</span> the <span style="color:#036;font-weight:bold">Zero</span> <span style="color:#036;font-weight:bold">Flag</span> is
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>;  <span style="color:#080;font-weight:bold">not</span> set; the lock was previously locked, <span style="color:#080;font-weight:bold">and</span> so
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>; we need to spin <span style="color:#080;font-weight:bold">until</span> it becomes unlocked.
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>ret                     ; <span style="color:#036;font-weight:bold">The</span> lock has been acquired, <span style="color:#080;font-weight:bold">return</span> to the calling
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>;  function.
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>spin-<span style="color:#606">unlock</span>:
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>mov     eax, <span style="color:#00D">0</span>          ; <span style="color:#036;font-weight:bold">Set</span> the <span style="color:#036;font-weight:bold">EAX</span> register to <span style="color:#00D">0</span>.
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>xchg    eax, [locked]   ; <span style="color:#036;font-weight:bold">Atomically</span> swap the <span style="color:#036;font-weight:bold">EAX</span> register with
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>;  the lock variable.
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>ret                     ; <span style="color:#036;font-weight:bold">The</span> lock has been released.
</pre></div>
</div>
</div>

<p>In case of kernel preemption, the first step is to disable kernel preemption, preempt-disable()
In the above example <code>Lock is 1 and Unlock is 0</code></p>

<ul>
  <li>In EAX register we push “1” as we wish to acquire lock.<br /></li>
  <li>xchg command will exchange value from EAX register to lock variable but not vice versa. So by step 2, EAX register has value of “1” and lock variable also has value of “1”. This is an atomic operation.<br /></li>
  <li>Step 3, test or validate the current value of lock. If current value of lock(EAX prev) is “1“ i.e. processor zero flag is already set, hence <code>lock is not available.</code> <br /></li>
  <li>Enable kernel preemption and Jump(Spin) back.<br /></li>
  <li>In Step 3, if current value of lock (EAX prev) is “0” then set it with “1” i.e. <code>Lock has been acquired.</code></li>
</ul>

<p>It might happen that process can spin for a long time. If the break-lock field is set then owning process can learn whether there are other processes waiting for the lock. It may decide to release it prematurely to allow other processes.</p>

<h4 id="readwrite-spin-locks">Read/Write Spin Locks</h4>

<p>Read Spin Locks is used to increase the concurrency within kernel. Idea is that allow several kernel control path to access same data structure for “Read” using Read Spin Locks. No kernel control path can modify the data structure using Read Spin Locks. </p>

<p>To modify shared data structure kernel control path needs to acquire Write Spin Locks. Write Spin Lock is granted when no kernel control path have Read Spin Locks.</p>

<p>Reader and Writer Spin Locks have same priority in this case.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="seqlocks">SeqLocks</h3>

<p>In Read/Write spin locks reader and write have same priority. Reader must wait until the writer has finished and vice versa.<br />
SeqLocks are similar to read/write locks except except that they give a much higher priority to writers: in fact a writer is allowed to proceed even when readers are active.</p>

<p>Writer never waits but reader may be forced to read the data several times until it get valid copy. Each reader must read sequence counter twice i.e. before and after reading the data and then check whether sequence counter values are same. If its not equal then it means that writer must has become active and has increased the sequence counter, thus implicitly telling the reader that the data just read is not valid.</p>

<p>Every time writer acquire and release sequence lock it must increment sequence counter. When counter is odd means writer is in progress and when counter is even means writer is done.<br />
When a reader enters a critical region, it <code>does not need to disable kernel preemption</code>; on the other hand, the <code>writer automatically disables kernel preemption</code> when entering the critical region, because it acquires the spin lock.</p>

<p>SeqLocks must not be used for </p>

<ul>
  <li>The data structure to be protected does not include pointers that are modified by the writers and dereferenced by the readers (otherwise, a writer could change the pointer under the nose of the readers)</li>
  <li>The code in the critical regions of the readers does not have side effects (otherwise, multiple reads would have different effects from a single read)</li>
</ul>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="read-copy-update-rcu">Read Copy Update (RCU)</h3>

<p>This technique is designed to <code>protect</code> data structures that are mostly <code>accessed for reading</code> by several CPUs.<br />
The key idea consists of limiting the scope of RCU as follows:</p>

<ol>
  <li>Only data structures that are dynamically allocated and referenced by means of pointers can be protected by RCU.</li>
  <li>No kernel control path can sleep inside a critical region protected by RCU.</li>
</ol>

<p><strong>Writer</strong></p>

<ul>
  <li>When a writer wants to update the data structure, it dereferences the pointer and makes a copy of the whole data structure.<br /></li>
  <li>Next, the writer modifies the copy.<br /></li>
  <li>Once finished, the writer changes the pointer to the data structure so as to make it point to the updated copy.<br /></li>
</ul>

<p>Because <code>changing the value of the pointer is an atomic operation</code>, each reader or writer sees either the old copy or the new one: no corruption in the data structure may occur.</p>

<p>Memory barrier is required to ensure that the updated pointer is seen by the other CPUs only after the data structure has been modified. </p>

<p>Spin lock is coupled with RCU to forbid the concurrent execution of writers.</p>

<p><strong>[Problem]</strong> Old copy of the data structure cannot be freed right away when the writer updates the pointer. In fact, the readers that were accessing the data structure when the writer started its update could still be reading the old copy. The old copy can be freed only after all (potential) readers on the CPUs have executed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process synchronization in OS]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os/"/>
    <updated>2013-10-07T11:54:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-a-process">What is a Process?</a></li>
  <li><a href="#issues-with-sharing">3 Issues with Sharing</a></li>
  <li><a href="#carls-jr-restaurant">Carl’s Jr. Restaurant</a></li>
  <li><a href="#algorithmic-approach">Algorithmic approach</a></li>
  <li><a href="#software-primitives">Software Primitives</a></li>
  <li><a href="#semaphores">Semaphores</a></li>
  <li><a href="#locks">Locks</a></li>
  <li><a href="#concurrent-programming-construct">Concurrent Programming Construct</a></li>
  <li><a href="#condition-variables">Condition Variables</a></li>
  <li><a href="#producer-consumer-problem">Producer-Consumer Problem</a></li>
  <li><a href="#recommended-reading">Recommended reading</a></li>
</ul>

<h3 id="what-is-a-process">What is a Process?</h3>

<p>OS <code>objective</code> is to keep as many as of the computer resources as busy as possible. It is used to keep track of all the things an OS must remember about the state of user program.</p>

<p>Process = Code + Allocated Resources + Book keeping information</p>

<p>Process is like a box, a complete entity in itself which does a step by step task written in progam. More formally it is called program in execution.</p>

<p>Lets consider a very basic operating system with very least complexity. This operating system can run only <code>one process</code> at a time. Since, only one process is working at a time, it may happen that all the resources occupied by process will not be used at the same time.</p>

<p>To maximize the resource utilization, we need to have entities running at the same time. When its said multiple entities it is logical that either we need to have multiple process running at the same time or light weight multiple entities running inside process.</p>

<p>Lets explore the second option, now consider process is like a box and it has resources inside the box. We create multiple child of process which is called thread.</p>

<p>Thread is a child of process and hence it will use resource Process have. Theoretically, there is no limit on number of child threads a process can have but it seems logical that process should have enough resource for administrative purpose for these threads. </p>

<p>Once there are multiple threads they are going to ask for same resource at the same time. For example, if two children are in one room then they will always fight for same toy. Same applies to threads.</p>

<h3 id="issues-with-sharing">3 Issues with Sharing</h3>
<ol>
  <li>How to <code>Share data</code>?</li>
  <li>How to ensure threads in a process, <code>executes one</code> at a time?</li>
  <li>How to ensure proper <code>sequencing</code> of events?</li>
</ol>

<p>To understand it better, lets take a real world example</p>

<h3 id="carls-jr-restaurant">Carl’s Jr. Restaurant</h3>
<p>Process</p>

<ol>
  <li>Customer arrives</li>
  <li>Employee takes order</li>
  <li>Employee cooks food</li>
  <li>Employee bag food</li>
  <li>Employee takes money</li>
  <li>Customer gets food and leaves</li>
</ol>

<p>If a single employee is doing steps from 1-6 then all other customers have to <code>wait</code> in line and its going to be long wait.
Instead, lets have multiple employees for taking order, cook food, bag food, take money. Each of these ‘employees’ are multiple threads on Process ‘Restaurant’. Each thread is responsible for doing <code>specialized task</code>.</p>

<p>Lets associate <code>3 issues</code> in current situation</p>

<ol>
  <li>What is shared data? - In step 2-3, Quantity of food. In step 3-4, how much food to bag</li>
  <li>Does sequence matters? -  Cook can’t cook food until order arrives. Employee can’t bag food until it is cooked. So, sequencing matters.</li>
</ol>

<p>Shared data can be passed for sharing either using <code>message passing</code> or storing that data in <code>global memoryi</code> of process and each thread read from that memory location.</p>

<p>The next logical question is how to ensure threads in a process executes one at a time i.e. in <code>exclusion</code>?
More formally there are three types of solution categories</p>

<ol>
  <li>Algorithmic approach</li>
  <li>Software Primitives</li>
  <li>Concurrent programming construct</li>
</ol>

<h3 id="algorithmic-approach">Algorithmic approach</h3>
<p>The algorithmic approach to process synchronization does not use any assistance from the computer architecture or the OS kernel. Instead it uses an arrangement of logical conditions to satisfy the desired synchronization requirements. <a href="http://books.google.com/books/about/Operating_Systems.html?id=kbBn4X9x2mcC" target="_blank">[Dhamdhere]</a></p>

<ul>
  <li>Two process algorithms</li>
  <li><a href="http://en.wikipedia.org/wiki/Dekker's_algorithm" target="_blank">Dekker’s Algorithm</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Peterson's_algorithm" target="_blank">Peterson’s Algorithm</a></li>
  <li>n process algorithm</li>
  <li><a href="http://en.wikipedia.org/wiki/Lamport's_bakery_algorithm" target="_blank">Bakery’s Algorithm</a></li>
</ul>

<h3 id="software-primitives">Software Primitives</h3>
<p>A set of software primitives for mutual exclusion e.g Semaphore, Locks etc. were developed to overcome the logical complexity of algorithmic implementations. This is implemented using some special architectural features of computer systems. But, ease of use and correctness still remained the major obstacle in a development of large concurrent systems.</p>

<h3 id="semaphores">Semaphores</h3>
<p>It is a shared integer variable with <code>non-negative</code> values that have <code>initialization, wait and signal</code> as a indivisible operation.</p>

<p>Semaphore Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Semaphore</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Constructor</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        Semaphore(char *debugName, int initialValue);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Destructor</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ~Semaphore();
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        int value;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span style="color:#036;font-weight:bold">List</span> *waitQueue;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        char *name;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>};
</pre></div>
</div>
</div>

<p>Semaphore Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Semaphore(char * debugName, int initialValue) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    name      = debugName;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    value     = initialValue;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    waitQueue = newList;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Destructors</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>~Semaphore() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    delete waitQueue;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Wait</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>P() - <span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Wait</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::P() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Disable</span> interrupts
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#080;font-weight:bold">not</span> available
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">while</span> (value == <span style="color:#00D">0</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        waitQueue-&gt;Append((void *)currentThread);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        currentThread-&gt;Sleep();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> now availble
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    value--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Signal</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Signal</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::V() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">Thread</span> *thread;  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Remove</span> first thread from wait queue
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    thread-&gt;(<span style="color:#036;font-weight:bold">Thread</span> *)waitQueue-&gt;Remove();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (thread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        scheduler-&gt;ReadyToRun(thread);  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<h3 id="locks">Locks</h3>
<p>The basic idea is to <code>close/acquire</code> a lock at the start of critical section or an indivisible operation and <code>open/release</code> it at the end of the critical section or the indivisible operation.</p>

<p>Locks solves how to ensure threads in a process executes one at a time but not the <code>sequencing problem.</code></p>

<p>Lock Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Lock</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span style="color:#036;font-weight:bold">Lock</span> (char *debugName);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ~Lock();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        char* getName() { <span style="color:#080;font-weight:bold">return</span> name; }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        void acquire();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        void release();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        bool isHeldByCurrentThread;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        char*   name;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span style="color:#036;font-weight:bold">List</span>*   lockWaitQueue;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        bool    lockFree;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span style="color:#036;font-weight:bold">Thread</span>* currentLockThread;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>};
</pre></div>
</div>
</div>

<p>Lock Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Lock</span> <span style="color:#036;font-weight:bold">Constructor</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Lock</span>::Lock(char * debugName) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    name              = debugName;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    currentLockThread = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    lockFree          = <span style="color:#069">TRUE</span>;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    lockWaitQueue     = new <span style="color:#036;font-weight:bold">List</span>;
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Lock Destructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Lock</span> <span style="color:#036;font-weight:bold">Destructor</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>~Lock() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    delete lockWaitQueue;  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<p>Lock Acquire</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Lock</span>::acquire() {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Disable</span> interrupts
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Check</span> <span style="color:#080;font-weight:bold">if</span> current thread is an owner
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#080;font-weight:bold">if</span> (currentThread == currentLockThread) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Already</span> owner  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#080;font-weight:bold">if</span>(lockFree == <span style="color:#069">TRUE</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        lockFree = <span style="color:#069">FALSE</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        currentLockThread = currentThread;      
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        lockWaitQueue-&gt;Append((void*) currentThread);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
</pre></div>
</div>
</div>

<p>Lock Release</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Lock</span>::release() {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">Thread</span>* waitingThread;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">if</span> (!isHeldByCurrentThread()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Thread</span> is <span style="color:#080;font-weight:bold">not</span> valid owner of lock its
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>trying to release
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        DEBUG(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Not a lock owner</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span style="color:#080;font-weight:bold">return</span>;      
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    waitingThread = (<span style="color:#036;font-weight:bold">Thread</span>*)lockWaitQueue-&gt;Remove();
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span style="color:#080;font-weight:bold">if</span> (waitingThread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        scheduler-&gt;ReadyToRun(waitingThread);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        currentLockThread = waitingThread;      
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        lockFree = <span style="color:#069">TRUE</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        currentLockThread = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
</pre></div>
</div>
</div>

<p>Lock Owner</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>bool <span style="color:#036;font-weight:bold">Lock</span>::isHeldByCurrentThread() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    <span style="color:#080;font-weight:bold">return</span> ((currentThread != currentLockThread) ?  <span style="color:#069">FALSE</span> : <span style="color:#069">TRUE</span>);
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<h3 id="concurrent-programming-construct">Concurrent Programming Construct</h3>
<p>Locks can only solve <code>mutual exclusion</code> problem, they can not solve <code>sequencing problem</code>. We need another mechanism <code>Monitors</code></p>

<p>Monitors is a programming language construct that supports both data access synchronization and control synchronization.</p>

<p>Monitors have 3 parts</p>

<ol>
  <li><code>Lock</code> for mutual exclusion</li>
  <li>1 or more <code>condition variables</code> for sequencing</li>
  <li>Monitor variables for make sequencing decisions -&gt; Shared data</li>
</ol>

<h3 id="condition-variables">Condition Variables</h3>
<p>Each condition variable is only associated with one lock.</p>

<p>Condition Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Condition</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        Condition(char *debugName);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ~Conditon();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        char* getName() { <span style="color:#080;font-weight:bold">return</span> name; }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        void wait(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        void signal(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        void broadcast(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        char* name;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span style="color:#036;font-weight:bold">List</span>* cvQueue;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span style="color:#036;font-weight:bold">Lock</span>* cvLock;  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>};
</pre></div>
</div>
</div>

<p>CV Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Condition</span>::Condition(char * debugName) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    name    = debugName;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    cvQueue = new <span style="color:#036;font-weight:bold">List</span>;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    cvLock  = <span style="color:#036;font-weight:bold">NULL</span>;  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>CV Destructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Condition</span>::~Condition() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    delete cvQueue;    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>CV Wait</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>void <span style="color:#036;font-weight:bold">Condition</span>::wait(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">This</span> lock is now associated with <span style="color:#036;font-weight:bold">CV</span> <span style="color:#080;font-weight:bold">and</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span><span style="color:#C2C">on</span></span>ly removed <span style="color:#080;font-weight:bold">when</span> last entry is removed
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>from cvQueue.
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        cvLock = conditionLock;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#080;font-weight:bold">if</span> (conditionLock == <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        interrupt-&gt;SetLevel(oldLevel);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    conditionLock-&gt;release();
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    cvQueue-&gt;Append((void*) currentThread);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Acquire</span> lock <span style="color:#080;font-weight:bold">when</span> get up
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    conditionLock-&gt;acquire();
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    interrupt-&gt;SetLevel(oldLevel);    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}
</pre></div>
</div>
</div>

<p>CV Signal</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>void <span style="color:#036;font-weight:bold">Conditon</span>::signal(<span style="color:#036;font-weight:bold">Lock</span> * conditionLock) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">If</span> nobody to signal, <span style="color:#080;font-weight:bold">return</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;Empty()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Verify</span> right lock is signalled
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvLock != conditionLock) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    thread = cvQueue-&gt;Remove();
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">if</span> (thread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        scheduler-&gt;ReadyToRun(thread);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        cvLock = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
</div>

<h3 id="producer-consumer-problem">Producer-Consumer Problem</h3>

<p>Lets consider we have <code>infinite buffer</code></p>

<p>monitor variable  =&gt; int itemCount = 0;<br />
monitor lock      =&gt; monitorLock;<br />
monitor condition =&gt; needItem;<br /></p>

<p>Producer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#069">true</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Produce</span> item
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Put</span> <span style="color:#080;font-weight:bold">in</span> a buffer
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    itemCount++;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    needItem.signal(&amp;monitorLock);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    monitorLock.Release();    
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
</pre></div>
</div>
</div>

<p>Consumer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#069">true</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#080;font-weight:bold">while</span>(intemCount == <span style="color:#00D">0</span>) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        needItem.wait(&amp;monitorLock);      
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Buffer</span> has atleast one item
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    itemCount--;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    monitorLock.Relase();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<h3 id="recommended-reading">Recommended reading</h3>

<ul>
  <li><a href="https://docs.google.com/file/d/0BySPJjyZBnC2Q20yU2lHeGdKQ3c/edit?usp=sharing" target="_blank">Implementing CV using semaphore</a></li>
  <li><a href="https://docs.google.com/file/d/0BySPJjyZBnC2ekFOMDlwNmNiQlk/edit?usp=sharing" target="_blank">Monitors by C.A.R Hoare </a></li>
  <li>Process synchronization in Linux Kernel</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[
<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br /></p>

<h3>Code snippet</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdlib.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;string.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **container = (<span style="color:#0a8;font-weight:bold">char</span> **)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>*));
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **start = container;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">char</span> *node;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#0a8;font-weight:bold">char</span> name[] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span> (container == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt;= <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        *container = node;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        container++;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    *container = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span style="color:#080;font-weight:bold">while</span> (*start != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%s</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, *start);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        start++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>}
</pre></div>
</div>
</div>
<p><br />
Focusing on following code section</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    *container = node;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    container++;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p><br />In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<blockquote><p>Compile code using<br />gcc -g fileName.c</p></blockquote>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>(gdb) l
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">16</span>      }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">17</span>        
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">18</span>            <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#00D">19</span>                node = (char *)malloc(<span style="color:#00D">10</span> * sizeof(char));
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#00D">20</span>                memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#00D">21</span>                *container = node;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#00D">22</span>                container++;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#00D">23</span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#00D">24</span>            *container = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#00D">25</span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>(gdb) ptype node
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>type = char *
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>(gdb) p node
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#d70">$1</span> = <span style="color:#00D">0x1001000e0</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>(gdb) x/<span style="color:#00D">8</span>bb node
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">0x56</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x69</span>        <span style="color:#00D">0x62</span>        <span style="color:#00D">0x68</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x76</span>        <span style="color:#00D">0x00</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>(gdb) x/<span style="color:#00D">8</span>ub node
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">86</span>        <span style="color:#00D">97</span>        <span style="color:#00D">105</span>        <span style="color:#00D">98</span>        <span style="color:#00D">104</span>        <span style="color:#00D">97</span>        <span style="color:#00D">118</span>        <span style="color:#00D">0</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>(gdb) x/<span style="color:#00D">8</span>tb node
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">01010110</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01101001</span>        <span style="color:#00D">01100010</span>        <span style="color:#00D">01101000</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01110110</span>        <span style="color:#00D">00000000</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
