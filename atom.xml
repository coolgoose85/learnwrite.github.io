<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Distributed Knowledge]]></title>
  <link href="http://distkeys.com/atom.xml" rel="self"/>
  <link href="http://distkeys.com/"/>
  <updated>2014-03-12T23:55:03-07:00</updated>
  <id>http://distkeys.com/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    <email><![CDATA[gautam.usc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[System Design Problems]]></title>
    <link href="http://distkeys.com/blog/2014/02/27/system-design-problems/"/>
    <updated>2014-02-27T22:51:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/02/27/system-design-problems</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#unique-user-id">Unique User ID</a></li>
  <li><a href="#mean-and-median">Mean and Median</a></li>
  <li><a href="#how-ls-works">How ls works?</a></li>
  <li><a href="#file-descriptor">File descriptor</a></li>
</ul>

<h3 id="unique-user-id">Unique User ID</h3>

<p>Design a system to generate unique id for 1 billion user in distributed system
<br /><br /></p>

<h3 id="mean-and-median">Mean and Median</h3>

<p>You are given say 20 nodes in a distributed system and each node have 1 billion numbers. Find mean and median. You can have some other nodes for co-ordination.</p>

<p>Mean = (sum of all the numbers) / total numbers<br />
Median = Mid element in sorted sequence</p>

<p>For example<br />
Input = [2, 3, 4, 1]<br /></p>

<p>Mean = (2+3+4+1) / 4 =2.5<br />
For median sorted sequence is [1, 2, 3, 4]. Median is 2 or 3.
<!-- more --></p>

<p><br /><br /></p>

<h3 id="how-ls-works">How ls works?</h3>

<ul>
  <li>Distributed systems people talk about NFS<br /></li>
  <li>Typical low-level systems folks get into the copy-on-write implementation of fork<br /></li>
  <li>Filesystem folks get into finding the blocks that constitute the directory
<br /><br /></li>
</ul>

<h3 id="file-descriptor">File descriptor</h3>

<p>How file descriptor is generated?</p>

<p>Before I start talking about <em>File Descriptor</em> lets first understand the Library functions and System calls.</p>

<blockquote>
  <p>System calls are functions that transfer control from the user process to the
operating system kernel.</p>
</blockquote>

<p>Functions such as <em>read()</em>, <em>write()</em> etc are system calls.</p>

<blockquote>
  <p>Library functions typically provide a richer set of features. Library functions are implemented on top of system calls.</p>
</blockquote>

<p>The first step is the <em>open()</em> system call which either open an existing file or create a new file. 
Multiple parameters can be provided for the requirement. For details of these parameters visit <a href="http://unixhelp.ed.ac.uk/CGI/man-cgi?open+2" target="_blank">here.</a></p>

<p>In C program, we use <em>fopen()</em> rather than <em>open()</em> and this is the difference between Library function and System Call. Library function <em>fopen()</em> will internally call <em>open()</em> and configure parameter based on input provided to <em>fopen()</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>fopen() </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>

<span class="predefined-type">int</span> main()
{
   FILE *fp;

    <span class="comment">//Open file test.txt in read mode</span>
   fp = fopen(<span class="string"><span class="delimiter">&quot;</span><span class="content">/tmp/test.txt</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>);
   fclose(fp);

   <span class="keyword">return</span> <span class="integer">0</span>;
}
</pre></div>
</div>
 </figure></notextile></div>

<p>Executing this code under <em>dtruss</em></p>

<blockquote><p>$ sudo dtruss ./file 2&gt;&amp;1 | grep open<br />open_nocancel(&#8220;/tmp/test.txt\0&#8221;, 0x0, 0x1B6)		 = -1 Err#2<br />open(&#8220;/dev/dtracehelper\0&#8221;, 0x2, 0x7FFF5CE62180)		 = 3 0<br />open(&#8220;.\0&#8221;, 0x0, 0x1)		 = 3 0<br />open(&#8220;/usr/lib/dtrace/libdtrace_dyld.dylib\0&#8221;, 0x0, 0x0)		 = 3 0</p></blockquote>

<p>Lets deep dive now into the File descriptor. In above C code we created a FILE* which is <em>file pointer or *file descriptor</em> at Library function level. In reality library function <em>fopen()</em> will call system call <em>open()</em> which will get the <em>file descriptor</em> information from filesystem. </p>

<p><em>fopen()</em> library call want to embed the file descriptor information with some additional information. For this purpose a struct is created called FILE and in this structure file descriptor information returned by <em>open()</em> system call is stored with other information.</p>

<blockquote>
  <p>FILE structure fields may vary depending on OS</p>
</blockquote>

<p>In MAC OS its as follows</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>FILE - stdio.h </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
 <span class="comment">/*
  * stdio state variables.
  *
  * The following always hold:
  *
  *        if (_flags&amp;(__SLBF|__SWR)) == (__SLBF|__SWR),
  *                _lbfsize is -_bf._size, else _lbfsize is 0
  *        if _flags&amp;__SRD, _w is 0
  *        if _flags&amp;__SWR, _r is 0
  *
  * This ensures that the getc and putc macros (or inline functions) never
  * try to write or read from a file that is in `read' or `write' mode.
  * (Moreover, they can, and do, automatically switch from read mode to
  * write mode, and back, on &quot;r+&quot; and &quot;w+&quot; files.)
  *
  * _lbfsize is used only to make the inline line-buffered output stream
  * code as compact as possible.
  *
  * _ub, _up, and _ur are used when ungetc() pushes back more characters
  * than fit in the current _bf, or when ungetc() pushes back a character
  * that does not match the previous one in _bf.  When this happens,
  * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
  * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
  *
  * NB: see WARNING above before changing the layout of this structure!
  */</span>

 <span class="keyword">typedef</span> <span class="keyword">struct</span> __sFILE {
         <span class="predefined-type">unsigned</span> <span class="predefined-type">char</span> *_p;        <span class="comment">/* current position in (some) buffer */</span>
         <span class="predefined-type">int</span>     _r;               <span class="comment">/* read space left for getc() */</span>
         <span class="predefined-type">int</span>     _w;               <span class="comment">/* write space left for putc() */</span>
         <span class="predefined-type">short</span>   _flags;           <span class="comment">/* flags, below; this FILE is free if 0 */</span>
         <span class="predefined-type">short</span>   _file;            <span class="comment">/* fileno, if Unix descriptor, else -1 */</span>
         <span class="keyword">struct</span>  __sbuf _bf;       <span class="comment">/* the buffer (at least 1 byte, if !NULL) */</span>
         <span class="predefined-type">int</span>     _lbfsize;         <span class="comment">/* 0 or -_bf._size, for inline putc */</span>
 
         <span class="comment">/* operations */</span>
         <span class="directive">void</span>    *_cookie;        <span class="comment">/* cookie passed to io functions */</span>
         <span class="predefined-type">int</span>     (*_close)(<span class="directive">void</span> *);
         <span class="predefined-type">int</span>     (*_read) (<span class="directive">void</span> *, <span class="predefined-type">char</span> *, <span class="predefined-type">int</span>);
         fpos_t  (*_seek) (<span class="directive">void</span> *, fpos_t, <span class="predefined-type">int</span>);
         <span class="predefined-type">int</span>     (*_write)(<span class="directive">void</span> *, <span class="directive">const</span> <span class="predefined-type">char</span> *, <span class="predefined-type">int</span>);
 
         <span class="comment">/* separate buffer for long sequences of ungetc() */</span>
         <span class="keyword">struct</span>  __sbuf _ub;     <span class="comment">/* ungetc buffer */</span>
         <span class="keyword">struct</span> __sFILEX *_extra; <span class="comment">/* additions to FILE to not break ABI */</span>
         <span class="predefined-type">int</span>     _ur;            <span class="comment">/* saved _r when _r is counting ungetc data */</span>
 
         <span class="comment">/* tricks to meet minimum requirements even when malloc() fails */</span>
         <span class="predefined-type">unsigned</span> <span class="predefined-type">char</span> _ubuf[<span class="integer">3</span>]; <span class="comment">/* guarantee an ungetc() buffer */</span>
         <span class="predefined-type">unsigned</span> <span class="predefined-type">char</span> _nbuf[<span class="integer">1</span>]; <span class="comment">/* guarantee a getc() buffer */</span>
 
         <span class="comment">/* separate buffer for fgetln() when line crosses buffer boundary */</span>
         <span class="keyword">struct</span>  __sbuf _lb;     <span class="comment">/* buffer for fgetln() */</span>
 
         <span class="comment">/* Unix stdio files get aligned to block boundaries on fseek() */</span>
         <span class="predefined-type">int</span>     _blksize;        <span class="comment">/* stat.st_blksize (may be != _bf._size) */</span>
         fpos_t  _offset;        <span class="comment">/* current lseek offset (see WARNING) */</span>
 } FILE;
</pre></div>
</div>
 </figure></notextile></div>

<p>In above snippet</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>FILE - stdio.h </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
  &lt;code&gt;<span class="comment">// File descriptor from open()&lt;/code&gt;</span>
  <span class="predefined-type">short</span>   _file;            <span class="comment">/* fileno, if Unix descriptor, else -1 */</span>
  
  <span class="comment">// The buffer through which the data will pass to system calls.</span>
  <span class="keyword">struct</span>  __sbuf _bf;       <span class="comment">/* the buffer (at least 1 byte, if !NULL) */</span>
  <span class="predefined-type">int</span>     _lbfsize;         <span class="comment">/* 0 or -_bf._size, for inline putc */</span>

  <span class="predefined-type">unsigned</span> <span class="predefined-type">char</span> _ubuf[<span class="integer">3</span>]; <span class="comment">/* guarantee an ungetc() buffer */</span>
  <span class="predefined-type">unsigned</span> <span class="predefined-type">char</span> _nbuf[<span class="integer">1</span>]; <span class="comment">/* guarantee a getc() buffer */</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><img src="http://distkeys.com/assets/fopen.png" title="[fopen.png]" /></p>

<p>To be continued…</p>

<p><br /><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading List]]></title>
    <link href="http://distkeys.com/blog/2014/02/21/reading-list/"/>
    <updated>2014-02-21T21:22:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/02/21/reading-list</id>
    <content type="html"><![CDATA[<h3 id="now-readinglistening">Now Reading/Listening</h3>

<p><a data-pin-do="embedBoard" href="http://www.pinterest.com/gautamusc/now-readinglistening/" data-pin-scale-width="115" data-pin-scale-height="150" data-pin-board-width="900">Follow Vaibhav Gautam’s board Now Reading/Listening on Pinterest.</a>
<!-- Please call pinit.js only once per page -->
<script type="text/javascript" async="" src="http://distkeys.com//assets.pinterest.com/js/pinit.js"></script></p>

<!-- more -->

<p><br /></p>

<p><a data-pin-do="embedUser" href="http://www.pinterest.com/gautamusc/" data-pin-scale-width="115" data-pin-scale-height="520" data-pin-board-width="900">Visit Vaibhav Gautam’s profile on Pinterest.</a>
<!-- Please call pinit.js only once per page -->
<script type="text/javascript" async="" src="http://distkeys.com//assets.pinterest.com/js/pinit.js"></script></p>

<p><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming in Distributed Systems]]></title>
    <link href="http://distkeys.com/blog/2014/02/16/naming-in-distributed-systems/"/>
    <updated>2014-02-16T22:47:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/02/16/naming-in-distributed-systems</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#directory-service-for-wan--dns">Directory Service for WAN – DNS	†</a>    <ul>
      <li><a href="#granularity-of-names">Granularity of Names</a></li>
      <li><a href="#caching-of-namesplacement-of-caches">Caching of Names/Placement of Caches</a></li>
      <li><a href="#use-of-replication">Use of Replication</a></li>
      <li><a href="#use-of-distribution">Use of Distribution</a></li>
      <li><a href="#consistencysynchronization-requirement">Consistency/Synchronization Requirement</a></li>
    </ul>
  </li>
  <li><a href="#file-systemcontent-management-system-cms">File system/Content management system (CMS)</a>    <ul>
      <li><a href="#granularity-of-names-1">Granularity of Names</a></li>
      <li><a href="#caching-of-namesplacement-of-caches-1">Caching of Names/Placement of Caches</a></li>
      <li><a href="#use-of-replication-1">Use of Replication</a></li>
      <li><a href="#use-of-distribution-1">Use of Distribution</a></li>
      <li><a href="#consistencysynchronization-requirement-1">Consistency/Synchronization Requirement</a></li>
    </ul>
  </li>
</ul>

<h3 id="introduction">Introduction</h3>

<p>The scope of this post is limited to the study of naming systems for following system<br />
•	Directory Service for Wide Area<br />
•	File system or Content manage system for collaborative work<br /></p>

<p>Naming can be categorized into four kinds<br />
1. Host based naming<br />
2. Global naming<br />
3. User/Objet centered naming <br />
4. Attribute based naming<br />
<!-- more --></p>

<p>The system we are going post will be falling into one of these category or hybrid of it. On the broad level, naming is associated with <strong>users, hosts, services, files, objects and groups</strong>. The requirements for directory for wide area and for Filesystem/CMS can be broadly categorize into following components:<br />
•	Scalability<br />
•	Availability<br />
•	Consistency<br />
•	Reliability<br />
•	Fault isolation<br />
•	Performance and Efficiency<br /><br /></p>

<h3 id="directory-service-for-wan--dns">Directory Service for WAN – DNS	†</h3>

<p>DNS is the case study of directory service for wide area network. The various requirements of DS†† for WAN††† has been summarized and presented in form of DNS as follows:</p>

<h4 id="granularity-of-names">Granularity of Names</h4>

<p>In DNS, domain names are represented by a <strong>character strings</strong> and machine oriented <strong>binary identifier</strong> is called Internet Address. Domain name changes rarely than the host more down the <strong>hierarchy</strong> so, on the course of granularity the <strong>less</strong> frequent to change lead to <strong>less</strong> number of messages and less number of objects to deal. In DNS mechanism of name to machine address lookup, finer the level of granularity more it is prone to change hence leads to <strong>more</strong> number of messages and query flow in network. So higher the hierarchy is lower the name granularity and lower the hierarchy is higher the name granularity.<br /><br /></p>

<h4 id="caching-of-namesplacement-of-caches">Caching of Names/Placement of Caches</h4>

<p>All names are cached which the name server heard about from other name servers while handling the request of name resolution.<br /></p>

<p>• <strong>Iterative query</strong> – Name query goes to local name server where server matches query to the longest name prefix in its local cache. It caches the request and response for future reference.<br />
• <strong>Recursive query</strong> – Every level of name server maintains the cache, in other words the multilevel caching, which tries to resolves longest sequence of name query.  In recursive query look up the server caches the query request and as well as query response.<br />
• <strong>Negative Caching</strong> – Negative caching is used for bad names or absence of a resource record in order to answer future queries as quickly.<br /><br /></p>

<h4 id="use-of-replication">Use of Replication</h4>

<p>To ensure <strong>high availability</strong> and enhance <strong>performance</strong> of name service name servers are replicated and the frequency of <strong>replication</strong> depends upon the frequency of its use and the degree off its <strong>importance</strong> in the network. For example, root name server is highly replicated to ensure its high availability and avoiding frequent name queries.<br /><br /></p>

<h4 id="use-of-distribution">Use of Distribution</h4>

<p>The hierarchical model of DNS distributes the job of managing the handing out of names by <strong>distributing the responsibility</strong> of operating name servers. Distribution is maintained in terms of different domain name servers for different top levels domains, so there is a natural separation in terms of sending particular kind of name queries to one name server and other kind of name queries to other name servers.<br /></p>

<p>More formally, Namespace is delegated at every domain and the whole space is partitioned into number of area called <strong>zones</strong>, which starts a domain and extends till leaf nodes, which is individual computer, or to other domain where other zone starts.<br /><br /></p>

<h4 id="consistencysynchronization-requirement">Consistency/Synchronization Requirement</h4>

<p>DNS cache manager synchronizes the cache records when expired. For consistency caches maintains the <strong>time to live</strong> for every entry. </p>

<p>For any update operation the primary server of a zone is contacted. Each secondary server periodically establishes a communication connection with primary server and gets the update.<br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="file-systemcontent-management-system-cms">File system/Content management system (CMS)</h3>

<p>File System or CMS for collaborative work is smaller environment as compared to directory service for wide area. Hence, the priority of requirement we discussed earlier changes. The scalability for small scale is not the top priority but it remains requirement for future. But, other requirements like Availability, consistency etc remains a major requirements.<br /></p>

<p>CMS/File System for University can have Global naming, User centric naming system, attribute type naming scheme. <br /></p>

<h4 id="granularity-of-names-1">Granularity of Names</h4>

<p>Granularity of names in CMS systems is large in nature. Since, the system is not huge and not distributed of highest degree, large granularity works. Moreover, in system like this more details can be accommodated in to naming increasing the performance of naming system.<br /></p>

<p>For instance, Tilde naming system is a relative naming system based on collection of small, disjoint, hierarchical namespace. The level of will be very less as compared to wide area hence lower the granularity. <br />
In Prospero File System, Virtual System Model implements the concept of closure, which reduces the granularity.<br /><br /></p>

<h4 id="caching-of-namesplacement-of-caches-1">Caching of Names/Placement of Caches</h4>

<p>In CMS/File Systems environment caching of names provide enormous performance boost because the effect of locality of reference or caching the alias plays a significant role. Cache can be most efficiently used for most frequent access file names, which is limited and manageable in case of small environment like university. Cache can be managed on centralized server or the primary name server based on system naming architecture and boosts the overall availability.<br /><br /></p>

<h4 id="use-of-replication-1">Use of Replication</h4>

<p>Replication is of required for high availability of naming service.  Replication enhances the performance in University environment when using Global naming system and act as a load balancing to serve request quickly. It provides the fault tolerance by maintaining the replication of progressive collaborative work.<br /><br /></p>

<h4 id="use-of-distribution-1">Use of Distribution</h4>

<p>Distribution in global naming system if designed hierarchy, in the case of Prospero, local name server associated serves each requests. Next component is resolved by directory server in response of local name server. So, the naming service is distributed in the context of processing of user name query in <strong>distributed fashion</strong> rather than query served by dedicated <strong>one name server</strong>. Maintaining a non-distributed global name service irrespective of <strong>distributed file content</strong> can be a <strong>bottleneck</strong> and global name server <strong>performance issue</strong>, when files across the server is moved and renamed frequently.<br /><br /></p>

<h4 id="consistencysynchronization-requirement-1">Consistency/Synchronization Requirement</h4>

<p>Consistency is achieved by synchronization and in collaborative environment like university synchronization is high priority. Stale name values in cache or time to live values in cache can lead to poor performance in dynamic collaborative environment.  Although frequent synchronization leads to degrade the system performance but in order to provide consistency and reliability it can be compromised.</p>

<p><br /><br /><br /><br />
† Domain name service<br />
†† Directory Service<br />
††† Wide Area Network<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context Switch]]></title>
    <link href="http://distkeys.com/blog/2014/02/16/context-switch/"/>
    <updated>2014-02-16T14:53:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/02/16/context-switch</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#message-passing">Message Passing</a></li>
  <li><a href="#remote-procedure-calls-rpc">Remote Procedure Calls (RPC)</a></li>
  <li><a href="#lightweight-remote-procedure-call">Lightweight Remote Procedure Call</a></li>
  <li><a href="#distributed-shared-memory--ivy">Distributed Shared Memory – IVY</a></li>
  <li><a href="#further-reading">Further reading</a></li>
</ul>

<p>The scope of this post is limited to the study of context switches in various communication and synchronization primitives in distributed systems mainly focus on following:</p>

<p>•	Message Passing<br />
•	Remote Procedure Calls (RPC) <br />
•	Light weight Procedure Calls (LRPC)<br />
•	Distributed Shared Memory (DSM)<br /></p>

<!-- more -->
<p><br /></p>

<h3 id="message-passing">Message Passing</h3>

<p>Message passing is the communication primitive based on the <code class="myyellow">Client – Server architecture</code> involving communication only through a message passing. In message passing architecture the user process generates the datagram and interrupts the kernel for sending datagram to receiver. This process needs a context switch. <br /><br />
At receiving end, after receiving a datagram by the service the data is sent to application in User Space from Kernel module, which involves the context switch. Same process is done back and forth to send and receive data with respective context switching in Message passing scheme of communication.<br /><br />
Synchronization is achieved by blocking send and receives which may result in blocking the process in execution, while it receives a response from receiver, and volunteering giving up the CPU which might be argued as a context switch but in this post this mechanism is not treated as a context switch. 
<br /><br /></p>

<h3 id="remote-procedure-calls-rpc">Remote Procedure Calls (RPC)</h3>

<p>RPC communication models aims to achieve the results of normal procedure call but in distributed environment. RPC is a level of abstraction on top of message passing and since, the nature of procedure call is continuous RPC follows a synchronous communication methodology. Four components in RPC are:<br /></p>

<p>•	User – In user space<br />
•	User Stub and RPC Communication Package – In Kernel Space<br />
•	Server Stub and RPC Communication Package – In Kernel Space<br />
•	Server – In user space on remote machine<br /></p>

<p>User makes an RPC call like a normal procedure call which result in calling User stub and later the RPC communication package which is called the RPC runtime often. This process involves the context switching and the kernel takes care of RPC request using user stub and RPC runtime for marshaling data and sending to receiver.</p>

<p>At the receiving end, the receiving and unmarshal of data packet is done by RPC runtime and server stub. The data is sent to the required user process for execution. This is point of context switch at the receiving side. Same procedure happens while sending result back to sender for the RPC request. The whole process involves the <code class="myyellow">four context switches.</code> Four context switches is because the interrupt handler receives the incoming packets and delivers to the correct process. It can be reduced to even two context switches if incoming message can be delivered directly to correct process without the intervention of interrupt handler.</p>

<p><code class="myyellow">Binding</code> is the process of knowing the machine names and location which sender machine can connect for RPC operation. It can lead to increase in context switch as it is itself implemented as a separate module. In <code class="myyellow">RPC paper Grapevine</code> is used as a database for binding.  Sending and receiving communication can lead to two additional context switches on the sender side. Same is for the receiver side. 
<br /><br /></p>

<h3 id="lightweight-remote-procedure-call">Lightweight Remote Procedure Call</h3>

<p>This communication model focuses on communication between protection domains on the same machine. In a high level view, LRPC client makes a procedure call to server procedure by kernel trap which leads to a context switch. Kernel processes the request and when the called procedure completes result is returned back to the client from kernel which again leads to the context switch.<br /></p>

<p>Moving to fine granularity of LRPC, during the binding process, client makes import interface request via kernel. Kernel sends the request to server’s waiting clerk and in response waiting clerk sends response to kernel with information. Kernel then return the binding Object to client back and the whole process requires four context switches.<br /></p>

<p>LRPC minimize the use of shared data structures which internally implements its own locks so no explicit lock is required for synchronization. LRPC implements the optimization by reducing the number of context switches by caching domains on idle processors. Kernel looks for the idle processor for the client request and if found one the request is routed to the processor without any context switch. Same is done when returning the result back to client. Kernel looks for any idle client process and uses it without any context switch. If no idle domain can be found then a single processor context switching is done.
<br /><br /></p>

<h3 id="distributed-shared-memory--ivy">Distributed Shared Memory – IVY</h3>

<p>Distributed shared memory is the mode of communication in which a single address space is shared by all the processor. Processor can access any memory location at any time. In this process page size plays an important factor in performance. If the page size is big the two processes are accessing different section of same page, it reduces the performance by generating page fault. <br />
The <code class="myyellow">false sharing</code> increases the context switch.  Context switching and synchronization varies in various methodologies to handle Memory Coherent problem. <br />
<code class="myyellow">Page invalidation</code> approach for Page Synchronization invalidates all the copies of page. Next time when other process requires this page it generates the page fault hence increase the number of context switches. <br />
In <code class="myyellow">write broadcast</code> approach fault handler updates each copy. Next time process don’t generate the page fault because it has an updated copy hence reduces the context switch. In various page ownership approaches like <em>fixed, dynamic with combination of invalidate and write broadcast</em> context switches are required just from passing control from user space to kernel space and vice versa. Then the execution for <em>centralize and distributed</em> approaches can be carried away in kernel mode with different strategies for message passing.</p>

<p><br /><br /></p>

<h3 id="further-reading">Further reading</h3>

<ol>
  <li>Message Passing</li>
  <li>Distributed Shared Memory in <a href="https://www.dropbox.com/s/ukj7np5c78161at/shared%20virtual%20memory%20system.pdf" target="_blank">Ivy</a> (Integrated shared Virtual memory at
Yale) </li>
  <li><a href="https://www.dropbox.com/s/1ktdgouptq41fve/2.ImplementingRPC.pdf" target="_blank">Birrel and Nelson Remote Procedure Call</a></li>
  <li><a href="https://www.dropbox.com/s/7i4kvjg741r5idz/LRPC.pdf" target="_blank">Lightweight Remote Procedure Call</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scale in Distributed Systems]]></title>
    <link href="http://distkeys.com/blog/2014/01/05/scale-in-distributed-systems/"/>
    <updated>2014-01-05T09:41:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/01/05/scale-in-distributed-systems</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#systems-designed-to-scale">Systems designed to Scale</a></li>
  <li><a href="#naming-and-directory-services">Naming and Directory Services</a>    <ul>
      <li><a href="#granularity-of-naming">Granularity of Naming</a></li>
      <li><a href="#reducing-load">Reducing Load</a></li>
      <li><a href="#unique-identifier-based-naming-uid">Unique Identifier based naming (UID)</a></li>
      <li><a href="#directory-services">Directory services</a></li>
      <li><a href="#growth-and-reorganization">Growth and reorganization</a></li>
    </ul>
  </li>
  <li><a href="#security-subsystem">Security Subsystem</a>    <ul>
      <li><a href="#authentication">Authentication</a></li>
      <li><a href="#authorization">Authorization</a></li>
      <li><a href="#accounting">Accounting</a></li>
    </ul>
  </li>
  <li><a href="#remote-resources">Remote resources</a>    <ul>
      <li><a href="#communication">Communication</a></li>
    </ul>
  </li>
  <li><a href="#replication">Replication</a>    <ul>
      <li><a href="#placement-of-replicas">Placement of replicas</a></li>
      <li><a href="#replica-consistency">Replica Consistency</a></li>
    </ul>
  </li>
  <li><a href="#distribution">Distribution</a>    <ul>
      <li><a href="#placement-of-servers">Placement of servers</a></li>
      <li><a href="#finding-the-right-server">Finding the right server</a></li>
    </ul>
  </li>
</ul>

<h3 id="introduction">Introduction</h3>

<p>This blog is summary of the research paper <a href="https://www.dropbox.com/s/s9smkjhyykasllg/Scale%20in%20distributed%20systems.pdf" target="_blank"> Scale in Distributed Systems.</a></p>

<p>A system is Scalable if it can handle addition of users and resources without suffering a noticeable loss of performance or increase in administrative complexity.
<br /></p>

<h3 id="systems-designed-to-scale">Systems designed to Scale</h3>

<p>Some historic systems desgined to scale</p>

<ul>
  <li><a href="http://courses.cs.washington.edu/courses/cse451/07au/lectures/pending/p260-birrell.pdf" target="_blank">Grapevine</a>, <a href="http://dl.acm.org/citation.cfm?id=2081&amp;dl=ACM&amp;coll=DL&amp;CFID=395866995&amp;CFTOKEN=19566412" target="_blank">ACM Paper</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Domain_Name_System" target="_blank">DNS</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)" target="_blank">Kerberos</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Sprite_(operating_system)" target="_blank">Sprite</a></li>
  <li><a href="http://research.microsoft.com/en-us/um/people/blampson/36-GlobalNames/WebPage.html" target="_blank">Global name services and authentication services</a></li>
  <li><a href="http://en.wikipedia.org/wiki/LOCUS_(operating_system)" target="_blank">Locus</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Andrew_File_System" target="_blank">Andrew</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Project_Athena" target="_blank">Project Athena</a></li>
  <li><a href="http://www.cdf.toronto.edu/~csc469h/fall/handouts/nitzberg91.pdf" target="_blank">Dash</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Amoeba_(operating_system)" target="_blank">Amoeba</a>
<!-- more --></li>
</ul>

<p>As systems scales and accessible objects grows, locating objects of interest becomes difficult. Systems addressed this aspect of challenges are</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/9P" target="_blank">Plan 9</a></li>
  <li><a href="" target="_blank">Profile</a></li>
  <li><a href="http://gost.isi.edu/products/prm/papers/prm-cpe.ps" target="_blank">Prospero</a></li>
  <li><a href="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=4798" target="_blank">QuickSilver</a></li>
  <li><a href="https://www.usenix.org/legacy/publications/compsystems/1990/fall_comer.pdf" target="_blank">Tilde</a></li>
</ul>

<p><br />
Paper talks about problem of scale and general solution. These solution fall into three categories</p>

<blockquote><p>Replication, Distribution and Caching</p></blockquote>

<script src="http://d3js.org/d3.v3.min.js"></script>

<style type="text/css">
.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 11px;
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

  </style>

<style>

#chart, #header, #footer {
  position: absolute;
  top: 0;
}

#header.inverted, #footer.inverted {
  color: #fff;
  text-shadow: 0 1px 4px #000;
}


rect {
  fill: none;
  pointer-events: all;
}

line {
  stroke: #000;
  stroke-width: 1.5px;
}

.string, .regexp {
  color: #f39;
}

.keyword {
  color: #00c;
}

.comment {
  color: #777;
  font-style: oblique;
}

.number {
  color: #369;
}

.class, .special {
  color: #1181B8;
}

</style>

<body>
    <div id="body">
        click or option-click to expand or collapse
    </div>
    <script type="text/javascript">

var m = [20, 120, 20, 120],
    w = 1280 - m[1] - m[3],
    h = 650 - m[0] - m[2],
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

d3.json("/assets/scaleDS.json", function(json) {
  root = json;
  root.x0 = h / 2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  toggle(root.children[1]);
  toggle(root.children[1].children[2]);
  toggle(root.children[5]);
  toggle(root.children[5].children[0]);

  update(root);
});

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 130; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

//  nodeEnter.append("svg:text")
//      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
//      .attr("dy", ".35em")
//      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
//      .text(function(d) { return d.name; })
//      .style("fill-opacity", 1e-6);

  nodeEnter.append("svg:a").attr("xlink:href", function(d) { return d.url; }).attr("target", "_blank")
      .append("svg:text").text(function(d) { return d.name; })
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}

</script>
</body>

<h3 id="naming-and-directory-services">Naming and Directory Services</h3>

<p>A name refers to an object. An address tells where that object can be found. The binding of a name is the object to which it refers.</p>

<blockquote><p>A name server (or directory server) maps a name to information about the name&#8217;s binding.</p></blockquote>
<p><br /></p>

<h4 id="granularity-of-naming">Granularity of Naming</h4>

<blockquote><p>The granularity of the objects named affects the size of naming the database, the frequency of queries and the read-to-write ratio which affects techniques can be used in naming in large systems.</p></blockquote>

<p>In an approach of <code>fine grained naming</code>, files must include name of the host so that object could be located.</p>

<blockquote><p>Problem with finer grained naming is that moving objects is difficult since objects are tied to the server in their names.</p></blockquote>

<p>Another naming approach is <code>common prefix naming</code>, where group of objects share a common prefix and name service maps the prefix to the server. The remainder of the name is resolved locally by the server on which the object is stored.</p>

<p><strong>Advantages</strong>
 <br />
 1. Clients can cache the mapping keys as prefix changes less frequently than the rest of the name<br />
 2. Since objects does not have to include server name, it is easy to move objects around</p>

<p><strong>Disadvantage</strong><br />
 Objects sharing common prefixes should be stored together
<br /><br /></p>

<h4 id="reducing-load">Reducing Load</h4>

<ul>
  <li><code class="myyellow">Replication</code> - When multiple name server handle the same queries, different clients are able to send their requests to different servers.</li>
</ul>

<p><strong>Choice of Server</strong><br />
1. Physical Locations<br />
2.  Relative loads on servers<br />
3. Random server selection<br /></p>

<p><code class="myred">Problem</code>
Its hard to make <code>replica consistent.</code></p>

<ul>
  <li><code class="myyellow">Distribution</code> - Spread the name resolution load across servers. </li>
</ul>

<p>In distribution, namespace is assigned to different servers.</p>

<p><strong>Advantages</strong><br />
1.  Since part of the naming database is stored on each server, thus reducing number of queries and updates to be processed.<br />
2.  As size of each database is reduced, each request can be handled faster.<br />
3.  The client must be able to determine which server contains the requested information.
<br /></p>

<ul>
  <li><code class="myyellow">Caching</code><br />
By Caching the mapping from a prefix to the name server handling that prefix, future names sharing the same prefix can be resolved with fewer messages.</li>
</ul>

<p><code class="myred">Problem</code></p>
<blockquote><p>Caching is a form of replication and as similar to replication biggest difficulty is the need to for consistency.</p></blockquote>
<p><br /></p>

<h4 id="unique-identifier-based-naming-uid">Unique Identifier based naming (UID)</h4>

<p>UID based naming is based on UID which is used to name and grant access right to the object.</p>

<p>UID may be thought as addresses. It contain <code>server information</code> identifying the server address and an <code>identifier</code> to be interpreted by the server to locate the object. </p>

<p><code class="myred">Problem</code>
<br /></p>

<p>UID identify the server on which an object resides. When object moves to other location the UID is no longer valid for the object they reference.<br /></p>

<p>This problem can be <code class="mygreen">solved</code> using technique called <code>forward pointers</code>. With forward pointers a user attempting to use an old address to access an object is given a new UID containing new address.</p>

<p><code class="myred">Problem</code> with forward chaining is that the chain of links can become lengthy and reduce performance. Also, if one of the node is down then access to link is prevented.</p>

<p>This problem can be <code class="mygreen">solved</code> by requiring each object to have a home site with the forward pointer at that site kept up-to-date. </p>

<p><a href="http://gost.isi.edu/products/prm/papers/prm-cpe.ps" target="_blank">Prospero</a> supports UIDs with expiration dates. Its directory service guarantees that the UIDs it maintains are kept up-to-date. The use of expiration dates makes getting rid of forwarding pointers possible, once all possible UIDs with the old address have expired.
<br /><br /></p>

<h4 id="directory-services">Directory services</h4>

<p>Directory servers translate symbolic names into the UIDs. A directory can contain UIDs for files, other directories, or- in fact- any object for which a UID exists. The load on directory servers is easily distributed as different parts of a name space can reside on different machines.</p>

<p>The primary difference between a name server and a directory server is that the directory server usually possesses little information about the full name of an object. A directory server can support pieces of independent name spaces.</p>

<p>Prospero and Amoeba use directory servers to translate names to UIDs
<br /><br /></p>

<h4 id="growth-and-reorganization">Growth and reorganization</h4>

<p>When two organizations with separate global name spaces merge, reorganize, or otherwise combine their name spaces, a <code class="myred">problem</code> arises if the name spaces are not disjoint.</p>

<p>New names and new prefix is assigned with old name and it is a problem for any names that were embedded in programs or otherwise specified before change.</p>

<p>DEC’s <a href="http://research.microsoft.com/en-us/um/people/blampson/36-GlobalNames/WebPage.html" target="_blank">global name service</a> addresses the above problem<br />
1. Associating a unique number with the root of every independent name space.<br />
2.  When a file name is stored, the number for the root of the name space can be stored along with the name. <br />
3. When name spaces are merged, an entry is made in the new root, pairing the UID of each previous root with the prefix required to find it.<br />
4.  When a name with an associated root UID is resolved, the UID is checked; if it does not match that for the current root, the corresponding prefix is prepended, allowing the embedded name to work.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="security-subsystem">Security Subsystem</h3>

<p>As system size grows, the number of points from which an intruder can enter the network increases and security becomes increasingly important and difficult to implement.</p>

<h4 id="authentication">Authentication</h4>

<ul>
  <li><code class="myyellow"> Password based authentication</code><br />
This technique involves using password on each host.</li>
</ul>

<p><code class="myred">Problems</code><br />
1. Requires maintenance of a password database on multiple nodes.<br />
2. Its cumbersome, if user have to present password each time a new service is requested.<br />
3. Letting the workstation remember the user’s password is risky.<br />
4. Vulnerable to the theft of password by eavesdrop on the network.<br /></p>

<ul>
  <li>
    <p><code class="myyellow"> Host based authentication</code><br />
In this technique, client is authenticated by the local host. Remote servers trust the host to properly identify the client.</p>
  </li>
  <li>
    <p><code class="myyellow"> Encryption based authentication</code><br />
In this technique, passwords are never sent across the network instead each user is assigned an encryption key. The key is used to prove the user’s identity. 
<a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)" target="_blank">Kerberos authentication protocol</a> is example of large scale system authentication.
<br /></p>
  </li>
</ul>

<h4 id="authorization">Authorization</h4>

<p><strong>Approach 1</strong><br />
Client send authorization request to server and server forwards request to authorization service. </p>

<p>Disadvantage of this approach is access control service can become bottleneck.</p>

<p><strong>Approach 2</strong><br />
Client is authenticated and then server makes its own decision about whether or not the client is authorized to perform an operation. </p>

<p>In <a href="http://en.wikipedia.org/wiki/Andrew_File_System" target="_blank">Andrew File System</a>, each directory has an access control list (ACL) that identifies the users authorized to access the files within the directory. ACL entries in Andrew can contain the names of groups and user can be part of one or more groups.</p>

<blockquote><p>A disadvantage ACL model is that the client must first be authenticated, then looked up in a potentially long list; the lookup may involve the recursive expansion of multiple groups and may require interaction with other servers.</p></blockquote>

<p>Another authorization model is <code>capability based authorization</code> in which the user maintains the list of the objects for which access is authorized. A client presents its capability when it wishes to access an object. The server then compares the bit pattern of the capability with that stored along with the object; if they match, the access is allowed.</p>

<p><strong>Advantages</strong><br />
1. The server can make its access control decision without contacting other servers.<br />
2. The server does not need to maintain a large authorization database that would be difficult to keep up-to-date in a large system.<br /></p>

<p><strong>Disadvantages</strong><br />
1. Capabilities can only be revoked in a group.<br />
2. Capabilities are revoked by changing the bit pattern, but this causes all outstanding capabilities for that object to be immediately invalidated. The new capability must then be reissued to all legitimate users.<br />
<br /><br /></p>

<h4 id="accounting">Accounting</h4>

<p>Most distributed systems handle accounting on a host-by-host basis. A distributed, secure, and scalable accounting mechanism is needed, especially in large systems that cross administrative boundaries.<br /></p>

<ol>
  <li><code>Bank server approach</code> - Amoeba uses this approach where bank servers handle accounting by maintaining accounts on behalf of users and servers; users transfer money to servers, which then draw upon the balance as resources are used.<br /></li>
  <li><code>Proxy-based accounting</code> - proxy-based accounting is tied
much closer to authentication and authorization. The client grants the server a proxy that allows the server to transfer funds from the client’s account.
<br /></li>
</ol>

<p><strong>Replication, Distribution and Caching in Security</strong><br />
When these techniques are applied in the area of security, the following considerations must be kept in mind:<br /></p>

<ol>
  <li>When a server that maintains secret keys is <code>replicated</code>, the compromise of any replica can result in the compromise of important keys.<br /></li>
  <li>The security of the service is that of the weakest of all <code>replicas</code>.<br /></li>
  <li>When <code>distribution</code> is used, multiple servers may be involved in a particular exchange.<br /></li>
  <li>It is important that both principals know which servers were involved so that they can correctly decide how much trust to place in the results. <br /></li>
  <li>The longer credentials are allowed to be <code>cached</code>, the longer it will take to recover when a key is compromised.</li>
</ol>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="remote-resources">Remote resources</h3>

<p>So far, we saw effect of scale in naming and security system. One cannot access a resource without first finding it. This involves both identifying the resource that is needed and determining its location, given its name. Once a resource has been found, authentication and authorization might be required
 for its use.<br /></p>

<p>The services used to access remote resources are very dependent on the underlying communications mechanisms they employ. This section looks at the scaling issues related to network communication in such services.
<br /><br /></p>

<h4 id="communication">Communication</h4>

<p>As the medium of communication places limits on the system’s performance, it can greatly affect the usability of a system. The underlying communications
parameters must not be completely hidden from the application.</p>

<blockquote><p>In <a href="http://www.cdf.toronto.edu/~csc469h/fall/handouts/nitzberg91.pdf" target="_blank">The Dash System</a>, when a connection is established, the application can require that the connection meet certain requirements; if the requirements are <code>not met, an error</code> is returned.</p></blockquote>

<p><span class="pullquote-right" data-pullquote="Whole-file caching instead of remote reads and writes">
When one set of required communication parameters cannot be met (generally in low-latency connection), the application still might be able to access the resource via an alternate mechanism  Whole-file caching instead of remote reads and writes
</span>
<br /></p>

<p><strong>Communication forms</strong><br />
•  <code class="myyellow">Point-to-point communication</code> - The client sends messages to the particular server that can satisfy the request If the contacted server cannot satisfy the request, it might respond with the identity of a server that can.<br />
•  <code class="myyellow">Broadcast communication</code> - In broadcast communication, the client sends the message to everyone, and only those servers that can satisfy the request respond. <br />
     <strong>Advantages</strong><br />
     Finding a server that can handle a request is easy.<br />
     <strong>Disadvantages</strong><br />
     •  Broadcast communication does not scale well. <br />
     •  Processing is required by all servers, whether or not they can handle a request.<br />
     •  As the total number of requests grows, the load due to preliminary processing on each server also grows.</p>

<p>•  <code class="myyellow">Multicast communication</code> - In multicast, a single message can be sent to a group of servers. For multicast to scale, the groups to which messages are sent should be kept small.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="replication">Replication</h3>

<p>Replication is used to reduce the load on the server and improve the reliability and availability of the service as whole.</p>

<blockquote><p>Issue is the Placement of the replicas and replica consistency</p></blockquote>
<p><br /></p>

<h4 id="placement-of-replicas">Placement of replicas</h4>

<p>Placement of replicas depends on the purpose of replication</p>

<p><code class="myyellow">Scattered Replicas</code><br /> 
• Reduces network delays or avoid network partitions.<br /> 
• Improves availability of the service.</p>

<p><code class="myyellow">Near located Replicas</code><br />
• Used when majority of users are local.<br />
• Improves reliability of the service.<br />
• To spread load across multiple server then replicas may be placed near one another.
<br /><br /></p>

<h4 id="replica-consistency">Replica Consistency</h4>

<p>At a particular point in time, a set of replicas is said to be consistent if the value of the object is the same for all readers.<br />
Taking these steps guarantees that the set of replicas read will intersect with the set written during the most recent update</p>

<p>• <code class="myyellow">Replication of read-only information</code><br /> 
    Replication read-only information like binaries which can not be changed by normal users.<br />
    [Andrew, Athena]<br /><br />
• <code class="myyellow">Replication of immutable information</code><br />
    Changes to files are made by creating new files and then changing the
directory so that the new version of the file will be found.<br />
    [Amoeba]<br /><br />
• <code class="myyellow">Update all replicas</code><br />
    This approach allows update but require updates to be send to all replicas. <br />
      <strong>Limitations</strong><br />
     1. Can update only when all the replicas are available thus reducing the availability of the system for write operations.<br />
     2. For data consistency, absolute ordering on updates are required.<br />
     3. Client might fail during an update.<br /> </p>

<p>• <code class="myyellow">Primary-site replication</code><br />
    All updates are directed to the primary replica which then forwards updates to the other replicas.  Updates may be forwarded individually or whole database may be periodically downloaded by the replicas [Kerberos].<br />
    <strong>Advantage</strong><br />
    The ordering of updates is determined by the order in which they are received at the primary site and that updates require only the availability of the primary site.<br /></p>

<p><strong>Disadvantage</strong><br />
   1. The availability of updates still depends on a single server, although some systems select a new primary site if the existing primary goes down.<br />
   2. If changes are distributed periodically, the updates are delayed until the next update cycle.<br /></p>

<p>• <code class="myyellow">Loose consistency</code><br />
With loose consistency, replicas are guaranteed to eventually contain identical data.</p>

<ol>
  <li>Updates are allowed even when the network is partitioned or servers are down.<br /></li>
  <li>Updates are sent to any replica, and that replica forwards the update to the other replicas as they become available.<br /></li>
  <li>If conflicting updates are received by different replicas in different orders, time stamps indicate the order in which they are to be applied.<br /></li>
</ol>
<blockquote><p>With loose consistency, there is no guarantee that a query will return the most recent data.</p></blockquote>

<p>• <code class="myyellow">Quorum consensus</code><br />
In Quorum consensus
1. Assigning votes to each replica<br />
2. Selecting two numbers-a read-quorum and a write-quorum-such that the read-quorum plus the write-quorum exceeds the total number of votes <br />
3. Requiring that reads and writes be directed to a sufficient number of replicas to collect enough votes to satisfy the quorum.<br />
Taking these steps guarantees that the set of replicas read will intersect with the set written during the most recent update. Time stamps or version numbers stored with each replica allow the client to determine which data are most recent.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="distribution">Distribution</h3>

<p>Distribution allows the information maintained by a distributed service to be spread across multiple servers. Distribution <code>reduces the number of requests</code> to be handled by each server, allows administration of parts of a service to be assigned to different individuals.</p>

<p>Some of the issues of importance in distribution are the placement of the servers and the mechanisms by which the client finds the server with the desired information.
<br /><br /></p>

<h4 id="placement-of-servers">Placement of servers</h4>

<p>Information should be distributed to servers that are <code>near the users</code> that will most frequently access the information.</p>

<p>• Reduce network traffic. <br />
• Improves reliability, as it less likely that a network partition will make a
local server inaccessible.<br />
• It is desirable to avoid the need to contact a name server across
the country in order to find a resource in the next room.</p>

<p>By assigning information to servers along administrative lines, an organization can avoid dependence on other organizations.<br /><br /></p>

<h4 id="finding-the-right-server">Finding the right server</h4>

<p>To be continued…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3.js and Octopress]]></title>
    <link href="http://distkeys.com/blog/2014/01/04/D3-and-Octopress/"/>
    <updated>2014-01-04T11:33:00-08:00</updated>
    <id>http://distkeys.com/blog/2014/01/04/D3-and-Octopress</id>
    <content type="html"><![CDATA[
<script src="http://d3js.org/d3.v3.min.js"></script>

<style type="text/css">
.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 11px;
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

  </style>

<style>

#chart, #header, #footer {
  position: absolute;
  top: 0;
}

#header.inverted, #footer.inverted {
  color: #fff;
  text-shadow: 0 1px 4px #000;
}


rect {
  fill: none;
  pointer-events: all;
}

line {
  stroke: #000;
  stroke-width: 1.5px;
}

.string, .regexp {
  color: #f39;
}

.keyword {
  color: #00c;
}

.comment {
  color: #777;
  font-style: oblique;
}

.number {
  color: #369;
}

.class, .special {
  color: #1181B8;
}

</style>

<p>This article is about how to use versatile <a href="http://d3js.org/" target="_blank">D3.js</a> with <a href="http://octopress.org/" target="_blank">Octopress.</a></p>

<p>Recently I was looking for flow chart diagram or tree structure diagram, but I did not want to produce static image diagrams using Microsoft Vizio or similar softwares.</p>

<p>My requirement was to come up with tree structure data representation, which I could change in future unlike static pictures and can not be changed in future.</p>

<p>I found D3.js to be perfect for this scenario. Here, I store data in JSON file and I use D3.js to display that data according to my needs.</p>

<!-- more -->

<p>Challenge was how to fuse D3.js with Octopress.</p>

<p>First approcah to understand the <a href="https://github.com/mbostock/d3/wiki" target="_blank"> D3.js</a> from scratch but since I was short in time so I choose hacker way.</p>

<p>D3.js have long list of <a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank">examples/gallery</a> which are extremly helpful and powerful.</p>

<p>In this blog I am trying to incorporate this <a href="http://mbostock.github.io/d3/talk/20111018/tree.html" target="_blank">example.</a></p>

<u><b>Step 1</b></u>

<p>New post in Octopress created as .markdown file using</p>

<blockquote><p>rake new_post [&#8220;D3.js and Octopress&#8221;]</p></blockquote>

<p>This markdown file will now need to have have </p>

<ol>
  <li>CSS - D3.js related stylesheet code for styling<br /></li>
  <li>Javascript code - D3.js code to interpret data and bind with style sheet code</li>
  <li>JSON data file - This is going to be data file apart from .markdown file</li>
</ol>

<u><b>Step 2</b></u>

<p>JSON data file need to be placed in a folder from where it can be extracted when final html rendering is done.</p>

<p>I have choosen 
JSON file location to be</p>

<blockquote><p>/assets/flare.json<br />d3.json(&#8220;/assets/flare.json&#8221;, function(json) {</p><p>Here, assets folder for octopress is <br />&gt; octopress -&gt; /source/assets</p></blockquote>

<p>JSON file can be found <a href="https://www.dropbox.com/s/j1a52ipdpg755n4/flare.json" target="_blank">here</a></p>

<p>In below code snippet confiure following parameters to customize height and width of tree</p>
<blockquote><p>h = 650 - m[0] - m[2]     (replace 650 with 800 for expanded tree)</p><p>// Normalize for fixed-depth.<br />nodes.forEach(function(d) { d.y = d.depth * 130; });   ===&gt; (Use 180 instead of 130 for wider tree)</p></blockquote>

<blockquote><p>// Initialize the display to show a few nodes.<br />  root.children.forEach(toggleAll);<br />  toggle(root.children[1]);<br />  toggle(root.children[1].children[2]);<br />  toggle(root.children[5]);                   =====&gt; Here is number of 1st level childs<br />  toggle(root.children[5].children[0]);</p></blockquote>

<p>[Update] To make each node a hyperlink comment following code and instead insert below code.<br />
Make sure JSON file have a field name url<br /></p>
<blockquote><p>//  nodeEnter.append(&#8220;svg:text&#8221;)<br />//      .attr(&#8220;x&#8221;, function(d) { return d.children || d._children ? -10 : 10; })<br />//      .attr(&#8220;dy&#8221;, &#8220;.35em&#8221;)<br />//      .attr(&#8220;text-anchor&#8221;, function(d) { return d.children || d._children ? &#8220;end&#8221; : &#8220;start&#8221;; <br />//      .text(function(d) { return d.name; })<br />//      .style(&#8220;fill-opacity&#8221;, 1e-6);<br />       <br />   nodeEnter.append(&#8220;svg:a&#8221;).attr(&#8220;xlink:href&#8221;, function(d) { return d.url; }).attr(&#8220;target&#8221;, &#8220;_blank&#8221;)<br />       .append(&#8220;svg:text&#8221;).text(function(d) { return d.name; })<br />       .attr(&#8220;x&#8221;, function(d) { return d.children || d._children ? -10 : 10; })<br />       .attr(&#8220;dy&#8221;, &#8220;.35em&#8221;)<br />       .attr(&#8220;text-anchor&#8221;, function(d) { return d.children || d._children ? &#8220;end&#8221; : &#8220;start&#8221;; })<br />       .text(function(d) { return d.name; })<br />       .style(&#8220;fill-opacity&#8221;, 1e-6);</p></blockquote>

<p>Code for blog post (.markdown file) is as follows</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>D3.js and Octopress.markdown  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
&lt;script src=<span class="string"><span class="delimiter">&quot;</span><span class="content">http://d3js.org/d3.v3.min.js</span><span class="delimiter">&quot;</span></span>&gt;&lt;/script&gt;
&lt;style type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/css</span><span class="delimiter">&quot;</span></span>&gt;
.node circle {
  <span class="label">cursor:</span> pointer;
  <span class="label">fill:</span> <span class="preprocessor">#fff</span>;
  <span class="label">stroke:</span> steelblue;
  stroke-width: <span class="float">1</span><span class="float">.5</span>px;
}

.node text {
  font-size: <span class="integer">11</span>px;
}

path.link {
  <span class="label">fill:</span> none;
  <span class="label">stroke:</span> <span class="preprocessor">#ccc</span>;
  stroke-width: <span class="float">1</span><span class="float">.5</span>px;
}

  &lt;/style&gt;
  &lt;style&gt;

<span class="preprocessor">#chart</span>, <span class="preprocessor">#header</span>, <span class="preprocessor">#footer</span> {
  position: absolute;
  <span class="label">top:</span> <span class="integer">0</span>;
}

<span class="preprocessor">#header</span>.inverted, <span class="preprocessor">#footer</span>.inverted {
  color: <span class="preprocessor">#fff</span>;
  text-shadow: <span class="integer">0</span> <span class="integer">1</span>px <span class="integer">4</span>px <span class="preprocessor">#000</span>;
}


rect {
  <span class="label">fill:</span> none;
  pointer-events: all;
}

line {
  <span class="label">stroke:</span> <span class="preprocessor">#000</span>;
  stroke-width: <span class="float">1</span><span class="float">.5</span>px;
}

.string, .regexp {
  <span class="label">color:</span> <span class="preprocessor">#f39</span>;
}

.keyword {
  <span class="label">color:</span> <span class="preprocessor">#00c</span>;
}

.comment {
  <span class="label">color:</span> <span class="preprocessor">#777</span>;
  font-style: oblique;
}

.number {
  <span class="label">color:</span> <span class="preprocessor">#369</span>;
}

.class, .special {
  <span class="label">color:</span> <span class="preprocessor">#1181B8</span>;
}

&lt;/style&gt;

&lt;body&gt;
    &lt;div id=<span class="string"><span class="delimiter">&quot;</span><span class="content">body</span><span class="delimiter">&quot;</span></span>&gt;              
        click or option-click to expand or collapse
    &lt;/div&gt;
    &lt;script type=<span class="string"><span class="delimiter">&quot;</span><span class="content">text/javascript</span><span class="delimiter">&quot;</span></span>&gt;

var m = [<span class="integer">20</span>, <span class="integer">120</span>, <span class="integer">20</span>, <span class="integer">120</span>],
    w = <span class="integer">1280</span> - m[<span class="integer">1</span>] - m[<span class="integer">3</span>],
    h = <span class="integer">650</span> - m[<span class="integer">0</span>] - m[<span class="integer">2</span>],
    i = <span class="integer">0</span>,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { <span class="keyword">return</span> [d.y, d.x]; });

var vis = d3.select(<span class="string"><span class="delimiter">&quot;</span><span class="content">#body</span><span class="delimiter">&quot;</span></span>).append(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:svg</span><span class="delimiter">&quot;</span></span>)
    .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">width</span><span class="delimiter">&quot;</span></span>, w + m[<span class="integer">1</span>] + m[<span class="integer">3</span>])
    .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">height</span><span class="delimiter">&quot;</span></span>, h + m[<span class="integer">0</span>] + m[<span class="integer">2</span>])
  .append(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:g</span><span class="delimiter">&quot;</span></span>)
    .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">transform</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">translate(</span><span class="delimiter">&quot;</span></span> + m[<span class="integer">3</span>] + <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span> + m[<span class="integer">0</span>] + <span class="string"><span class="delimiter">&quot;</span><span class="content">)</span><span class="delimiter">&quot;</span></span>);

d3.json(<span class="string"><span class="delimiter">&quot;</span><span class="content">/assets/flare.json</span><span class="delimiter">&quot;</span></span>, function(json) {
  root = json;
  root.x0 = h / <span class="integer">2</span>;
  root.y0 = <span class="integer">0</span>;

  function toggleAll(d) {
    <span class="keyword">if</span> (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  <span class="comment">// Initialize the display to show a few nodes.</span>
  root.children.forEach(toggleAll);
  toggle(root.children[<span class="integer">1</span>]);
  toggle(root.children[<span class="integer">1</span>].children[<span class="integer">2</span>]);
  toggle(root.children[<span class="integer">9</span>]);
  toggle(root.children[<span class="integer">9</span>].children[<span class="integer">0</span>]);

  update(root);
});

function update(source) {
  var duration = d3.event &amp;&amp; d3.event.altKey ? <span class="integer">5000</span> : <span class="integer">500</span>;

  <span class="comment">// Compute the new tree layout.</span>
  var nodes = tree.nodes(root).reverse();

  <span class="comment">// Normalize for fixed-depth.</span>
  nodes.forEach(function(d) { d.y = d.depth * <span class="integer">130</span>; });

  <span class="comment">// Update the nodes…</span>
  var node = vis.selectAll(<span class="string"><span class="delimiter">&quot;</span><span class="content">g.node</span><span class="delimiter">&quot;</span></span>)
      .data(nodes, function(d) { <span class="keyword">return</span> d.id || (d.id = ++i); });

  <span class="comment">// Enter any new nodes at the parent's previous position.</span>
  var nodeEnter = node.enter().append(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:g</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">class</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">node</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">transform</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">translate(</span><span class="delimiter">&quot;</span></span> + source.y0 + <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span> + source.x0 + <span class="string"><span class="delimiter">&quot;</span><span class="content">)</span><span class="delimiter">&quot;</span></span>; })
      .on(<span class="string"><span class="delimiter">&quot;</span><span class="content">click</span><span class="delimiter">&quot;</span></span>, function(d) { toggle(d); update(d); });

  nodeEnter.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:circle</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>, <span class="float">1</span>e-<span class="integer">6</span>)
      .style(<span class="string"><span class="delimiter">&quot;</span><span class="content">fill</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> d._children ? <span class="string"><span class="delimiter">&quot;</span><span class="content">lightsteelblue</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">#fff</span><span class="delimiter">&quot;</span></span>; });

  nodeEnter.append(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:text</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">x</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> d.children || d._children ? -<span class="integer">10</span> : <span class="integer">10</span>; })
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">dy</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">.35em</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">text-anchor</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> d.children || d._children ? <span class="string"><span class="delimiter">&quot;</span><span class="content">end</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">start</span><span class="delimiter">&quot;</span></span>; })
      .text(function(d) { <span class="keyword">return</span> d.name; })
      .style(<span class="string"><span class="delimiter">&quot;</span><span class="content">fill-opacity</span><span class="delimiter">&quot;</span></span>, <span class="float">1</span>e-<span class="integer">6</span>);

  <span class="comment">// Transition nodes to their new position.</span>
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">transform</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">translate(</span><span class="delimiter">&quot;</span></span> + d.y + <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span> + d.x + <span class="string"><span class="delimiter">&quot;</span><span class="content">)</span><span class="delimiter">&quot;</span></span>; });

  nodeUpdate.select(<span class="string"><span class="delimiter">&quot;</span><span class="content">circle</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>, <span class="float">4</span><span class="float">.5</span>)
      .style(<span class="string"><span class="delimiter">&quot;</span><span class="content">fill</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> d._children ? <span class="string"><span class="delimiter">&quot;</span><span class="content">lightsteelblue</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">#fff</span><span class="delimiter">&quot;</span></span>; });

  nodeUpdate.select(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>)
      .style(<span class="string"><span class="delimiter">&quot;</span><span class="content">fill-opacity</span><span class="delimiter">&quot;</span></span>, <span class="integer">1</span>);

  <span class="comment">// Transition exiting nodes to the parent's new position.</span>
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">transform</span><span class="delimiter">&quot;</span></span>, function(d) { <span class="keyword">return</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">translate(</span><span class="delimiter">&quot;</span></span> + source.y + <span class="string"><span class="delimiter">&quot;</span><span class="content">,</span><span class="delimiter">&quot;</span></span> + source.x + <span class="string"><span class="delimiter">&quot;</span><span class="content">)</span><span class="delimiter">&quot;</span></span>; })
      .remove();

  nodeExit.select(<span class="string"><span class="delimiter">&quot;</span><span class="content">circle</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>, <span class="float">1</span>e-<span class="integer">6</span>);

  nodeExit.select(<span class="string"><span class="delimiter">&quot;</span><span class="content">text</span><span class="delimiter">&quot;</span></span>)
      .style(<span class="string"><span class="delimiter">&quot;</span><span class="content">fill-opacity</span><span class="delimiter">&quot;</span></span>, <span class="float">1</span>e-<span class="integer">6</span>);

  <span class="comment">// Update the links…</span>
  var link = vis.selectAll(<span class="string"><span class="delimiter">&quot;</span><span class="content">path.link</span><span class="delimiter">&quot;</span></span>)
      .data(tree.links(nodes), function(d) { <span class="keyword">return</span> d.target.id; });

  <span class="comment">// Enter any new links at the parent's previous position.</span>
  link.enter().insert(<span class="string"><span class="delimiter">&quot;</span><span class="content">svg:path</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">g</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">class</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">link</span><span class="delimiter">&quot;</span></span>)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">d</span><span class="delimiter">&quot;</span></span>, function(d) {
        var o = {<span class="label">x:</span> source.x0, y: source.y0};
        <span class="keyword">return</span> diagonal({<span class="label">source:</span> o, target: o});
      })
    .transition()
      .duration(duration)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">d</span><span class="delimiter">&quot;</span></span>, diagonal);

  <span class="comment">// Transition links to their new position.</span>
  link.transition()
      .duration(duration)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">d</span><span class="delimiter">&quot;</span></span>, diagonal);

  <span class="comment">// Transition exiting nodes to the parent's new position.</span>
  link.exit().transition()
      .duration(duration)
      .attr(<span class="string"><span class="delimiter">&quot;</span><span class="content">d</span><span class="delimiter">&quot;</span></span>, function(d) {
        var o = {<span class="label">x:</span> source.x, y: source.y};
        <span class="keyword">return</span> diagonal({<span class="label">source:</span> o, target: o});
      })
      .remove();

  <span class="comment">// Stash the old positions for transition.</span>
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

<span class="comment">// Toggle children.</span>
function toggle(d) {
  <span class="keyword">if</span> (d.children) {
    d._children = d.children;
    d.children = null;
  } <span class="keyword">else</span> {
    d.children = d._children;
    d._children = null;
  }
}

&lt;/script&gt;
&lt;/body&gt;

</pre></div>
</div>
 </figure></notextile></div>

<body>
    <div id="body">     
        <br />
        <u><b>Demo</b></u> <br />        
        click or option-click to expand or collapse
    </div>
    <script type="text/javascript">

var m = [20, 120, 20, 120],
    w = 1280 - m[1] - m[3],
    h = 650 - m[0] - m[2],
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

d3.json("/assets/flare.json", function(json) {
  root = json;
  root.x0 = h / 2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  toggle(root.children[1]);
  toggle(root.children[1].children[2]);
  toggle(root.children[9]);
  toggle(root.children[9].children[0]);

  update(root);
});

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 130; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}

</script>
</body>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array and Strings]]></title>
    <link href="http://distkeys.com/blog/2013/12/30/array-and-strings/"/>
    <updated>2013-12-30T01:26:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/30/array-and-strings</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#array-problems">Array Problems</a>    <ul>
      <li><a href="#sum-of-2-numbers">Sum of 2 numbers</a></li>
      <li><a href="#sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</a></li>
      <li><a href="#sum-of-3-numbers">Sum of 3 numbers*</a></li>
      <li><a href="#find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</a></li>
      <li><a href="#find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</a></li>
      <li><a href="#merge-two-sorted-array">Merge two sorted array</a></li>
      <li><a href="#merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</a></li>
      <li><a href="#sort-array-based-on-count">Sort array based on count</a></li>
      <li><a href="#find-odd-number-of-occurrence">Find odd number of occurrence</a></li>
      <li><a href="#find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</a></li>
      <li><a href="#searching-an-element-in-a-rotated-sorted-array">Searching an Element in a Rotated Sorted Array</a></li>
      <li><a href="#largest-sum-contiguous-subarray">Largest Sum Contiguous Subarray</a></li>
    </ul>
  </li>
  <li><a href="#string-problems">String Problems</a>    <ul>
      <li><a href="#reverse-a-string-without-extra-space">Reverse a string without extra space</a></li>
      <li><a href="#duplicates-and-count">Duplicates and Count</a></li>
      <li><a href="#remove-all-consecutive-duplicate-elements">Remove all consecutive duplicate elements</a></li>
      <li><a href="#rotate-a-string">Rotate a string</a></li>
      <li><a href="#permutation-of-a-string">Permutation of a string</a></li>
    </ul>
  </li>
</ul>

<h3 id="array-problems">Array Problems</h3>

<h4 id="sum-of-2-numbers">Sum of 2 numbers</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] == k. <br /><br />
Give a Θ(n) way of solving this problem. Prove its running time and correctness. <br />Your algorithm should also output one pair of indices i, j such that A[i] + A[j] == k (if at least one pair exists; if multiple exist, you only need to output one of them). </p>

<p><strong>Other variant of the same problem</strong> <br />
When array is not sorted<br />
We need to find pair of numbers in an array whose sum is equal to a given value.<br />
Input [6,4,5,7,9,1,2]<br />
Sum = 10 <br />
Then the pairs are  [6,4] , [9,1]
<!-- more --></p>

<p><br />
<strong>Solution</strong></p>

<p>There are three solutions<br /></p>

<p><strong>Sorted array</strong> <br />
1. When array is sorted, take two index variable. Indx1 point to fisrt index and Indx2 points to the last index<br />
2. If Indx1 + Indx2 &lt; sum then increment the Indx1<br />
3. Else if Indx1 + Indx2 &gt; sum then decrement Indx 2<br />
4. If Indx 1 &gt; Indx 2 then halt -&gt; No pairs found<br /></p>

<p>If pair found then keep doing the same to find next pair.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Sorted array</span>  <a href="http://ideone.com/fmKgvW" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> front = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> back = arr_size - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">while</span> (front &lt; back) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">if</span> (arr[front] + arr[back] &lt; sum) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>            front++;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        } <span class="keyword">else</span> <span class="keyword">if</span> (arr[front] + arr[back] &gt; sum) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>            back--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                    sum, arr[front], arr[back]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            back--;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>}
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>{
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">12</span>, <span class="integer">12</span>};
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    printPairs(A, arr_size, sum);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><strong>Hashing/Binary Map</strong><br />
Another solution works for both <em>sorted</em> and <em>unsorted</em> array. 
In this approach we not actually using the hash function fundamental idea is to maintain the occurrence of number i.e. Binary Map</p>

<blockquote>
  <p>The caveat is that we need extra memory.</p>
</blockquote>

<ol>
  <li>Get the number from input array<br /></li>
  <li>Num2 = Sum - arr[i]<br /></li>
  <li>If we have encountered Num2 already in input array then we found a pair i.e.<br /> if(binMap[Num2] == 1)<br /></li>
  <li>Else record input element in Binary map i.e. binMap[arr[i]] = 1;<br /></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Binary Map</span>  <a href="http://ideone.com/S0CNlO" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#define</span> MAX <span class="integer">100000</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> temp = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> binMap[MAX] = {<span class="integer">0</span>}; <span class="comment">/*initialize hash map as 0*/</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">for</span>(i = <span class="integer">0</span>; i &lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">if</span>(temp &gt;= <span class="integer">0</span> &amp;&amp; binMap[temp] == <span class="integer">1</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                    sum, arr[i], temp);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        binMap[arr[i]] = <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>{
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">12</span>, <span class="integer">4</span>, <span class="integer">45</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">12</span>};
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><strong>Bit Vector</strong><br /></p>

<p>This approach is similar to Binary map except using array for extra space we use bit vector to save some of extra space.</p>

<blockquote>
  <p>This program works for max for 31 as bit map is <em>int</em> which is 32 bits. For numbers more than 31 more memory could be allocated.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Bit Vector</span>  <a href="http://ideone.com/iFDimZ" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="directive">void</span> printPairs(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> arr_size, <span class="predefined-type">int</span> sum)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> temp = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> bitmap = <span class="integer">0</span>; <span class="comment">// all bits are 0</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> bitmask = <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">for</span>(i = <span class="integer">0</span>; i &lt; arr_size; i++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        temp = sum - arr[i];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        bitmask = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        bitmask = <span class="integer">1</span> &lt;&lt; temp;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        <span class="keyword">if</span>(temp &gt;= <span class="integer">0</span> &amp;&amp; (bitmap &amp; bitmask))
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Pair with given sum %d is (%d, %d) </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>,
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                   sum, arr[i], temp);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        bitmap |= <span class="integer">1</span> &lt;&lt; arr[i];
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>{
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="predefined-type">int</span> A[] = {<span class="integer">12</span>, <span class="integer">4</span>, <span class="integer">13</span>, <span class="integer">6</span>, <span class="integer">10</span>, <span class="integer">3</span>};
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">16</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="predefined-type">int</span> arr_size = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    printPairs(A, arr_size, sum);
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-2-numbers-greater-or-equal-to-given-sum">Sum of 2 numbers greater or equal to given sum*</h4>

<p>We are given a sorted array A of length n and a value k. We want to find out if there are indices i, j such that A[i] + A[j] &gt;= k. <br /></p>

<p>Your algorithm should also output all the pairs of indices i, j such that A[i] + A[j] &gt;= k </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sum-of-3-numbers">Sum of 3 numbers*</h4>
<p>We need to find three numbers in an array whose sum is equal to a given value.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-repeatingduplicate-numbers">Find repeating/duplicate numbers*</h4>
<p>Find all the numbers repeating in a array</p>

<p>Input [2,1, 3, 2, 3, 1, 4]</p>

<p>Output  [2,1,3] </p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-the-number-when-size-of-array-is-unknown">Find the number when size of array is unknown*</h4>

<p>Given an array of integers find the given element is present when size of array is not given</p>

<p>Input array
2,1, 3, 2, 3, 1, 4</p>

<p>Element to find 3. Find solution in less than O(n) time.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-two-sorted-array">Merge two sorted array</h4>
<p>Input array1 [1, 3, 6, 7] <br />
Input array2 [1, 2, 4]</p>

<p>Output [1, 1, 2, 3, 4, 6, 7]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge Sorted Arrays</span>  <a href="http://ideone.com/WaTPEt" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span><span class="predefined-type">int</span> lSize = <span class="integer">4</span>;
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span class="predefined-type">int</span> rSize = <span class="integer">3</span>;
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> L[<span class="integer">4</span>] = {<span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">6</span>, <span class="integer">7</span>};
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> R[<span class="integer">4</span>] = {<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">4</span>};
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="predefined-type">int</span> finalArray[<span class="integer">7</span>];
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="directive">void</span> merge()
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span>{
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span>    <span class="predefined-type">int</span> lIndx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span>    <span class="predefined-type">int</span> rIndx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; (lSize + rSize); i++) {
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>        <span class="keyword">if</span> (L[lIndx] &lt;= R[rIndx]) {
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>            finalArray[i] = L[lIndx++];
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span>            <span class="keyword">if</span> (lIndx == lSize) {
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span>                <span class="keyword">break</span>;
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span>            }
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>            finalArray[i] = R[rIndx++];
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>            <span class="keyword">if</span> (rIndx == rSize) {
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>                <span class="keyword">break</span>;
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>            }
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>        }
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>    }
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    i++;
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>    <span class="keyword">if</span> (lIndx != lSize) {
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>        <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>            finalArray[i++] = L[lIndx++];
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>            <span class="keyword">if</span> (lIndx == lSize) {
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span>                <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>            }
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>        }
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    }
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>    <span class="keyword">if</span> (rIndx != rSize) {
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>        <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>            finalArray[i++] = R[rIndx++];
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span>            <span class="keyword">if</span> (rIndx == rSize) {
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>                <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>            }
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>        }
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>    }
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>}
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span><span class="directive">void</span> display()
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span>{
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span>
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="content">Array1: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; lSize; i++) {
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, L[i]);
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>    }
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Array2: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; rSize; i++) {
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, R[i]);
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>    }
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Merge array: </span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; lSize+rSize; i++) {
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, finalArray[i]);
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>    }
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span>}
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>{
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>    <span class="comment">// Test 1</span>
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>    merge();
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>    display();
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>    <span class="comment">// Test 2</span>
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>    R[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>    R[<span class="integer">1</span>] = <span class="integer">3</span>;
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    R[<span class="integer">2</span>] = <span class="integer">6</span>;
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>    R[<span class="integer">3</span>] = <span class="integer">7</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    L[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>    L[<span class="integer">1</span>] = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>    L[<span class="integer">2</span>] = <span class="integer">4</span>;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>    lSize = <span class="integer">3</span>;
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>    rSize = <span class="integer">4</span>;
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>    merge();
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>    display();
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>    <span class="comment">// test 3</span>
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>    L[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>    R[<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>    lSize = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>    rSize = <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>    merge();
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>    display();
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="merge-2-non-sorted-array-and-remove-duplicates">Merge 2 non sorted array and remove duplicates</h4>

<p>Input array1 [6, 3, 6, 1, 7] <br />
Input array2 [5, 1, 2, 4, 6]</p>

<p>Output could be in sorted order or non-sorted order based on algorithm you choose to solve it.</p>

<p>Output [1, 2, 3, 4, 5, 6, 7]  OR<br />
 Output [6, 3, 1, 7, 5, 2, 4] OR <br />
 Output [5, 1, 2, 4, 6, 3, 7] OR <br />
 Output [6, 5, 3, 1, 2, 4, 7] etc…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge Unsorted Arrays</span>  <a href="http://ideone.com/IScZ7r" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="preprocessor">#define</span> ARR1SIZE <span class="integer">5</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="preprocessor">#define</span> ARR2SIZE <span class="integer">5</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>{
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> arr1[] = {<span class="integer">6</span>, <span class="integer">3</span>, <span class="integer">6</span>, <span class="integer">1</span>, <span class="integer">7</span>};
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="predefined-type">int</span> arr2[] = {<span class="integer">5</span>, <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">4</span>, <span class="integer">6</span>};
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> arr3[ARR1SIZE + ARR2SIZE];
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="comment">// Using bit map, All bits are 0</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">int</span> bitMap = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="predefined-type">int</span> bitMask = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="predefined-type">int</span> k = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; ARR1SIZE; i++) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        <span class="comment">// Check if value already exist</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        bitMask = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        bitMask = <span class="integer">1</span> &lt;&lt; arr1[i];
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">if</span> (bitMap &amp; bitMask) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>        }
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        arr3[k++] = arr1[i];
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        <span class="comment">// Mark bitMap that value exist</span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>        bitMap |= <span class="integer">1</span> &lt;&lt; arr1[i];
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; ARR2SIZE; i++) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>        <span class="comment">// Check if value already exist</span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>        bitMask = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>        bitMask = <span class="integer">1</span> &lt;&lt; arr2[i];
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>        <span class="keyword">if</span> (bitMap &amp; bitMask) {
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            <span class="keyword">continue</span>;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>        }
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        arr3[k++] = arr2[i];
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>        <span class="comment">// Mark bitMap that value exist</span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>        bitMap |= <span class="integer">1</span> &lt;&lt; arr2[i];
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Merged Array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; k; i++) {
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr3[i]);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>    }
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="sort-array-based-on-count">Sort array based on count</h4>

<p>Given number in array [2, 1, 3, 2, 1, 4] sort array based on count of numbers.</p>

<p>Sort them as [1, 1, 2, 2, 3, 4]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Counting Sort</span>  <a href="http://ideone.com/0BumWs" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="preprocessor">#define</span> ARRAYSIZE <span class="integer">6</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="preprocessor">#define</span> MAX <span class="integer">4</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>{
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> arr[] = {<span class="integer">2</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">2</span>, <span class="integer">1</span>, <span class="integer">4</span>};
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="predefined-type">int</span> final[ARRAYSIZE];
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="comment">// Given we know max element in array</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="comment">// This technique is based on counting sort</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">int</span> count[MAX + <span class="integer">1</span>] = {<span class="integer">0</span>};
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; ARRAYSIZE; i++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        count[arr[i]]++;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; MAX + <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>        <span class="keyword">if</span> (count[i] != <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>            <span class="keyword">while</span> (count[i] != <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                final[j++] = i;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                count[i]--;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sorted Array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; ARRAYSIZE; i++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, final[i]);
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    }
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-odd-number-of-occurrence">Find odd number of occurrence</h4>

<p>Given an array of positive integers. All numbers occur even number of times except one number which occurs odd number of times. Find the number in O(n) time &amp; constant space.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Odd occurence  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">int</span> getOddOccurrence(<span class="predefined-type">int</span> ar[], <span class="predefined-type">int</span> ar_size)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>     <span class="predefined-type">int</span> i;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     <span class="predefined-type">int</span> res = <span class="integer">0</span>; 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>     <span class="keyword">for</span> (i=<span class="integer">0</span>; i &lt; ar_size; i++)     
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        res = res ^ ar[i];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>      
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>     <span class="keyword">return</span> res;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment">/* Diver function to test above function */</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>     <span class="predefined-type">int</span> ar[] = {<span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">2</span>, <span class="integer">4</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">2</span>, <span class="integer">4</span>, <span class="integer">4</span>, <span class="integer">2</span>};
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>     <span class="predefined-type">int</span> n = <span class="keyword">sizeof</span>(ar)/<span class="keyword">sizeof</span>(ar[<span class="integer">0</span>]);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>     printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d</span><span class="delimiter">&quot;</span></span>, getOddOccurrence(ar, n));
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>     <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /><br /></p>

<h4 id="find-2-numbers-with-odd-occurence">Find 2 numbers with odd occurence</h4>

<p>Given an unsorted array that contains even number of occurrences for all numbers except two numbers. Find the two numbers which have odd occurrences in O(n) time complexity and O(1) extra space.</p>

<p>Input: [12, 23, 34, 12, 12, 23, 12, 45]<br />
Output: 34 and 45</p>

<p>Input: [4, 4, 100, 5000, 4, 4, 4, 4, 100, 100]<br />
Output: 100 and 5000</p>

<p>Input: [10, 20]<br />
Output: 10 and 20</p>

<p><a href="http://www.geeksforgeeks.org/find-the-two-numbers-with-odd-occurences-in-an-unsorted-array/" target="_blank">Solution Explanation</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>2 Odd Num  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// Program to find the two odd occurring elements</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span><span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">/* Prints two numbers that occur odd number of times. The</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment">   function assumes that the array size is at least 2 and</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">   there are exactly two numbers occurring odd number of times. */</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="directive">void</span> printTwoOdd(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> size)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>{
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>  <span class="predefined-type">int</span> xor2 = arr[<span class="integer">0</span>]; <span class="comment">/* Will hold XOR of two odd occurring elements */</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>  <span class="predefined-type">int</span> set_bit_no;  <span class="comment">/* Will have only single set bit of xor2 */</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>  <span class="predefined-type">int</span> i;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>  <span class="predefined-type">int</span> n = size - <span class="integer">2</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>  <span class="predefined-type">int</span> x = <span class="integer">0</span>, y = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span> 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="comment">/* Get the xor of all elements in arr[]. The xor will basically</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="comment">     be xor of two odd occurring elements */</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>  <span class="keyword">for</span>(i = <span class="integer">1</span>; i &lt; size; i++)
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    xor2 = xor2 ^ arr[i];
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span> 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>  <span class="comment">/* Get one set bit in the xor2. We get rightmost set bit</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">     in the following line as it is easy to get */</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  set_bit_no = xor2 &amp; ~(xor2-<span class="integer">1</span>);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span> 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  <span class="comment">/* Now divide elements in two sets: </span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="comment">    1) The elements having the corresponding bit as 1. </span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="comment">    2) The elements having the corresponding bit as 0.  */</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>  <span class="keyword">for</span>(i = <span class="integer">0</span>; i &lt; size; i++)
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>  {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>     <span class="comment">/* XOR of first set is finally going to hold one odd </span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span><span class="comment">       occurring number x */</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">if</span>(arr[i] &amp; set_bit_no)
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>      x = x ^ arr[i];
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>     <span class="comment">/* XOR of second set is finally going to hold the other </span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span><span class="comment">       odd occurring number y */</span>
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    <span class="keyword">else</span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>      y = y ^ arr[i]; 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>  }
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span> 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>  printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content"> The two ODD elements are %d &amp; %d </span><span class="delimiter">&quot;</span></span>, x, y);
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>}
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span><span class="comment">/* Driver program to test above function */</span>
<span class="line-numbers"><a href="#n45" name="n45">45</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>{
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>  <span class="predefined-type">int</span> arr[] = {<span class="integer">4</span>, <span class="integer">2</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">3</span>, <span class="integer">1</span>};
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>  <span class="predefined-type">int</span> arr_size = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="integer">0</span>]);
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>  printTwoOdd(arr, arr_size);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>  <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="searching-an-element-in-a-rotated-sorted-array">Searching an Element in a Rotated Sorted Array</h4>

<p>This <a href="http://leetcode.com/2010/04/searching-element-in-rotated-array.html" target="_blank">article</a> explains the reasoning for searching an element in a rotated sorted array.</p>

<p>It even explains how to find the minimum number i.e. from where rotation started.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="largest-sum-contiguous-subarray">Largest Sum Contiguous Subarray</h4>
<p>Write an efficient C program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.</p>

<p>Array [-2, -3, 4, -1, -2, 1, 5, -3] <br />
Sum 7</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Largest Sum</span>  <a href="http://ideone.com/cVpfgF" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> arr[] = {-<span class="integer">2</span>, -<span class="integer">3</span>, <span class="integer">4</span>, -<span class="integer">1</span>, -<span class="integer">2</span>, <span class="integer">1</span>, <span class="integer">5</span>, -<span class="integer">3</span>};
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> best = -<span class="integer">1110</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> sum = <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="predefined-type">int</span> indx = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="predefined-type">int</span> x = <span class="integer">0</span>; <span class="comment">// start of max sub array</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="predefined-type">int</span> y = <span class="integer">0</span>; <span class="comment">// end of max sub array</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">int</span> n = <span class="integer">8</span>; <span class="comment">// size of array</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; n; i++) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        <span class="keyword">if</span> (sum &lt;= <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            sum = arr[i];
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            indx = i;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>            sum += arr[i];
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>        <span class="keyword">if</span> (best &lt; sum) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            best = sum;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            x = indx;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            y = i;
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Max sum %d, start index %d, end index %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, best, x, y);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="string-problems">String Problems</h3>

<h4 id="reverse-a-string-without-extra-space">Reverse a string without extra space</h4>

<p>String could be reversed without using extra space using bitwise operator <a href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/#bitwise-operators" target="_blank">XOR</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>String Reverse</span>  <a href="http://ideone.com/vfTxcr" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;string.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> 
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> 
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> main(<span class="directive">void</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">char</span> str[] = <span class="string"><span class="delimiter">&quot;</span><span class="content">testString</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> len = strlen(str);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">for</span>(i = <span class="integer">0</span>; i &lt; len/<span class="integer">2</span>; i++){
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        str[i] ^= str[len - i - <span class="integer">1</span>];
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        str[len - i - <span class="integer">1</span>] ^= str[i];
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Reverse String %s </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, str);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span> 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>}
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="duplicates-and-count">Duplicates and Count</h4>

<p>Print all duplicate characters and their count</p>

<p>Input string<br />
Foo Bar</p>

<p>Output<br />
a1B1F1o2r1</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Duplicate &amp; count</span>  <a href="http://ideone.com/GWxZRK" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="directive">void</span> printDup(<span class="predefined-type">char</span> *str)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> count[<span class="integer">256</span>] = {<span class="integer">0</span>};
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">while</span> (*str != <span class="char">'\0'</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        count[*str++]++;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; <span class="integer">256</span>; i++) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">if</span> (count[i] &gt; <span class="integer">0</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%c %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i, count[i]);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>{
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="predefined-type">char</span> *str = <span class="string"><span class="delimiter">&quot;</span><span class="content">Foo Bar</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    printDup(str);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="remove-all-consecutive-duplicate-elements">Remove all consecutive duplicate elements</h4>
<p>Remove all consecutive duplicate elements from the string</p>

<p>Input string<br />
aabbccddd</p>

<p>Output <br />
abcd</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Remove dup </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">void</span> removeDup(<span class="predefined-type">char</span> *str)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="predefined-type">int</span> read = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="predefined-type">int</span> write = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">while</span> (str[read] != <span class="char">'\0'</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">while</span> (str[read] != <span class="char">'\0'</span> &amp;&amp; str[read] != str[read + <span class="integer">1</span>]) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>            str[write++] = str[read++];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        <span class="keyword">while</span> (str[read] != <span class="char">'\0'</span> &amp;&amp; str[read] == str[read++]);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="rotate-a-string">Rotate a string</h4>
<p>Rotate a string for a ‘n’ times</p>

<p>Input string<br />
1234567 <br />
len = 7<br />
Rotate 2 times</p>

<p>Output <br />
3456712</p>

<p><strong>Step 1</strong></p>

<p>Break array into 2 parts from index 2 as number of time to rotate is 2</p>

<p>[1 2]  [3 4 5 6 7]</p>

<p><strong>Step 2</strong></p>

<p>Reverse both arrays</p>

<p>[2 1]  [7 6 5 4 3]</p>

<p><strong>Step 3</strong></p>

<p>Reverse all</p>

<p>Result = [3 4 5 6 7 1 2]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Rotate Array</span>  <a href="http://ideone.com/qsdYO0" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="directive">void</span> reverseArr(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> start, <span class="predefined-type">int</span> end)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> temp = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">while</span> (start &lt; end) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        temp = arr[start];
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        arr[start] = arr[end];
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        arr[end] = temp;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        start++;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        end--;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>{
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="predefined-type">int</span> arr[] = {<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">4</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">7</span>};
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="predefined-type">int</span> rotate = <span class="integer">2</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="predefined-type">int</span> size = <span class="integer">7</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    reverseArr(arr, <span class="integer">0</span>, rotate - <span class="integer">1</span>);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    reverseArr(arr, rotate, size - <span class="integer">1</span>);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    reverseArr(arr, <span class="integer">0</span>, size - <span class="integer">1</span>);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; size; i++) {
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    }
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="permutation-of-a-string">Permutation of a string</h4>

<p><a href="http://distkeys.com/blog/2013/11/18/recursion/#string-permutation-non-repeating" target="_blank">Permutation</a></p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<p><br /><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Algorithms]]></title>
    <link href="http://distkeys.com/blog/2013/12/14/graph-algorithms/"/>
    <updated>2013-12-14T13:03:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/12/14/graph-algorithms</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#graph-problems">Graph problems</a>    <ul>
      <li><a href="#find-neighbour-in-array">Find neighbour in array</a></li>
      <li><a href="#find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</a></li>
    </ul>
  </li>
</ul>

<h3 id="graph-problems">Graph problems</h3>

<h4 id="find-neighbour-in-array">Find neighbour in array</h4>

<p>Find all the neighbours of a given element in array<br /></p>

<p>Neighbours can be defined as<br /></p>

<ol>
  <li>Neighbours are only vertical and horizontal elements next to given element<br /></li>
  <li>Neighbours are only vertical, horizontal and diagonal elements next to given element<br /></li>
  <li>Neighbours are all vertical, horizontal and diagonal elements next to given element<br /></li>
</ol>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Neighbour1</span>  <a href="http://ideone.com/0ddGnZ" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">/******************************************************</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment"> * Function: neighbour(int sx, int sy)</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment"> * This function returns the neighbour of sx, sy</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment"> * For e.g.</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment"> * 1 2 3</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment"> * 4 5 6</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment"> * 7 8 9</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment"> *</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment"> * Neighbour for 5 (1,1) = 4, 2, 6, 8</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment"> * Neighbour for 1 (0,0) = 4, 2</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment"> * ****************************************************/</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &gt;= startCol &amp;&amp; sy - <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx, sy - <span class="integer">1</span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">if</span> (sx - <span class="integer">1</span> &gt;= startRow &amp;&amp; sx - <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx - <span class="integer">1</span>, sy, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    }
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &gt;= startCol &amp;&amp; sy + <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx, sy + <span class="integer">1</span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="keyword">if</span> (sx + <span class="integer">1</span> &gt;= startRow &amp;&amp; sx + <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">[%d][%d]: %d </span><span class="delimiter">&quot;</span></span>, sx + <span class="integer">1</span>, sy,array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Neighbour2</span>  <a href="http://ideone.com/0ddGnZ" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">/******************************************************</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment"> * Function: diagnolNeighbour(int sx, int sy)</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment"> * This function returns the neighbour of sx, sy and</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment"> * diagonal neighbours too.</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment"> * For e.g.</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment"> * 1 2 3</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment"> * 4 5 6</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment"> * 7 8 9</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment"> *</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment"> * Neighbour for 5 (1,1) = 4, 2, 6, 8, 1, 3, 7, 9</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment"> * Neighbour for 1 (0,0) = 4, 2, 5</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="comment"> * ****************************************************/</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="directive">void</span> diagnolNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &gt;= startCol &amp;&amp; sy - <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span> 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">if</span> (sx - <span class="integer">1</span> &gt;= startRow &amp;&amp; sx - <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span> 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                <span class="keyword">if</span> (sy - <span class="integer">1</span> &gt;= startCol &amp;&amp; sy - <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                <span class="keyword">if</span> (sy + <span class="integer">1</span> &gt;= startCol &amp;&amp; sy + <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx - <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                }
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &gt;= startCol &amp;&amp; sy + <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    }
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    <span class="keyword">if</span> (sx + <span class="integer">1</span> &gt;= startRow &amp;&amp; sx + <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span> 
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>                <span class="comment">//Diagnols</span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>                <span class="keyword">if</span> (sy - <span class="integer">1</span> &gt;= startCol &amp;&amp; sy - <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy - <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>                }
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                <span class="keyword">if</span> (sy + <span class="integer">1</span> &gt;= startCol &amp;&amp; sy + <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx + <span class="integer">1</span>][sy + <span class="integer">1</span>]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                }
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>    }
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Neighbour3</span>  <a href="http://ideone.com/0ddGnZ" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">/**********************************************************</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment"> * Function: allNeighbour(int sx, int sy)</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment"> * This function returns all the neighbour of sx, sy and</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment"> * all diagonal neighbours.</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment"> * For e.g.</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment"> * 1   2   3   4</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment"> * 5   6   7   8</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment"> * 9   10  11  12</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment"> * 13  14  15  16</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment"> *</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment"> * Neighbour for 5  (1,0) = 1, 9, 13, 6, 7, 8, 10, 15</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="comment"> * Neighbour for 11 (2,2) = 3, 7, 15, 9, 10, 12, 1, 6, 16</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment"> * ********************************************************/</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="directive">void</span> allNeighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="predefined-type">int</span> done = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="predefined-type">int</span> tempX = sx;
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="predefined-type">int</span> tempY = sy;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span> 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="comment">// Get all the elements in row</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= row; i++) {
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>                <span class="keyword">if</span> (array[i][sy] == array[sx][sy]) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>                    <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>                }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[i][sy]);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span> 
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span class="comment">// Get all the elements in col</span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">for</span> (j = <span class="integer">0</span>; j &lt;= col; j++) {
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>                <span class="keyword">if</span> (array[sx][j] == array[sx][sy]) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>                    <span class="keyword">continue</span>;
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>                }
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>                printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][j]);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>    }
<span class="line-numbers"><a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    <span class="comment">// Diagnols</span>
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>    <span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>        tempX--; tempY--;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>                <span class="keyword">if</span> (tempX &gt;= startRow  &amp;&amp; tempY &gt;= startCol) {
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[tempX][tempY]);
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>                } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>                    done = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>                }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span> 
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>                sx++,sy++;
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>                <span class="keyword">if</span> (sx &lt;= row &amp;&amp; sy &lt;= col) {
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>                    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[sx][sy]);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>                } <span class="keyword">else</span> <span class="keyword">if</span> (done) {
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>                    <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>                }
<span class="line-numbers"><a href="#n54" name="n54">54</a></span>    }
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />

<p><br /><br /></p>

<h4 id="find-all-the-ascending-paths-in-graph">Find all the ascending paths in graph</h4>

<p>Given array as
<br /></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[\begin{array}{cc} 1 & 6 & 8\\ 4 & 7 & 9\\ 5 & 2 & 3
\end{array}\right]
 %]]&gt;</script>

<p>Find all the paths from 1 to 3.
The possible ascending path are</p>

<p><code class="numberCircle">1</code> -&gt;6-&gt;8-&gt;9-&gt; <code class="numberCircle">3</code><br /></p>

<p><code class="numberCircle">1</code> -&gt;4-&gt;7-&gt;9-&gt;<code class="numberCircle">3</code></p>

<p><br />
<code class="numberCircle">1</code> -&gt;6-&gt;7-&gt;2-&gt;<code class="numberCircle">3</code> is not the right solution as 7 &gt; 2</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Graph Traversal </span>  <a href="http://ideone.com/0oLlT1" target="_blank">Run code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h&gt;</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span class="preprocessor">#define</span> xIndex <span class="integer">3</span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="preprocessor">#define</span> yIndex <span class="integer">3</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> TRUE <span class="integer">1</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="preprocessor">#define</span> FALSE <span class="integer">0</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="predefined-type">int</span> startIndX = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span class="predefined-type">int</span> startIndY = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span class="predefined-type">int</span> endIndX = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span class="predefined-type">int</span> endIndY = <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span><span class="comment">// Structure to construct final path</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> node {
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>        <span class="predefined-type">int</span> x;
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span>        <span class="predefined-type">int</span> y;
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span>        <span class="predefined-type">int</span> parentVal;
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span>} parent;
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> queue {
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span>    <span class="predefined-type">int</span> x;
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>    <span class="predefined-type">int</span> y;
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>    <span class="keyword">struct</span> queue *next;
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>} qnode;
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>qnode *head;
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>qnode *tail;
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span><span class="comment">// Neighbour index coordinates</span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span><span class="predefined-type">int</span> neighbourIndex[<span class="integer">4</span>][<span class="integer">2</span>];
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span><span class="predefined-type">int</span> array[xIndex][yIndex];
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span><span class="predefined-type">int</span> visited[xIndex][yIndex];
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span><span class="predefined-type">int</span> row = xIndex - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span><span class="predefined-type">int</span> col = yIndex - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span><span class="predefined-type">int</span> startRow = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span><span class="predefined-type">int</span> startCol = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>parent* parentArr[xIndex][yIndex];
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span><span class="comment">// Function declarations</span>
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span><span class="predefined-type">int</span> isVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span><span class="directive">void</span> markVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span><span class="directive">void</span> markUnvisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span><span class="directive">void</span> markParent(<span class="predefined-type">int</span> childX, <span class="predefined-type">int</span> childY, <span class="predefined-type">int</span> parentX, <span class="predefined-type">int</span> parentY);
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span><span class="directive">void</span> findPath(<span class="predefined-type">int</span> startX, <span class="predefined-type">int</span> startY, <span class="predefined-type">int</span> endX, <span class="predefined-type">int</span> endY);
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span><span class="directive">void</span> enqueue(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>qnode* dequeue();
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span><span class="predefined-type">int</span> isQueueEmpty();
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span><span class="directive">void</span> printPath(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y);
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span class="directive">void</span> freeQueue();
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span class="directive">void</span> test1();
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span><span class="directive">void</span> neighbour(<span class="predefined-type">int</span> sx, <span class="predefined-type">int</span> sy)
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>{
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; <span class="integer">4</span>; i++) {
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>        <span class="keyword">for</span> (j = <span class="integer">0</span>; j &lt; <span class="integer">2</span>; j++) {
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>            neighbourIndex[i][j] = -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>        }
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>    }
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>    i = <span class="integer">0</span>; j = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>    <span class="keyword">if</span> (sy - <span class="integer">1</span> &gt;= startCol &amp;&amp; sy - <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>        neighbourIndex[i][<span class="integer">0</span>] = sx;
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>        neighbourIndex[i][<span class="integer">1</span>] = sy - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>        i++;
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>    }
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>    <span class="keyword">if</span> (sx - <span class="integer">1</span> &gt;= startRow &amp;&amp; sx - <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>        neighbourIndex[i][<span class="integer">0</span>] = sx - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>        neighbourIndex[i][<span class="integer">1</span>] = sy;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>        i++;
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    }
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    <span class="keyword">if</span> (sy + <span class="integer">1</span> &gt;= startCol &amp;&amp; sy + <span class="integer">1</span> &lt;= col) {
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>        neighbourIndex[i][<span class="integer">0</span>] = sx;
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>        neighbourIndex[i][<span class="integer">1</span>] = sy + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>        i++;
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>    }
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>    <span class="keyword">if</span> (sx + <span class="integer">1</span> &gt;= startRow &amp;&amp; sx + <span class="integer">1</span> &lt;= row) {
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>        neighbourIndex[i][<span class="integer">0</span>] = sx + <span class="integer">1</span>;
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>        neighbourIndex[i][<span class="integer">1</span>] = sy;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>        i++;
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>    }
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>}
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span><span class="predefined-type">int</span> isVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>{
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>    <span class="keyword">return</span> visited[x][y];
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>}
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span><span class="directive">void</span> markVisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>{
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>    visited[x][y] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>}
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>
<span class="line-numbers"><a href="#n105" name="n105">105</a></span><span class="directive">void</span> markUnvisited(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>{
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>    visited[x][y] = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>}
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span><span class="directive">void</span> markParent(<span class="predefined-type">int</span> childX, <span class="predefined-type">int</span> childY, <span class="predefined-type">int</span> parentX, <span class="predefined-type">int</span> parentY)
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>{
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>    parent* temp = (parent *)malloc(<span class="keyword">sizeof</span>(parent));
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span>    <span class="keyword">if</span> (temp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>        <span class="comment">// Put ASSERT</span>
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>    }
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>    temp-&gt;x = parentX;
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>    temp-&gt;y = parentY;
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>    temp-&gt;parentVal = array[parentX][parentY];
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>    parentArr[childX][childY] = temp;
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>}
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>
<span class="line-numbers"><a href="#n125" name="n125">125</a></span><span class="directive">void</span> enqueue(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>{
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>    qnode *temp = (qnode *)malloc(<span class="keyword">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>    <span class="keyword">if</span> (temp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>    <span class="comment">// Put ASSERT</span>
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>    }
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>    temp-&gt;x = x;
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>    temp-&gt;y = y;
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>    temp-&gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>    tail-&gt;next = temp;
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>    tail = temp;
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>}
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>qnode* dequeue()
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>{
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>    qnode *temp;
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    <span class="keyword">if</span> (!isQueueEmpty()) {
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>        temp = head-&gt;next;
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>        <span class="keyword">if</span> (temp == tail) {
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>            tail = head;
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>        }
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>        head-&gt;next = temp-&gt;next;
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>        <span class="keyword">return</span> temp;
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>    }
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>    <span class="keyword">return</span> head-&gt;next;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>}
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>
<span class="line-numbers"><a href="#n158" name="n158">158</a></span><span class="predefined-type">int</span> isQueueEmpty()
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>{
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>    <span class="keyword">if</span> (head-&gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>        <span class="keyword">return</span> TRUE;
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>    }
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>    <span class="keyword">return</span> FALSE;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>}
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>
<span class="line-numbers"><a href="#n167" name="n167">167</a></span><span class="directive">void</span> freeQueue()
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>{
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>    qnode* temp;
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    <span class="keyword">while</span> (head-&gt;next != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>        temp = head-&gt;next;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>        head-&gt;next = head-&gt;next-&gt;next;
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>        free (temp);
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>    }
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>}
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span><span class="directive">void</span> printPath(<span class="predefined-type">int</span> x, <span class="predefined-type">int</span> y)
<span class="line-numbers"><a href="#n181" name="n181">181</a></span>{
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>    parent *pInfo;
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Path:</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n185" name="n185">185</a></span>    <span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>        printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>
<span class="line-numbers"><a href="#n188" name="n188">188</a></span>        pInfo = parentArr[x][y];
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>        x = pInfo-&gt;x;
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>        y = pInfo-&gt;y;
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>        <span class="keyword">if</span> (x == startIndX &amp;&amp; y == startIndY) {
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>            printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, array[x][y]);
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n195" name="n195">195</a></span>        }
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>    }
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>}
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>
<span class="line-numbers"><a href="#n199" name="n199">199</a></span><span class="directive">void</span> findPath(<span class="predefined-type">int</span> startX, <span class="predefined-type">int</span> startY, <span class="predefined-type">int</span> endX, <span class="predefined-type">int</span> endY)
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>{
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>    <span class="predefined-type">int</span> x = startX;
<span class="line-numbers"><a href="#n204" name="n204">204</a></span>    <span class="predefined-type">int</span> y = startY;
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>    <span class="predefined-type">int</span> neighbourX = startX;
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>    <span class="predefined-type">int</span> neighbourY = startY;
<span class="line-numbers"><a href="#n207" name="n207">207</a></span>    <span class="predefined-type">int</span> reached = FALSE;
<span class="line-numbers"><a href="#n208" name="n208">208</a></span>    qnode *nextNode;
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>    <span class="keyword">while</span> (<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>        neighbour(x, y);
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>        <span class="comment">// Check, are we neighbour of destination?</span>
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>        <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; <span class="integer">4</span>; i++) {
<span class="line-numbers"><a href="#n216" name="n216">216</a></span>            <span class="keyword">if</span> (neighbourIndex[i][<span class="integer">0</span>] == endX &amp;&amp; neighbourIndex[i][<span class="integer">1</span>] == endY) {
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>                <span class="comment">// Reached destination</span>
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>                neighbourX = neighbourIndex[i][<span class="integer">0</span>];
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>                neighbourY = neighbourIndex[i][<span class="integer">1</span>];
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span>                markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>                reached = TRUE;
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>                <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n224" name="n224">224</a></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n225" name="n225">225</a></span>                <span class="comment">// Validate neighbour</span>
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>                <span class="keyword">if</span> (neighbourIndex[i][<span class="integer">0</span>] != -<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>                    neighbourX = neighbourIndex[i][<span class="integer">0</span>];
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>                    neighbourY = neighbourIndex[i][<span class="integer">1</span>];
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>                    <span class="keyword">if</span> (array[x][y] &lt; array[neighbourX][neighbourY]) {
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span>                        <span class="comment">// Mark neighbour index as visited</span>
<span class="line-numbers"><a href="#n231" name="n231">231</a></span>                        markVisited(x, y);
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>                        markVisited(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>                        <span class="comment">// Make me parent of neighbour index</span>
<span class="line-numbers"><a href="#n235" name="n235">235</a></span>                        markParent(neighbourX, neighbourY, x, y);
<span class="line-numbers"><a href="#n236" name="n236">236</a></span>
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>                        <span class="comment">// Add neighbour to queue</span>
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>                        enqueue(neighbourX, neighbourY);
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>                    }
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>                }
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>            }
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>        } <span class="comment">// end of for</span>
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>        <span class="keyword">if</span> (reached) {
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>            <span class="comment">// print path</span>
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>            printPath(endIndX, endIndY);
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>        }
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>        <span class="keyword">if</span> (isQueueEmpty()) {
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>            <span class="comment">// If queue is empty then halt, no path found</span>
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>            printf (<span class="string"><span class="delimiter">&quot;</span><span class="content">No valid path exist</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>            <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>        }
<span class="line-numbers"><a href="#n255" name="n255">255</a></span>
<span class="line-numbers"><a href="#n256" name="n256">256</a></span>        <span class="comment">// Get next item from queue</span>
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>        nextNode = dequeue();
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>        <span class="keyword">if</span> (nextNode != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>            x = nextNode-&gt;x;
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span>            y = nextNode-&gt;y;
<span class="line-numbers"><a href="#n261" name="n261">261</a></span>
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>            free (nextNode);
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>        }
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>    } <span class="comment">// end of while</span>
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>}
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>
<span class="line-numbers"><a href="#n268" name="n268">268</a></span><span class="directive">void</span> test1()
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>{
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>    array[<span class="integer">0</span>][<span class="integer">0</span>] = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>    array[<span class="integer">0</span>][<span class="integer">1</span>] = <span class="integer">6</span>;
<span class="line-numbers"><a href="#n275" name="n275">275</a></span>    array[<span class="integer">0</span>][<span class="integer">2</span>] = <span class="integer">8</span>;
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>    array[<span class="integer">1</span>][<span class="integer">0</span>] = <span class="integer">4</span>;
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>    array[<span class="integer">1</span>][<span class="integer">1</span>] = <span class="integer">7</span>;
<span class="line-numbers"><a href="#n278" name="n278">278</a></span>    array[<span class="integer">1</span>][<span class="integer">2</span>] = <span class="integer">9</span>;
<span class="line-numbers"><a href="#n279" name="n279">279</a></span>    array[<span class="integer">2</span>][<span class="integer">0</span>] = <span class="integer">5</span>;
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>    array[<span class="integer">2</span>][<span class="integer">1</span>] = <span class="integer">2</span>;
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>    array[<span class="integer">2</span>][<span class="integer">2</span>] = <span class="integer">3</span>;
<span class="line-numbers"><a href="#n282" name="n282">282</a></span>
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= row; i++) {
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>        <span class="keyword">for</span> (j = <span class="integer">0</span>; j &lt;= col; j++) {
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>            printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d   </span><span class="delimiter">&quot;</span></span>, array[i][j]);
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>        }
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>    }
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>
<span class="line-numbers"><a href="#n291" name="n291">291</a></span>    findPath(startIndX, startIndY, endIndX, endIndY);
<span class="line-numbers"><a href="#n292" name="n292">292</a></span>    freeQueue();
<span class="line-numbers"><a href="#n293" name="n293">293</a></span>}
<span class="line-numbers"><a href="#n294" name="n294">294</a></span>
<span class="line-numbers"><a href="#n295" name="n295">295</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n296" name="n296">296</a></span>{
<span class="line-numbers"><a href="#n297" name="n297">297</a></span>    head = (qnode*)malloc(<span class="keyword">sizeof</span>(qnode));
<span class="line-numbers"><a href="#n298" name="n298">298</a></span>    head-&gt;x = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n299" name="n299">299</a></span>    head-&gt;y = -<span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n300" name="n300">300</a></strong></span>    head-&gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n301" name="n301">301</a></span>
<span class="line-numbers"><a href="#n302" name="n302">302</a></span>    tail = head;
<span class="line-numbers"><a href="#n303" name="n303">303</a></span>
<span class="line-numbers"><a href="#n304" name="n304">304</a></span>    test1();
<span class="line-numbers"><a href="#n305" name="n305">305</a></span>
<span class="line-numbers"><a href="#n306" name="n306">306</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n307" name="n307">307</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /><br /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalability in Distributed Systems]]></title>
    <link href="http://distkeys.com/blog/2013/11/27/scalability/"/>
    <updated>2013-11-27T15:06:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/27/scalability</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#facebook">Facebook</a>    <ul>
      <li><a href="#data-center">Data Center</a></li>
      <li><a href="#search-for-people">Search for People</a></li>
      <li><a href="#petabytes-of-data">Petabytes of Data</a></li>
      <li><a href="#fb-engineering-notes">FB Engineering Notes</a></li>
    </ul>
  </li>
  <li><a href="#spotify">Spotify</a></li>
  <li><a href="#cap-theorem">CAP Theorem</a></li>
  <li><a href="#amazon">Amazon</a>    <ul>
      <li><a href="#amazon-dynamo">Amazon Dynamo</a></li>
    </ul>
  </li>
  <li><a href="#twitter">Twitter</a></li>
  <li><a href="#references">References</a></li>
</ul>

<p>This article is about Scalability in Distributed Systems and various engineering organizations approaching the problem of Scalability..</p>

<div class="wikipedia">
  
  <h2>scalability</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Electronics" title="Electronics">electronics</a> (including <a href="http://en.wikipedia.org/wiki/Semiconductor_manufacturing" title="Semiconductor manufacturing" class="mw-redirect">hardware</a>, <a href="http://en.wikipedia.org/wiki/Telecommunications" title="Telecommunications" class="mw-redirect">communication</a> and <a href="http://en.wikipedia.org/wiki/Software_engineering" title="Software engineering">software</a>), <strong>scalability</strong> is the ability of a system, network, or process to handle a growing amount of work in a capable manner or its ability to be enlarged to accommodate that growth.  For example, it can refer to the capability of a system to increase total throughput under an increased load when resources (typically hardware) are added. An analogous meaning is implied when the word is used in an <a href="http://en.wikipedia.org/wiki/Economics" title="Economics">economic</a> context, where scalability of a company implies that the underlying <a href="http://en.wikipedia.org/wiki/Business_model" title="Business model">business model</a> offers the potential for <a href="http://en.wikipedia.org/wiki/Economic_growth" title="Economic growth">economic growth</a> within the company.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Scalability">Read more</a>
</div>

<!-- more -->
<p><br /></p>

<h3 id="facebook">Facebook</h3>

<h4 id="data-center">Data Center</h4>
<div id="fb-root"></div>
<script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-post" data-href="https://www.facebook.com/notes/facebook-engineering/scaling-out/23844338919" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/notes/facebook-engineering/scaling-out/23844338919">Post</a> by <a href="https://www.facebook.com/Engineering">Facebook Engineering</a>.</div></div>

<p><br /></p>

<h4 id="search-for-people">Search for People</h4>

<div id="fb-root"></div>
<script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-post" data-href="https://www.facebook.com/notes/facebook-engineering/the-life-of-a-typeahead-query/389105248919" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/notes/facebook-engineering/the-life-of-a-typeahead-query/389105248919">Post</a> by <a href="https://www.facebook.com/Engineering">Facebook Engineering</a>.</div></div>

<p><br /></p>

<h4 id="petabytes-of-data">Petabytes of Data</h4>

<div id="fb-root"></div>
<script>(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/en_US/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));</script>

<div class="fb-post" data-href="https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920" data-width="550"><div class="fb-xfbml-parse-ignore"><a href="https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920">Post</a> by <a href="https://www.facebook.com/Engineering">Facebook Engineering</a>.</div></div>

<p><br /></p>

<h4 id="fb-engineering-notes">FB Engineering Notes</h4>

<p><a href="https://www.facebook.com/Engineering/notes" target="_blank">FB Engineering</a></p>

<p><br /></p>

<h3 id="spotify">Spotify</h3>

<p><a href="https://www.dropbox.com/s/3wj0adazuwh27ve/spotify-p2p10.pdf" target="_blank"> Spotify P2P</a></p>

<p><br /></p>

<h3 id="cap-theorem">CAP Theorem</h3>

<p><a href="http://henryr.github.io/cap-faq/" target="_blank">CAP FAQ</a></p>

<p><br /></p>

<h3 id="amazon">Amazon</h3>

<h4 id="amazon-dynamo">Amazon Dynamo</h4>

<p><a href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html" target="_blank">Dynamo</a></p>

<p><br /></p>

<h3 id="twitter">Twitter</h3>

<p><a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html" target="_blank"> Twitter Architecture</a></p>

<h3 id="references">References</h3>

<ul>
  <li><a href="http://pl.atyp.us/wordpress/index.php/category/tech/cloudfs/" target="_blank">Jeff Darcy</a></li>
  <li><a href="http://the-paper-trail.org/" target="_blank">Henry Robinson</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trie and Trees]]></title>
    <link href="http://distkeys.com/blog/2013/11/26/trie-and-trees/"/>
    <updated>2013-11-26T23:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/26/trie-and-trees</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#trie-problems">Trie Problems</a></li>
  <li><a href="#trie-explanation">Trie explanation</a></li>
  <li><a href="#trie-code">Trie Code</a></li>
  <li><a href="#infix-to-postfix">Infix to Postfix</a></li>
  <li><a href="#postfix-to-infix">Postfix to Infix</a>    <ul>
      <li><a href="#evaluate-postfix-expression">Evaluate Postfix expression</a></li>
    </ul>
  </li>
  <li><a href="#tree-problems">Tree Problems</a>    <ul>
      <li><a href="#find-bst-is-balanced-or-not">Find BST is balanced or not</a></li>
      <li><a href="#find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</a></li>
      <li><a href="#bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</a></li>
      <li><a href="#bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</a></li>
      <li><a href="#bst---morris-inorder-traversal">BST - Morris Inorder Traversal</a></li>
    </ul>
  </li>
</ul>

<p>This article is about Trie and Trees data structure.</p>

<div class="wikipedia">
  
    <img src="http://distkeys.com//upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/250px-Trie_example.svg.png" />
  
  <h2>trie</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <strong>trie</strong>, also called <strong>digital tree</strong> and sometimes <strong>radix tree</strong> or <strong>prefix tree</strong> (as they can be searched by prefixes), is an <a href="http://en.wikipedia.org/wiki/Ordered_tree_data_structure" title="Ordered tree data structure" class="mw-redirect">ordered tree</a> <a href="http://en.wikipedia.org/wiki/Data_structure" title="Data structure">data structure</a> that is used to store a <a href="http://en.wikipedia.org/wiki/Set_(abstract_data_type)" title="Set (abstract data type)">dynamic set</a> or <a href="http://en.wikipedia.org/wiki/Associative_array" title="Associative array">associative array</a> where the keys are usually <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">strings</a>. Unlike a <a href="http://en.wikipedia.org/wiki/Binary_search_tree" title="Binary search tree">binary search tree</a>, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated. All the descendants of a node have a common <a href="http://en.wikipedia.org/wiki/Prefix" title="Prefix">prefix</a> of the string associated with that node, and the root is associated with the <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">empty string</a>. Values are normally not associated with every node, only with leaves and some inner nodes that correspond to keys of interest. For the space-optimized presentation of prefix tree, see <a href="http://en.wikipedia.org/wiki/Compact_prefix_tree" title="Compact prefix tree" class="mw-redirect">compact prefix tree</a>.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Trie">Read more</a>
</div>

<!-- more -->
<p><br /></p>

<p>Trie is one of the most important data structure for autocomplete.</p>

<h3 id="trie-problems">Trie Problems</h3>

<p>Various problems on Trie can be found <a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=usingTries" target="_blnk">here</a></p>

<h3 id="trie-explanation">Trie explanation</h3>

<p>Trie code implementation is based on this <a href="https://www.dropbox.com/s/tg94q18u1t86y23/Trie.pdf" target="_blank">article.</a></p>

<h3 id="trie-code">Trie Code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Trie.h </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">typedef</span> <span class="predefined-type">int</span> trieValueT;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> trieNodeTag {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="predefined-type">char</span> key;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">int</span> words;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> prefix;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    trieValueT value;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">struct</span> trieNodeTag *next, *children;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>} trieNodeT;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> trieCDT {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    trieNodeT *root;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>} trieCDT;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="keyword">typedef</span> <span class="keyword">struct</span> trieCDT *trieADT;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="comment">// Functions</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="directive">void</span> trieCreate(trieCDT *trie);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> trieAdd(trieNodeT *trie, <span class="predefined-type">char</span> *key, <span class="predefined-type">int</span> value);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>trieNodeT* addChild(<span class="predefined-type">char</span> key);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="predefined-type">int</span> trieIsMember(trieCDT trie, <span class="predefined-type">char</span> keys[]);
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> totalStringsWithPrefix(trieCDT trie, <span class="predefined-type">char</span> keys[]);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="directive">void</span> trieDestroy(trieNodeT *root);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="directive">void</span> test1();
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="directive">void</span> startTesting();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="directive">void</span> startTestingFromFile(<span class="predefined-type">char</span>** stdip_v);
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Trie.c</span>  <a href="http://ideone.com/AV5jKS" target="_blank">Run Trie.c </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h&gt;</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span><span class="preprocessor">#include</span> <span class="include">&quot;trie.h&quot;</span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> TEST <span class="integer">1</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="comment">// To test trie by providing input from file, uncomment 'TESTFROMFILE'</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span><span class="comment">// Compile code and while executing provide file name at command line</span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// For e.g. &gt; ./a.out ipFile.txt</span>
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span class="comment">//#define TESTFROMFILE 1</span>
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span><span class="comment">// To enable debug messages uncomment 'DEBUG'</span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span><span class="comment">//#define DEBUG 1</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span>
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span><span class="preprocessor">#ifdef</span> DEBUG
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span><span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="preprocessor">#endif</span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> main(<span class="predefined-type">int</span> argc, <span class="predefined-type">char</span>* argv[])
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span>{
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>    <span class="preprocessor">#ifdef</span> TEST
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span>        startTesting();
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>    <span class="preprocessor">#endif</span>
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>    <span class="preprocessor">#ifdef</span> TESTFROMFILE
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>        startTestingFromFile(argv);
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>    <span class="preprocessor">#endif</span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>}
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span><span class="comment">// Create root node of trie</span>
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span><span class="directive">void</span> trieCreate(trieCDT *trie)
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>{
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    trie-&gt;root = (trieNodeT*)calloc(<span class="integer">1</span>,<span class="keyword">sizeof</span>(trieNodeT));
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>    <span class="keyword">if</span> (trie-&gt;root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Can not alloc memory</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span>    }
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>    trie-&gt;root-&gt;key = <span class="char">'\0'</span>;
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>    trie-&gt;root-&gt;value = -<span class="integer">1</span>;
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>    trie-&gt;root-&gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>    trie-&gt;root-&gt;children = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>}
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span><span class="comment">// This is recursive function for adding node in trie</span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span><span class="comment">// It covers 3 cases</span>
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span><span class="comment">// Case 1: When only root node is present in a trie. In this</span>
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span><span class="comment">//         case keep on adding node one level after another.</span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span><span class="comment">//         If input given is &quot;Good&quot; and if 'G' is not found then</span>
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span><span class="comment">//         insert 'G' and return 'G' node from where next insertion</span>
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span><span class="comment">//         has to be done as we have already found there is no</span>
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span><span class="comment">//         other 'G' exist.</span>
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span><span class="comment">// Case 2: When matching key node is already found return the matching</span>
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span><span class="comment">//         node and increment key</span>
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span><span class="comment">// Case 3: When key does not match to existing children i.e. for</span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span><span class="comment">//         &quot;abcd&quot;, &quot;abef&quot; and &quot;abgh&quot;</span>
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span><span class="comment">//         .  ----&gt; root</span>
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span><span class="comment">//         a</span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span><span class="comment">//         b</span>
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span><span class="comment">//         |</span>
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span><span class="comment">//         c ===&gt; e ===&gt; g        (LL, children of b)</span>
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span><span class="comment">//         |      |      |</span>
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span><span class="comment">//         d      f      h</span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span><span class="directive">void</span> trieAdd(trieNodeT* trie, <span class="predefined-type">char</span> *key, <span class="predefined-type">int</span> value) {
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    <span class="comment">// Get root of children</span>
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>    <span class="keyword">if</span> (key == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (trie-&gt;children == <span class="predefined-constant">NULL</span> &amp;&amp; trie-&gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>        <span class="comment">// Case 1</span>
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>    trieNodeT* child = addChild(*key);
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>    trie-&gt;children = child;
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>    <span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>        child-&gt;value = value;
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>        child-&gt;words++;
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>    }
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>    <span class="keyword">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>    }
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>    trieNodeT* level = trie-&gt;children;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>    trieNodeT* current;
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>    <span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>    <span class="comment">// Case 2</span>
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>    <span class="keyword">if</span> (current-&gt;key == *key) {
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>        current-&gt;prefix++;
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>        <span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>        current-&gt;words++;
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>        }
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>        <span class="keyword">return</span> trieAdd(current, ++key, value);
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>    }
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>    <span class="comment">// This is last element in LL and key is not found</span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span>    <span class="comment">// For e.g. for &quot;abc&quot; and &quot;abd&quot;, c and d should be</span>
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>    <span class="comment">// child of b.</span>
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>    <span class="comment">// Since, c != d, Append d to c in LL signifying they</span>
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>    <span class="comment">// are both child of 'b' and are on same level</span>
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>    <span class="comment">//</span>
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>    <span class="comment">// Case 3</span>
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>    <span class="keyword">if</span> (current-&gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>        <span class="comment">//Add key</span>
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>        trieNodeT* child = addChild(*key);
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>        current-&gt;next = child;
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>        <span class="keyword">if</span> (*key == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>            child-&gt;words++;
<span class="line-numbers"><a href="#n127" name="n127">127</a></span>        child-&gt;value = value;
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>        }
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>        <span class="keyword">return</span> trieAdd(child, ++key, value);
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>    }
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>    }
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>}
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>trieNodeT* addChild(<span class="predefined-type">char</span> key)
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>{
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>    trieNodeT* child = (trieNodeT*)calloc(<span class="integer">1</span>,<span class="keyword">sizeof</span>(trieNodeT));
<span class="line-numbers"><a href="#n139" name="n139">139</a></span>
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>    <span class="keyword">if</span> (child == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Can not alloc memory</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    <span class="keyword">return</span> <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>    }
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>    child-&gt;key = key;
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    child-&gt;value = -<span class="integer">1</span>;
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>    child-&gt;next = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    child-&gt;children = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>    child-&gt;prefix = <span class="integer">1</span>;
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>    child-&gt;words = <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>
<span class="line-numbers"><a href="#n151" name="n151">151</a></span>    <span class="keyword">return</span> child;
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>}
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>
<span class="line-numbers"><a href="#n154" name="n154">154</a></span><span class="predefined-type">int</span> totalStringsWithPrefix(trieCDT trie, <span class="predefined-type">char</span> keys[])
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>{
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>    trieNodeT *level = trie.root-&gt;children;
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>    <span class="keyword">while</span> (keys != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>    trieNodeT *found = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>    trieNodeT *current;
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>    <span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>        <span class="keyword">if</span> (current-&gt;key == *keys) {
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>        found = current;
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n166" name="n166">166</a></span>        }
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>    }
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>    <span class="keyword">if</span> (found == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>        <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (*(keys + <span class="integer">1</span>)  == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>        <span class="keyword">return</span> found-&gt;prefix;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>    }
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>    level = found -&gt; children;
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>    keys++;
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>    }
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>}
<span class="line-numbers"><strong><a href="#n180" name="n180">180</a></strong></span>
<span class="line-numbers"><a href="#n181" name="n181">181</a></span><span class="predefined-type">int</span> trieIsMember(trieCDT trie, <span class="predefined-type">char</span> keys[])
<span class="line-numbers"><a href="#n182" name="n182">182</a></span>{
<span class="line-numbers"><a href="#n183" name="n183">183</a></span>    trieNodeT *level = trie.root-&gt;children;
<span class="line-numbers"><a href="#n184" name="n184">184</a></span>
<span class="line-numbers"><a href="#n185" name="n185">185</a></span>    <span class="keyword">while</span> (keys != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n186" name="n186">186</a></span>    trieNodeT *found = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n187" name="n187">187</a></span>    trieNodeT *current;
<span class="line-numbers"><a href="#n188" name="n188">188</a></span>
<span class="line-numbers"><a href="#n189" name="n189">189</a></span>    <span class="keyword">for</span> (current = level; current != <span class="predefined-constant">NULL</span>; current = current-&gt;next) {
<span class="line-numbers"><strong><a href="#n190" name="n190">190</a></strong></span>        <span class="keyword">if</span> (current-&gt;key == *keys) {
<span class="line-numbers"><a href="#n191" name="n191">191</a></span>        found = current;
<span class="line-numbers"><a href="#n192" name="n192">192</a></span>        <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n193" name="n193">193</a></span>        }
<span class="line-numbers"><a href="#n194" name="n194">194</a></span>    }
<span class="line-numbers"><a href="#n195" name="n195">195</a></span>
<span class="line-numbers"><a href="#n196" name="n196">196</a></span>    <span class="keyword">if</span> (found == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n197" name="n197">197</a></span>        <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n198" name="n198">198</a></span>    } <span class="keyword">else</span> <span class="keyword">if</span> (*keys == <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n199" name="n199">199</a></span>        <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n200" name="n200">200</a></strong></span>    }
<span class="line-numbers"><a href="#n201" name="n201">201</a></span>    level = found -&gt; children;
<span class="line-numbers"><a href="#n202" name="n202">202</a></span>    keys++;
<span class="line-numbers"><a href="#n203" name="n203">203</a></span>    }
<span class="line-numbers"><a href="#n204" name="n204">204</a></span>
<span class="line-numbers"><a href="#n205" name="n205">205</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n206" name="n206">206</a></span>}
<span class="line-numbers"><a href="#n207" name="n207">207</a></span>
<span class="line-numbers"><a href="#n208" name="n208">208</a></span><span class="directive">void</span> trieDestroy(trieNodeT * root)
<span class="line-numbers"><a href="#n209" name="n209">209</a></span>{
<span class="line-numbers"><strong><a href="#n210" name="n210">210</a></strong></span>    <span class="keyword">if</span> (root-&gt;children == <span class="predefined-constant">NULL</span> &amp;&amp; root-&gt;next == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n211" name="n211">211</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Destroying %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, root-&gt;value));
<span class="line-numbers"><a href="#n212" name="n212">212</a></span>    free (root);
<span class="line-numbers"><a href="#n213" name="n213">213</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n214" name="n214">214</a></span>    }
<span class="line-numbers"><a href="#n215" name="n215">215</a></span>
<span class="line-numbers"><a href="#n216" name="n216">216</a></span>    <span class="comment">// If root have next and children free them first</span>
<span class="line-numbers"><a href="#n217" name="n217">217</a></span>    <span class="keyword">if</span> (root-&gt;next != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n218" name="n218">218</a></span>    trieDestroy(root-&gt;next);
<span class="line-numbers"><a href="#n219" name="n219">219</a></span>    }
<span class="line-numbers"><strong><a href="#n220" name="n220">220</a></strong></span>
<span class="line-numbers"><a href="#n221" name="n221">221</a></span>    <span class="keyword">if</span> (root-&gt;children != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n222" name="n222">222</a></span>    trieDestroy(root-&gt;children);
<span class="line-numbers"><a href="#n223" name="n223">223</a></span>    }
<span class="line-numbers"><a href="#n224" name="n224">224</a></span>
<span class="line-numbers"><a href="#n225" name="n225">225</a></span><span class="preprocessor">#ifdef</span> DEBUG
<span class="line-numbers"><a href="#n226" name="n226">226</a></span>    <span class="keyword">if</span> (root-&gt;key != <span class="char">'\0'</span>) {
<span class="line-numbers"><a href="#n227" name="n227">227</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Destroying %c</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, root-&gt;key);
<span class="line-numbers"><a href="#n228" name="n228">228</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n229" name="n229">229</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Destroying Root %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, root-&gt;value);
<span class="line-numbers"><strong><a href="#n230" name="n230">230</a></strong></span>    }
<span class="line-numbers"><a href="#n231" name="n231">231</a></span><span class="preprocessor">#endif</span>
<span class="line-numbers"><a href="#n232" name="n232">232</a></span>
<span class="line-numbers"><a href="#n233" name="n233">233</a></span>    free (root);
<span class="line-numbers"><a href="#n234" name="n234">234</a></span>}
<span class="line-numbers"><a href="#n235" name="n235">235</a></span>
<span class="line-numbers"><a href="#n236" name="n236">236</a></span><span class="directive">void</span> test1()
<span class="line-numbers"><a href="#n237" name="n237">237</a></span>{
<span class="line-numbers"><a href="#n238" name="n238">238</a></span>    <span class="predefined-type">char</span> s[] = <span class="string"><span class="delimiter">&quot;</span><span class="content">ABCD</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n239" name="n239">239</a></span>    <span class="predefined-type">char</span> s1[] = <span class="string"><span class="delimiter">&quot;</span><span class="content">ABCDE</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><strong><a href="#n240" name="n240">240</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n241" name="n241">241</a></span>    trieCDT trie;
<span class="line-numbers"><a href="#n242" name="n242">242</a></span>    trieCreate(&amp;trie);
<span class="line-numbers"><a href="#n243" name="n243">243</a></span>    trieAdd(trie.root, <span class="string"><span class="delimiter">&quot;</span><span class="content">ABCD</span><span class="delimiter">&quot;</span></span>, <span class="integer">20</span>);
<span class="line-numbers"><a href="#n244" name="n244">244</a></span>    trieAdd(trie.root, <span class="string"><span class="delimiter">&quot;</span><span class="content">ABCDE</span><span class="delimiter">&quot;</span></span>, <span class="integer">30</span>);
<span class="line-numbers"><a href="#n245" name="n245">245</a></span>
<span class="line-numbers"><a href="#n246" name="n246">246</a></span>    <span class="keyword">if</span> (trieIsMember(trie, s)) {
<span class="line-numbers"><a href="#n247" name="n247">247</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Found member 'ABCD'</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n248" name="n248">248</a></span>    }
<span class="line-numbers"><a href="#n249" name="n249">249</a></span>
<span class="line-numbers"><strong><a href="#n250" name="n250">250</a></strong></span>    i = totalStringsWithPrefix(trie, <span class="string"><span class="delimiter">&quot;</span><span class="content">ABC</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n251" name="n251">251</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total words with prefix 'ABC' %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n252" name="n252">252</a></span>
<span class="line-numbers"><a href="#n253" name="n253">253</a></span>    trieDestroy(trie.root);
<span class="line-numbers"><a href="#n254" name="n254">254</a></span>}
<span class="line-numbers"><a href="#n255" name="n255">255</a></span>
<span class="line-numbers"><a href="#n256" name="n256">256</a></span><span class="directive">void</span> startTesting()
<span class="line-numbers"><a href="#n257" name="n257">257</a></span>{
<span class="line-numbers"><a href="#n258" name="n258">258</a></span>    test1();
<span class="line-numbers"><a href="#n259" name="n259">259</a></span>}
<span class="line-numbers"><strong><a href="#n260" name="n260">260</a></strong></span>
<span class="line-numbers"><a href="#n261" name="n261">261</a></span><span class="directive">void</span> startTestingFromFile(<span class="predefined-type">char</span>** stdip_v)
<span class="line-numbers"><a href="#n262" name="n262">262</a></span>{
<span class="line-numbers"><a href="#n263" name="n263">263</a></span>    FILE *fp = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n264" name="n264">264</a></span>    <span class="predefined-type">char</span> key[<span class="integer">50</span>];
<span class="line-numbers"><a href="#n265" name="n265">265</a></span>    trieCDT trie;
<span class="line-numbers"><a href="#n266" name="n266">266</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n267" name="n267">267</a></span>
<span class="line-numbers"><a href="#n268" name="n268">268</a></span>    fp = fopen(stdip_v[<span class="integer">1</span>], <span class="string"><span class="delimiter">&quot;</span><span class="content">r</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n269" name="n269">269</a></span>    <span class="keyword">if</span>(fp == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n270" name="n270">270</a></strong></span>    fprintf(stderr, <span class="string"><span class="delimiter">&quot;</span><span class="content">Can not read file!!</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n271" name="n271">271</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n272" name="n272">272</a></span>    }
<span class="line-numbers"><a href="#n273" name="n273">273</a></span>
<span class="line-numbers"><a href="#n274" name="n274">274</a></span>    trieCreate(&amp;trie);
<span class="line-numbers"><a href="#n275" name="n275">275</a></span>
<span class="line-numbers"><a href="#n276" name="n276">276</a></span>    <span class="keyword">while</span>(fscanf(fp, <span class="string"><span class="delimiter">&quot;</span><span class="content">%s</span><span class="delimiter">&quot;</span></span>, key) != <span class="predefined-constant">EOF</span>) {
<span class="line-numbers"><a href="#n277" name="n277">277</a></span>    trieAdd(trie.root, key, i);
<span class="line-numbers"><a href="#n278" name="n278">278</a></span>    i++;
<span class="line-numbers"><a href="#n279" name="n279">279</a></span>
<span class="line-numbers"><strong><a href="#n280" name="n280">280</a></strong></span>    <span class="keyword">if</span>(!trieIsMember(trie, key)) {
<span class="line-numbers"><a href="#n281" name="n281">281</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Key '%s' NOT found in trie</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, key);
<span class="line-numbers"><a href="#n282" name="n282">282</a></span>    }
<span class="line-numbers"><a href="#n283" name="n283">283</a></span>    }
<span class="line-numbers"><a href="#n284" name="n284">284</a></span>
<span class="line-numbers"><a href="#n285" name="n285">285</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total words inserted in trie %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><a href="#n286" name="n286">286</a></span>
<span class="line-numbers"><a href="#n287" name="n287">287</a></span>    i = totalStringsWithPrefix(trie, <span class="string"><span class="delimiter">&quot;</span><span class="content">Abe</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n288" name="n288">288</a></span>
<span class="line-numbers"><a href="#n289" name="n289">289</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Total prefixs with 'Abe' %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, i);
<span class="line-numbers"><strong><a href="#n290" name="n290">290</a></strong></span>
<span class="line-numbers"><a href="#n291" name="n291">291</a></span>    trieDestroy(trie.root);
<span class="line-numbers"><a href="#n292" name="n292">292</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="infix-to-postfix">Infix to Postfix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/rA0x7b4YiMI" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h3 id="postfix-to-infix">Postfix to Infix</h3>

<iframe width="420" height="315" src="http://distkeys.com//www.youtube.com/embed/OlRENYiiIiw" frameborder="0" allowfullscreen=""></iframe>
<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="evaluate-postfix-expression">Evaluate Postfix expression</h4>

<p>Valid operators are +, -, *, /.<br /> Each operand may be an integer or another expression.</p>

<p>Some examples:<br />
<code>
["2", "1", "+", "3", "*"] -&gt; ((2 + 1) * 3) -&gt; 9<br />
["4", "13", "5", "/", "+"] -&gt; (4 + (13 / 5)) -&gt; 6
</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Postfix  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>class Solution {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="label">public:</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Solution(){};
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    ~Solution() {};
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> evalRPN(vector&lt;string&gt; &amp;tokens) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="predefined-type">int</span> num = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        vector&lt;string&gt;::const_iterator cii;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">for</span>(<span class="predefined-type">int</span> ii=<span class="integer">0</span>; ii &lt; tokens.size(); ii++)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        num = atoi(tokens.at(ii).c_str());
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">if</span> (!((tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">+</span><span class="delimiter">&quot;</span></span>) || (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">-</span><span class="delimiter">&quot;</span></span>) ||
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">*</span><span class="delimiter">&quot;</span></span>) || (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>))) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>            mystack.push(num);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>            <span class="keyword">if</span> (mystack.empty()) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>            <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>            }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>            num = mystack.top();
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>            mystack.pop();
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>            <span class="keyword">if</span> (mystack.empty()) {
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>            <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>            }
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>            <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">+</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>            num += mystack.top();
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">-</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>            num = mystack.top() - num;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">*</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>            num *= mystack.top();
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>            } <span class="keyword">else</span> <span class="keyword">if</span> (tokens[ii] == <span class="string"><span class="delimiter">&quot;</span><span class="content">/</span><span class="delimiter">&quot;</span></span>) {
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>            <span class="keyword">if</span> (num == <span class="integer">0</span>)  {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>                <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>            }
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>            num = mystack.top() / num;
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span>            } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>            <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>            }
<span class="line-numbers"><a href="#n43" name="n43">43</a></span>
<span class="line-numbers"><a href="#n44" name="n44">44</a></span>            mystack.pop();
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>            mystack.push(num);
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>        }
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        }
<span class="line-numbers"><a href="#n48" name="n48">48</a></span>
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        <span class="keyword">return</span> mystack.top();
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>    }
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>    std::stack&lt;<span class="predefined-type">int</span>&gt; mystack;
<span class="line-numbers"><a href="#n53" name="n53">53</a></span>};
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="tree-problems">Tree Problems</h3>

<h4 id="find-bst-is-balanced-or-not">Find BST is balanced or not</h4>

<p>Balanced tree is defined to be a tree such that no two leaf nodes differ in distance from the root by more than one.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Balance BST</span>  <a href="http://ideone.com/2rEls9" target="_blank">Run </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h&gt;</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span class="predefined-type">int</span> arrLen = <span class="integer">5</span>;
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> maxdepth = <span class="integer">0</span>;
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="predefined-type">int</span> mindepth = <span class="integer">10</span>;
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="predefined-type">int</span> totalElem = <span class="integer">8</span>;
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="keyword">typedef</span> <span class="keyword">struct</span> BST {
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> data;
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span>    <span class="keyword">struct</span> BST *left;
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span>    <span class="keyword">struct</span> BST *right;
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span>} nodeBST;
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span><span class="directive">void</span> balanceBST(<span class="predefined-type">int</span> arr[]);
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span>nodeBST* addNode(<span class="predefined-type">int</span> data);
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span><span class="directive">void</span> addNodeToBST(nodeBST *root, nodeBST *node);
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="directive">void</span> traverse(nodeBST *root);
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> maxDepth(nodeBST *root, <span class="predefined-type">int</span> depth);
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="directive">void</span> minDepth(nodeBST *root, <span class="predefined-type">int</span> depth);
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span>
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span><span class="predefined-type">int</span> maxDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> maxDeep);
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span><span class="predefined-type">int</span> minDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> minDeep);
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span>
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span>{
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span>    <span class="predefined-type">int</span> arr[<span class="integer">10</span>] = {<span class="integer">5</span>,<span class="integer">3</span>,<span class="integer">7</span>,<span class="integer">10</span>,<span class="integer">6</span>,<span class="integer">12</span>,<span class="integer">2</span>,<span class="integer">1</span>};
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    (<span class="directive">void</span>)balanceBST(arr);
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>}
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span><span class="directive">void</span> balanceBST(<span class="predefined-type">int</span> arr[])
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span>{
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>    nodeBST *node;
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span>    nodeBST *root;
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    <span class="predefined-type">int</span> max = <span class="integer">0</span>;
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>    <span class="predefined-type">int</span> min = <span class="integer">100000</span>;
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>    <span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &lt; totalElem; i++) {
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>    node = addNode(arr[i]);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span>    <span class="keyword">if</span> (node == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>    }
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span>
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span>    <span class="keyword">if</span> (i == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>        root = node;
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>        <span class="keyword">continue</span>;
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>    }
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span>
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span>    addNodeToBST(root, node);
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span>    }
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Nodes created</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>    traverse(root);
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span>    maxDepth(root, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Max Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, maxdepth);
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>    minDepth(root, <span class="integer">0</span>);
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Min Depth %d</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, mindepth);
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>    max = maxDepthWithoutGlobalVar(root, <span class="integer">0</span>, max);
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Max Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, max);
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span>
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>    min = minDepthWithoutGlobalVar(root, <span class="integer">0</span>, min);
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Min Depth %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, min);
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span>
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span>    <span class="keyword">if</span> ((max - min) &gt; <span class="integer">1</span>) {
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Binary search tree is not Balanced</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Binary search tree is Balanced</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>    }
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span>}
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>nodeBST* addNode(<span class="predefined-type">int</span> data)
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>{
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>    nodeBST *node = (nodeBST*)calloc(<span class="integer">1</span>, <span class="keyword">sizeof</span>(nodeBST));
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span>
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    <span class="keyword">if</span> (node == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>    <span class="keyword">return</span> <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    }
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>    node-&gt;data = data;
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>    node-&gt;left = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>    node-&gt;right = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>    <span class="keyword">return</span> node;
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>}
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span>
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span><span class="directive">void</span> addNodeToBST(nodeBST *root, nodeBST *node)
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>{
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>    <span class="keyword">while</span>(root != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span>    <span class="keyword">if</span> (node-&gt;data &lt; root-&gt;data) {
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>        <span class="keyword">if</span> (root-&gt;left != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>        root = root-&gt;left;
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span>        root-&gt;left = node;
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>        }
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>        <span class="keyword">if</span> (root-&gt;right != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n103" name="n103">103</a></span>        root = root-&gt;right;
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>        root-&gt;right = node;
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>        <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>        }
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>    }
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>    }
<span class="line-numbers"><strong><a href="#n110" name="n110">110</a></strong></span>
<span class="line-numbers"><a href="#n111" name="n111">111</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n112" name="n112">112</a></span>}
<span class="line-numbers"><a href="#n113" name="n113">113</a></span>
<span class="line-numbers"><a href="#n114" name="n114">114</a></span><span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"><a href="#n115" name="n115">115</a></span>{
<span class="line-numbers"><a href="#n116" name="n116">116</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n117" name="n117">117</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n118" name="n118">118</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n119" name="n119">119</a></span>    traverse(root-&gt;left);
<span class="line-numbers"><strong><a href="#n120" name="n120">120</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, root-&gt;data);
<span class="line-numbers"><a href="#n121" name="n121">121</a></span>    traverse(root-&gt;right);
<span class="line-numbers"><a href="#n122" name="n122">122</a></span>    }
<span class="line-numbers"><a href="#n123" name="n123">123</a></span>
<span class="line-numbers"><a href="#n124" name="n124">124</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n125" name="n125">125</a></span>}
<span class="line-numbers"><a href="#n126" name="n126">126</a></span>
<span class="line-numbers"><a href="#n127" name="n127">127</a></span><span class="directive">void</span> maxDepth(nodeBST *root, <span class="predefined-type">int</span> depth)
<span class="line-numbers"><a href="#n128" name="n128">128</a></span>{
<span class="line-numbers"><a href="#n129" name="n129">129</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n130" name="n130">130</a></strong></span>    <span class="keyword">if</span> (maxdepth &lt; depth) {
<span class="line-numbers"><a href="#n131" name="n131">131</a></span>        maxdepth = depth;
<span class="line-numbers"><a href="#n132" name="n132">132</a></span>    }
<span class="line-numbers"><a href="#n133" name="n133">133</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n134" name="n134">134</a></span>    maxDepth(root-&gt;left, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n135" name="n135">135</a></span>    maxDepth(root-&gt;right, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n136" name="n136">136</a></span>    }
<span class="line-numbers"><a href="#n137" name="n137">137</a></span>}
<span class="line-numbers"><a href="#n138" name="n138">138</a></span>
<span class="line-numbers"><a href="#n139" name="n139">139</a></span><span class="directive">void</span> minDepth(nodeBST *root, <span class="predefined-type">int</span> depth)
<span class="line-numbers"><strong><a href="#n140" name="n140">140</a></strong></span>{
<span class="line-numbers"><a href="#n141" name="n141">141</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n142" name="n142">142</a></span>    <span class="keyword">if</span> (mindepth &gt; depth) {
<span class="line-numbers"><a href="#n143" name="n143">143</a></span>        mindepth = depth;
<span class="line-numbers"><a href="#n144" name="n144">144</a></span>    }
<span class="line-numbers"><a href="#n145" name="n145">145</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n146" name="n146">146</a></span>    minDepth(root-&gt;left, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n147" name="n147">147</a></span>    minDepth(root-&gt;right, (depth + <span class="integer">1</span>));
<span class="line-numbers"><a href="#n148" name="n148">148</a></span>    }
<span class="line-numbers"><a href="#n149" name="n149">149</a></span>}
<span class="line-numbers"><strong><a href="#n150" name="n150">150</a></strong></span>
<span class="line-numbers"><a href="#n151" name="n151">151</a></span><span class="predefined-type">int</span> maxDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> maxDeep)
<span class="line-numbers"><a href="#n152" name="n152">152</a></span>{
<span class="line-numbers"><a href="#n153" name="n153">153</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n154" name="n154">154</a></span>    <span class="keyword">if</span> (maxDeep &lt;= depth) {
<span class="line-numbers"><a href="#n155" name="n155">155</a></span>        maxDeep = depth;
<span class="line-numbers"><a href="#n156" name="n156">156</a></span>    }
<span class="line-numbers"><a href="#n157" name="n157">157</a></span>    <span class="keyword">return</span> maxDeep;
<span class="line-numbers"><a href="#n158" name="n158">158</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n159" name="n159">159</a></span>        maxDeep = maxDepthWithoutGlobalVar(root-&gt;left, (depth + <span class="integer">1</span>), maxDeep);
<span class="line-numbers"><strong><a href="#n160" name="n160">160</a></strong></span>    maxDeep = maxDepthWithoutGlobalVar(root-&gt;right, (depth + <span class="integer">1</span>), maxDeep);
<span class="line-numbers"><a href="#n161" name="n161">161</a></span>    }
<span class="line-numbers"><a href="#n162" name="n162">162</a></span>
<span class="line-numbers"><a href="#n163" name="n163">163</a></span>    <span class="keyword">return</span> maxDeep;
<span class="line-numbers"><a href="#n164" name="n164">164</a></span>}
<span class="line-numbers"><a href="#n165" name="n165">165</a></span>
<span class="line-numbers"><a href="#n166" name="n166">166</a></span><span class="predefined-type">int</span> minDepthWithoutGlobalVar(nodeBST *root, <span class="predefined-type">int</span> depth, <span class="predefined-type">int</span> minDeep)
<span class="line-numbers"><a href="#n167" name="n167">167</a></span>{
<span class="line-numbers"><a href="#n168" name="n168">168</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n169" name="n169">169</a></span>    <span class="keyword">if</span> (minDeep &gt;= depth) {
<span class="line-numbers"><strong><a href="#n170" name="n170">170</a></strong></span>        minDeep = depth;
<span class="line-numbers"><a href="#n171" name="n171">171</a></span>    }
<span class="line-numbers"><a href="#n172" name="n172">172</a></span>    <span class="keyword">return</span> minDeep;
<span class="line-numbers"><a href="#n173" name="n173">173</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n174" name="n174">174</a></span>        minDeep = minDepthWithoutGlobalVar(root-&gt;left, (depth + <span class="integer">1</span>), minDeep);
<span class="line-numbers"><a href="#n175" name="n175">175</a></span>    minDeep = minDepthWithoutGlobalVar(root-&gt;right, (depth + <span class="integer">1</span>), minDeep);
<span class="line-numbers"><a href="#n176" name="n176">176</a></span>    }
<span class="line-numbers"><a href="#n177" name="n177">177</a></span>
<span class="line-numbers"><a href="#n178" name="n178">178</a></span>    <span class="keyword">return</span> minDeep;
<span class="line-numbers"><a href="#n179" name="n179">179</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h4 id="find-binary-tree-is-bst-or-not">Find Binary Tree is BST or not</h4>

<p>A binary search tree (BST) is a node based binary tree data structure which has the following properties.<br />
• The left subtree of a node contains only nodes with keys less than the node’s key.<br />
• The right subtree of a node contains only nodes with keys greater than the node’s key.<br />
• Both the left and right subtrees must also be binary search trees.<br /><br /></p>

<p><strong>Method 1</strong></p>

<p>Perform inorder traversal on tree and store it in temporary array. By property of inorder traversal the numbers stored should be sorted sequence of it’s a BST else it’s not BST.</p>

<blockquote>
  <p>The only caveat is that this method require O(n) space</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Verify BST  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="predefined-type">int</span> temp[TREESIZE];
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="directive">static</span> <span class="predefined-type">int</span> n = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        traverse(root-&gt;left);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        temp[n++] = root-&gt;data;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        traverse1(root-&gt;right);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="keyword">for</span> (<span class="predefined-type">int</span> i = <span class="integer">0</span>; i &lt; TREESIZE; i++) {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="keyword">if</span> (temp[i] &gt; temp [i + <span class="integer">1</span>]) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        <span class="keyword">return</span> <span class="integer">0</span>; <span class="comment">// Binary tree is not BST</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>}
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="keyword">return</span> <span class="integer">1</span>;
</pre></div>
</div>
 </figure></notextile></div>

<p><br /><br /></p>

<p><strong>Method 2</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Verify BST  </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="predefined-type">int</span> isBSTUtil(nodeBST* node, <span class="predefined-type">int</span> min, <span class="predefined-type">int</span> max);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> 
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">/* Returns true if the given tree is a binary search tree </span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment"> (efficient version). */</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> isBST(nodeBST* node) 
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>{ 
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  <span class="keyword">return</span>(isBSTUtil(node, INT_MIN, INT_MAX)); 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>} 
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> 
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">/* Returns true if the given tree is a BST and its </span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment">   values are &gt;= min and &lt;= max. */</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="predefined-type">int</span> isBSTUtil(nodeBST* node, <span class="predefined-type">int</span> min, <span class="predefined-type">int</span> max) 
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{ 
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>  <span class="comment">/* an empty tree is BST */</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>  <span class="keyword">if</span> (node==<span class="predefined-constant">NULL</span>) 
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>     <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>       
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>  <span class="comment">/* false if this node violates the min/max constraint */</span> 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>  <span class="keyword">if</span> (node-&gt;data &lt; min || node-&gt;data &gt; max) 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>     <span class="keyword">return</span> <span class="integer">0</span>; 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span> 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>  <span class="comment">/* otherwise check the subtrees recursively, </span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="comment">   tightening the min or max constraint */</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>  <span class="keyword">return</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    isBSTUtil(node-&gt;left, min, (node-&gt;data - <span class="integer">1</span>)) &amp;&amp;  <span class="comment">// Allow only distinct values</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    isBSTUtil(node-&gt;right, (node-&gt;data + <span class="integer">1</span>), max);  <span class="comment">// Allow only distinct values</span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>} 
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---recursive-inorder-traversal">BST - Recursive Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack for function calls</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Recursive Inorder</span>  <a href="http://ideone.com/Bo2ZpL" target="_blank">Run Code</a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="comment">// Recursive inorder traverse</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="directive">void</span> traverse(nodeBST *root)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>     <span class="keyword">if</span> (root == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>         <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>     } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>         traverse(root-&gt;left);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>         printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, root-&gt;data);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>         traverse(root-&gt;right);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>     }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> 
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>     <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span> }
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---iterative-inorder-traversal">BST - Iterative Inorder Traversal</h4>

<blockquote>
  <p>Time complexity O(n) and space complexity is size of stack </p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Iterative Inorder</span>  <a href="http://ideone.com/Bo2ZpL" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="comment">// Iterative</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span> <span class="comment">// 1) Create an empty stack S.</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span> <span class="comment">// 2) Initialize current node as root</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span> <span class="comment">// 3) Push the current node to S and set current = current-&gt;left until curt is NULL</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> <span class="comment">// 4) If current is NULL and stack is not empty then$</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span> <span class="comment">//      a) Pop the top item from stack.</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> <span class="comment">//      b) Print the popped item, set current = current-&gt;right</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span> <span class="comment">//      c) Go to step 3.</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span> <span class="comment">// 5) If current is NULL and stack is empty then we are done.</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span> <span class="directive">void</span> iterativeInorder(nodeBST *root)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span> {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>     createStack();
<span class="line-numbers"><a href="#n15" name="n15">15</a></span> 
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>     <span class="keyword">while</span>(<span class="integer">1</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>         <span class="keyword">if</span> (root != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>             <span class="comment">// Keep pushing in the stack</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>             push(root);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>             root = root-&gt;left;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>         } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>             <span class="keyword">if</span> (isStackEmpty()) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>                 <span class="keyword">break</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>             }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span> 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>             root = pop();
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>             printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, root-&gt;data);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span> 
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>             root = root-&gt;right;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>         }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>     }
<span class="line-numbers"><a href="#n32" name="n32">32</a></span> }
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br />
<br /></p>

<h4 id="bst---morris-inorder-traversal">BST - Morris Inorder Traversal</h4>

<p>Morris Inorder Traversal run without using recursion and without extra stack space.</p>

<blockquote>
  <p>Morris Inorder runs in O(NlogN) time and O(1) space</p>
</blockquote>

<p><img src="http://distkeys.com/assets/morris.png" title="[morris.png]" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Morris Inorder</span>  <a href="http://ideone.com/Bo2ZpL" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>  <span class="directive">void</span> MorrisInorder(nodeBST *root) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      nodeBST* current,*pre;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>      current=root;
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>      <span class="keyword">while</span>(current!=<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>          <span class="keyword">if</span>(current-&gt;left==<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>              printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>,current-&gt;data);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>              current=current-&gt;right;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>          }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>          <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>              pre=current-&gt;left;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>              <span class="keyword">while</span>(pre-&gt;right != <span class="predefined-constant">NULL</span> &amp;&amp; pre-&gt;right !=current)
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                  pre=pre-&gt;right;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>              <span class="keyword">if</span>(pre-&gt;right==<span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>                  printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Link %d, %d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, pre-&gt;data, current-&gt;data);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                  pre-&gt;right=current;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>                  current=current-&gt;left;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>              }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>              <span class="keyword">else</span> {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>                  pre-&gt;right=<span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>                  printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>,current-&gt;data);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>                  current=current-&gt;right;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>              }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>          }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>      }
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>  }
</pre></div>
</div>
 </figure></notextile></div>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://distkeys.com/blog/2013/11/18/recursion/"/>
    <updated>2013-11-18T22:18:00-08:00</updated>
    <id>http://distkeys.com/blog/2013/11/18/recursion</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recusion-problems">Recusion problems</a>    <ul>
      <li><a href="#factorial">Factorial</a></li>
      <li><a href="#total-bunnyears">Total BunnyEars</a></li>
      <li><a href="#evenodd-bunnyears">Even/Odd BunnyEars</a></li>
      <li><a href="#triangle">Triangle</a></li>
      <li><a href="#sum-of-digits">Sum of Digits</a></li>
      <li><a href="#count-no-7">Count no 7</a></li>
      <li><a href="#count-x-in-string">Count X in String</a></li>
      <li><a href="#count-hi">Count Hi</a></li>
      <li><a href="#change-xy-string">Change XY String</a></li>
      <li><a href="#change-pi">Change PI</a></li>
      <li><a href="#no-x-in-string">No X in String</a></li>
      <li><a href="#no-star-in-string">No Star in String</a></li>
      <li><a href="#substring">Substring</a></li>
      <li><a href="#string-permutation-non-repeating">String permutation non repeating</a></li>
      <li><a href="#power-x-n">Power (x, n)</a></li>
    </ul>
  </li>
</ul>

<p>This article is all about recusion.</p>

<div class="wikipedia">
  
    <img src="http://distkeys.com//upload.wikimedia.org/wikipedia/commons/thumb/6/62/Droste.jpg/220px-Droste.jpg" />
  
  <h2>Recursion</h2>
  <div>
    <p><strong>Recursion</strong> is the process of repeating items in a <a href="http://en.wikipedia.org/wiki/Self-similarity" title="Self-similarity">self-similar</a> way. For instance, when the surfaces of two mirrors are exactly parallel with each other the nested images that occur are a form of infinite recursion. The term has a variety of meanings specific to a variety of disciplines ranging from <a href="http://en.wikipedia.org/wiki/Linguistics" title="Linguistics">linguistics</a> to <a href="http://en.wikipedia.org/wiki/Logic" title="Logic">logic</a>. The most common application of recursion is in <a href="http://en.wikipedia.org/wiki/Mathematics" title="Mathematics">mathematics</a> and <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, in which it refers to a method of defining <a href="http://en.wikipedia.org/wiki/Function_(mathematics)" title="Function (mathematics)">functions</a> in which the function being defined is applied within its own definition. Specifically this defines an infinite number of instances (function values), using a finite expression that for some instances may refer to other instances, but in such a way that no loop or infinite chain of references can occur. The term is also used more generally to describe a process of repeating objects in a self-similar way.
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Recursion">Read more</a>
</div>

<!-- more -->
<p><br /></p>

<p>Recursion is basis Dynamic programming, another important area in algorithms.</p>

<p>Best way to learn about recursion is to solve recursion problem.</p>

<p><br /></p>

<h3 id="recusion-problems">Recusion problems</h3>

<h4 id="factorial">Factorial</h4>

<p>Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) … 1
Compute the result recursively (without loops).</p>

<p>factorial(1) → 1<br />
factorial(2) → 2<br />
factorial(3) → 6<br /></p>

<script src="http://ideone.com/e.js/XWZvBI" type="text/javascript"></script>

<p><br /></p>

<h4 id="total-bunnyears">Total BunnyEars</h4>

<p>We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).</p>

<p>bunnyEars(0) → 0<br />
bunnyEars(1) → 2<br />
bunnyEars(2) → 4<br /></p>

<script src="http://ideone.com/e.js/vrDEiY" type="text/javascript"></script>

<p><br /></p>

<h4 id="evenodd-bunnyears">Even/Odd BunnyEars</h4>

<p>We have bunnies standing in a line, numbered 1, 2, … The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we’ll say have 3 ears, because they each have a raised foot. Recursively return the number of “ears” in the bunny line 1, 2, … n (without loops or multiplication).</p>

<p>bunnyEars2(0) → 0<br />
bunnyEars2(1) → 2<br />
bunnyEars2(2) → 5<br /></p>

<script src="http://ideone.com/e.js/U92tnQ" type="text/javascript"></script>

<p><br /></p>

<h4 id="triangle">Triangle</h4>

<p>We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows. </p>

<p>triangle(0) → 0<br />
triangle(1) → 1<br />
triangle(2) → 3<br /></p>

<script src="http://ideone.com/e.js/3qfqXz" type="text/javascript"></script>

<p><br /></p>

<h4 id="sum-of-digits">Sum of Digits</h4>

<p>Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).</p>

<p>sumDigits(126) → 9<br />
sumDigits(49) → 13<br />
sumDigits(12) → 3<br /></p>

<script src="http://ideone.com/e.js/AmFVVT" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-no-7">Count no 7</h4>

<p>Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12). </p>

<p>count7(717) → 2<br />
count7(7) → 1<br />
count7(123) → 0<br /></p>

<script src="http://ideone.com/e.js/QX5h4w" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-x-in-string">Count X in String</h4>

<p>Given a string, compute recursively (no loops) the number of lowercase ‘x’ chars in the string. </p>

<p>countX(“xxhixx”) → 4 <br />
countX(“xhixhix”) → 3<br />
countX(“hi”) → 0<br /></p>

<script src="http://ideone.com/e.js/DwK19H" type="text/javascript"></script>

<p><br /></p>

<h4 id="count-hi">Count Hi</h4>

<p>Given a string, compute recursively (no loops) the number of times lowercase “hi” appears in the string. </p>

<p>countHi(“xxhixx”) → 1<br />
countHi(“xhixhix”) → 2<br />
countHi(“hi”) → 1<br /></p>

<script src="http://ideone.com/e.js/vGNoFy" type="text/javascript"></script>

<p><br /></p>

<h4 id="change-xy-string">Change XY String</h4>

<p>Given a string, compute recursively (no loops) a new string where all the lowercase ‘x’ chars have been changed to ‘y’ chars.</p>

<p>changeXY(“codex”) → “codey”<br />
changeXY(“xxhixx”) → “yyhiyy”<br />
changeXY(“xhixhix”) → “yhiyhiy”<br /></p>

<p>public String changeXY(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="change-pi">Change PI</h4>

<p>Given a string, compute recursively (no loops) a new string where all appearances of “pi” have been replaced by “3.14”. </p>

<p>changePi(“xpix”) → “x3.14x”<br />
changePi(“pipi”) → “3.143.14”<br />
changePi(“pip”) → “3.14p”<br /></p>

<p>public String changePi(String str) {</p>

<p>}
<br /></p>

<h4 id="no-x-in-string">No X in String</h4>

<p>Given a string, compute recursively a new string where all the ‘x’ chars have been removed. </p>

<p>noX(“xaxb”) → “ab” <br />
noX(“abc”) → “abc”<br />
noX(“xx”) → ““<br /></p>

<p>public String noX(String str) {</p>

<p>}
<br /></p>

<h4 id="no-star-in-string">No Star in String</h4>

<p>Given a string, compute recursively a new string where all the adjacent chars are now separated by a “*”. </p>

<p>allStar(“hello”) → “h*e*l*l*o”<br />
allStar(“abc”) → “a*b*c”<br />
allStar(“ab”) → “a*b”<br /></p>

<p>public String allStar(String str) {</p>

<p>}</p>

<p><br /></p>

<h4 id="substring">Substring</h4>

<p>It’s also convenient to have a function that, given a sentence, selects a small portion
of a sentence for us. For example, if we had the sentence:<br />
(russians declare war rington vodka to be excellent)</p>

<p>We could imagine using a hypothetical subsentence function that would let us pull out the first few words
of that sentence, if we tell it where to start and stop the selection:<br />
(subsentence ‘(russians declare war rington vodka to be excellent) 1 3)<br />
(russians declare war)</p>

<p>(subsentence ‘(no shirt no shoes no service) 4 4)<br />
(shoes)<br /></p>

<p>Write the function subsentence, which takes in three arguments: a sentence, the starting endpoint,
and the stopping endpoint. It should return back a sentence that includes the words between the start and
stop endpoints. Assume that the user is nice, and won’t give weird input. In Scheme notation, we mean
that we can assume (&lt;= 1 start stop (count sent)) is always true.</p>

<script src="http://ideone.com/e.js/EsxIJg" type="text/javascript"></script>

<p><br /></p>

<h4 id="string-permutation-non-repeating">String permutation non repeating</h4>

<p>Write all the non repeating permutations of given string i.e.</p>

<p>For string ABC<br />
ABC, ACB, BAC, BCA, CAB, CBA</p>

<p>Detailed solution with explanation can be found <a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" target="_blank">here</a></p>

<p><img class="left" src="http://d2o58evtke57tz.cloudfront.net/wp-content/uploads/NewPermutation.gif" /></p>

<p><br /></p>

<script src="http://ideone.com/e.js/yvIH1b" type="text/javascript"></script>

<p>This code will output reapeated string if input string given is say ‘ABA’.<br />
To avoid that store all the strings generated in array/hash and compare everytime for uniquesness.
<br /></p>

<h4 id="power-x-n">Power (x, n)</h4>

<p>Write a C program to calculate pow(x, n)</p>

<p>For e.g <br /></p>

<script type="math/tex; mode=display">\begin{align}
  2^4 = 16
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
2^3 = 8
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-2} = 0.25
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
       2^{-4} = 0.0625
\end{align}</script>

<script type="math/tex; mode=display">\begin{align}
      -2^{-3} = -0.125
\end{align}</script>

<p><strong>Solution</strong>
Idea is that if power is even then multiply evenly i.e. </p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>4</mn></msup></math> will be (2 * 2) * (2 * 2)</p>

<p>For <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>2</mi><mn>3</mn></msup></math> will be 2 * (2  * 2)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Power (x, n)</span>  <a href="http://ideone.com/BpMEJ8" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">float</span> power(<span class="predefined-type">float</span> x, <span class="predefined-type">int</span> n)
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>{
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="predefined-type">float</span> temp;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">if</span>( n == <span class="integer">0</span>)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        <span class="keyword">return</span> <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    temp = power(x, n/<span class="integer">2</span>);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">if</span> ((n % <span class="integer">2</span>) == <span class="integer">0</span>)
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span class="keyword">return</span> temp*temp;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">else</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span class="keyword">if</span>(n &gt; <span class="integer">0</span>)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>            <span class="keyword">return</span> x*temp*temp;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span class="keyword">else</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>            <span class="keyword">return</span> (temp * temp) / x;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>}
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>{
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    <span class="predefined-type">float</span> res = power(<span class="integer">2</span>, <span class="integer">4</span>);
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^4 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    res = power(<span class="integer">2</span>, <span class="integer">3</span>);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^3 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    res = power(<span class="integer">2</span>, -<span class="integer">2</span>);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^-2 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    res = power(<span class="integer">2</span>, -<span class="integer">4</span>);
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^-4 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    res = power(-<span class="integer">2</span>, -<span class="integer">3</span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Result 2^4 = %f </span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, res);
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparison based Sorting]]></title>
    <link href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/"/>
    <updated>2013-10-13T01:43:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/13/comparison-based-sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#merge-sort">Merge Sort</a></li>
  <li><a href="#table-based-comparison">Table based comparison</a></li>
  <li><a href="#merge-sort-code">Merge sort code</a></li>
  <li><a href="#quick-sort-code">Quick sort code</a></li>
  <li><a href="#references">References</a></li>
</ul>

<h3 id="merge-sort">Merge Sort</h3>

<p>Merge sort follows <code>divide-and-conquer</code> approach.</p>

<p><br /><br /><br /><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge-Sort </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>MERGE-SORT(A, p, r) <span class="comment">// A is array of numbers</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>{                   <span class="comment">// p is starting index of array</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>                    <span class="comment">// r is last index of array</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">if</span> p &lt; r
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    then q &lt;- <span class="error">⌊</span>(p + r)<span class="error">⌋</span> / <span class="integer">2</span>;  
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        MERGE-SORT(A, p, q)
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        MERGE-SORT(A, q + <span class="integer">1</span>, r)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        MERGE(A, p, q, r)
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>}
</pre></div>
</div>
 </figure></notextile></div>

<!-- more -->
<p><br /></p>

<p>Merge Sort</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge-Sort </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>MERGE(A, p, q, r)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>n1 &lt;- q - p + <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>n2 &lt;- r - q
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>create arrays L[<span class="float">1</span>...n1 + <span class="integer">1</span>] and R[<span class="float">1</span>... n2 + <span class="integer">1</span>] <span class="comment">// It took O(n) space</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">//Assign elements to new sub arrays</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="keyword">for</span> i &lt;- <span class="integer">1</span> to n1
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="keyword">do</span> L[i] &lt;- A[p + i - <span class="integer">1</span>]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>     
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="keyword">for</span> j &lt;- <span class="integer">1</span> to n2
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">do</span> R[j] &lt;- A[q + j]
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="comment">//Mark end of array</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>L[n1 + <span class="integer">1</span>] &lt;- <span class="error">∞</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>R[n2 + <span class="integer">1</span>] &lt;- <span class="error">∞</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<p>Merging two arrays L[] and R[]</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge step </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>i &lt;- <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>j &lt;- <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="keyword">for</span> k &lt;- p to r {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">do</span> <span class="keyword">if</span> L[i] &lt;= R[j]
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        then A[k] &lt;- L[i]
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>            i &lt;- i + <span class="integer">1</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span class="keyword">else</span> A[k] &lt;- R[j]
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>            j &lt;- j + <span class="integer">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<p><strong>Analysis</strong></p>

<p>Time complexity</p>

<p>Fully expanded recursion tree has <code>logn + 1</code> levels.<br />
Each level contributes to total cost of <code>cn</code></p>

<p>Total cost = <em>cn logn + cn = O(nlogn)</em> </p>

<h3 id="table-based-comparison">Table based comparison</h3>

<table>
<thead>
<tr>
    <th><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge Sort</a></th><th><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heap Sort</a></th><th><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quick Sort</a></th>
</tr>
</thead>
<tbody>
<tr>
    <td>Space O(n)</td>
    <td><code class="mygreen">In place</code></td>
    <td><code class="mygreen">In place</code></td>
</tr>
<tr>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(nlogn)</td>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(nlogn)</td>
    <td>Best:  O(nlogn)<br />Avg:   O(nlogn)<br />Worst: O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
</tr>
<tr>
    <td>Divide and Conquer</td>
    <td />
    <td>Divide and Conquer</td>
</tr>
<tr>
    <td>Runs better than heapsort<br /> in data cache if its on array</td>
    <td>Runs faster in small data cache</td>
    <td>Works really well in<br /> virtual memory env/Caches</td>
</tr>
<tr>
    <td>Access frequent contiguous<br /> memory locations</td>
    <td>Spread throughout the heap</td>
    <td>Access frequent contiguous<br /> memory locations</td>
</tr>
<tr>
    <td>Stable</td>
    <td>Not Stable</td>
    <td>Not Stable</td>
</tr>
<tr>
    <td>Parallelize well</td>
    <td>Do not Parallelize well</td>
    <td>Parallelize well</td>
</tr>
<tr>
    <td>Used in external sort</td>
    <td>Can not be used in external sort.<br /> <code class="myred">Locality of ref is issue.</code></td>
    <td>Used in external sort</td>
</tr>
</tbody>
</table>

<p><br /></p>

<h3 id="merge-sort-code">Merge sort code</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Merge Sort</span>  <a href="http://ideone.com/BuLW5z" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers">  <a href="#n1" name="n1">1</a></span>
<span class="line-numbers">  <a href="#n2" name="n2">2</a></span><span class="comment">// Merge Sort example</span>
<span class="line-numbers">  <a href="#n3" name="n3">3</a></span><span class="comment">// For input array</span>
<span class="line-numbers">  <a href="#n4" name="n4">4</a></span><span class="comment">// 2 8 7 1 3 5 6 4 9 0</span>
<span class="line-numbers">  <a href="#n5" name="n5">5</a></span><span class="comment">//</span>
<span class="line-numbers">  <a href="#n6" name="n6">6</a></span><span class="comment">// First partion in L[] and R[] will be</span>
<span class="line-numbers">  <a href="#n7" name="n7">7</a></span><span class="comment">// L[] = 2 8 7 1 3 ==&gt; L[] = 2 8 7 | R[] = 1 3 ==&gt; L[] = 2 8 | R[] = 7</span>
<span class="line-numbers">  <a href="#n8" name="n8">8</a></span><span class="comment">// R[] = 5 6 4 9 0</span>
<span class="line-numbers">  <a href="#n9" name="n9">9</a></span><span class="comment">//</span>
<span class="line-numbers"> <strong><a href="#n10" name="n10">10</a></strong></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n11" name="n11">11</a></span> 
<span class="line-numbers"> <a href="#n12" name="n12">12</a></span><span class="preprocessor">#define</span> EOA <span class="integer">100000</span>  <span class="comment">//End of array</span>
<span class="line-numbers"> <a href="#n13" name="n13">13</a></span> 
<span class="line-numbers"> <a href="#n14" name="n14">14</a></span><span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers"> <a href="#n15" name="n15">15</a></span><span class="comment">// #define DEBUG 1</span>
<span class="line-numbers"> <a href="#n16" name="n16">16</a></span> 
<span class="line-numbers"> <a href="#n17" name="n17">17</a></span><span class="preprocessor">#ifdef</span> DEBUG
<span class="line-numbers"> <a href="#n18" name="n18">18</a></span><span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"> <a href="#n19" name="n19">19</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"> <strong><a href="#n20" name="n20">20</a></strong></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"> <a href="#n21" name="n21">21</a></span><span class="preprocessor">#endif</span>
<span class="line-numbers"> <a href="#n22" name="n22">22</a></span> 
<span class="line-numbers"> <a href="#n23" name="n23">23</a></span><span class="directive">void</span> mergesort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"> <a href="#n24" name="n24">24</a></span><span class="directive">void</span> merge(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> q, <span class="predefined-type">int</span> r); 
<span class="line-numbers"> <a href="#n25" name="n25">25</a></span> 
<span class="line-numbers"> <a href="#n26" name="n26">26</a></span><span class="predefined-type">int</span> arr[<span class="integer">10</span>] = {<span class="integer">2</span>, <span class="integer">8</span>, <span class="integer">7</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">4</span>, <span class="integer">9</span>, <span class="integer">0</span>}; 
<span class="line-numbers"> <a href="#n27" name="n27">27</a></span> 
<span class="line-numbers"> <a href="#n28" name="n28">28</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n29" name="n29">29</a></span>{
<span class="line-numbers"> <strong><a href="#n30" name="n30">30</a></strong></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n31" name="n31">31</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Input array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n32" name="n32">32</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n33" name="n33">33</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"> <a href="#n34" name="n34">34</a></span>    }   
<span class="line-numbers"> <a href="#n35" name="n35">35</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n36" name="n36">36</a></span> 
<span class="line-numbers"> <a href="#n37" name="n37">37</a></span>    mergesort(arr, <span class="integer">0</span>, <span class="integer">9</span>); 
<span class="line-numbers"> <a href="#n38" name="n38">38</a></span> 
<span class="line-numbers"> <a href="#n39" name="n39">39</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sorted output</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <strong><a href="#n40" name="n40">40</a></strong></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= <span class="integer">9</span>; i++) {
<span class="line-numbers"> <a href="#n41" name="n41">41</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"> <a href="#n42" name="n42">42</a></span>    }   
<span class="line-numbers"> <a href="#n43" name="n43">43</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"> <a href="#n44" name="n44">44</a></span> 
<span class="line-numbers"> <a href="#n45" name="n45">45</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n46" name="n46">46</a></span>}
<span class="line-numbers"> <a href="#n47" name="n47">47</a></span> 
<span class="line-numbers"> <a href="#n48" name="n48">48</a></span><span class="directive">void</span> mergesort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"> <a href="#n49" name="n49">49</a></span>{
<span class="line-numbers"> <strong><a href="#n50" name="n50">50</a></strong></span>    <span class="keyword">if</span> (p &lt; r) {
<span class="line-numbers"> <a href="#n51" name="n51">51</a></span>        <span class="predefined-type">int</span> q = (p + r) / <span class="integer">2</span>;
<span class="line-numbers"> <a href="#n52" name="n52">52</a></span> 
<span class="line-numbers"> <a href="#n53" name="n53">53</a></span>        mergesort(arr, p, q);
<span class="line-numbers"> <a href="#n54" name="n54">54</a></span>        mergesort(arr, q+<span class="integer">1</span>, r);
<span class="line-numbers"> <a href="#n55" name="n55">55</a></span>        merge(arr, p, q, r);
<span class="line-numbers"> <a href="#n56" name="n56">56</a></span>    }
<span class="line-numbers"> <a href="#n57" name="n57">57</a></span>}
<span class="line-numbers"> <a href="#n58" name="n58">58</a></span> 
<span class="line-numbers"> <a href="#n59" name="n59">59</a></span><span class="directive">void</span> merge(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> q, <span class="predefined-type">int</span> r)
<span class="line-numbers"> <strong><a href="#n60" name="n60">60</a></strong></span>{
<span class="line-numbers"> <a href="#n61" name="n61">61</a></span>    <span class="predefined-type">int</span> n1 = q - p + <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n62" name="n62">62</a></span>    <span class="predefined-type">int</span> n2 = r - q;
<span class="line-numbers"> <a href="#n63" name="n63">63</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n64" name="n64">64</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n65" name="n65">65</a></span> 
<span class="line-numbers"> <a href="#n66" name="n66">66</a></span>    <span class="predefined-type">int</span> L[<span class="integer">15</span>];
<span class="line-numbers"> <a href="#n67" name="n67">67</a></span>    <span class="predefined-type">int</span> R[<span class="integer">15</span>];
<span class="line-numbers"> <a href="#n68" name="n68">68</a></span> 
<span class="line-numbers"> <a href="#n69" name="n69">69</a></span>    <span class="comment">//Copy elements from p to n1 in L[]</span>
<span class="line-numbers"> <strong><a href="#n70" name="n70">70</a></strong></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; n1; i++) {
<span class="line-numbers"> <a href="#n71" name="n71">71</a></span>        L[i] = arr[p + i];
<span class="line-numbers"> <a href="#n72" name="n72">72</a></span>    }
<span class="line-numbers"> <a href="#n73" name="n73">73</a></span>    L[i] = EOA;
<span class="line-numbers"> <a href="#n74" name="n74">74</a></span> 
<span class="line-numbers"> <a href="#n75" name="n75">75</a></span>    <span class="keyword">for</span> (j = <span class="integer">0</span>; j &lt; n2; j++) {
<span class="line-numbers"> <a href="#n76" name="n76">76</a></span>        R[j] = arr[q + j + <span class="integer">1</span>];
<span class="line-numbers"> <a href="#n77" name="n77">77</a></span>    }
<span class="line-numbers"> <a href="#n78" name="n78">78</a></span>    R[j] = EOA;
<span class="line-numbers"> <a href="#n79" name="n79">79</a></span> 
<span class="line-numbers"> <strong><a href="#n80" name="n80">80</a></strong></span>    <span class="predefined-type">int</span> lindx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n81" name="n81">81</a></span>    <span class="predefined-type">int</span> rindx = <span class="integer">0</span>;
<span class="line-numbers"> <a href="#n82" name="n82">82</a></span>    <span class="comment">//Merge array L[] and R[]</span>
<span class="line-numbers"> <a href="#n83" name="n83">83</a></span>    <span class="keyword">for</span> (i = p; i &lt;= r; i++) {
<span class="line-numbers"> <a href="#n84" name="n84">84</a></span>        <span class="keyword">if</span>(L[lindx] &lt;= R[rindx]) {
<span class="line-numbers"> <a href="#n85" name="n85">85</a></span>            arr[i] = L[lindx++];
<span class="line-numbers"> <a href="#n86" name="n86">86</a></span>        } <span class="keyword">else</span> {
<span class="line-numbers"> <a href="#n87" name="n87">87</a></span>            arr[i] = R[rindx++];
<span class="line-numbers"> <a href="#n88" name="n88">88</a></span>        }
<span class="line-numbers"> <a href="#n89" name="n89">89</a></span>    }
<span class="line-numbers"> <strong><a href="#n90" name="n90">90</a></strong></span> 
<span class="line-numbers"> <a href="#n91" name="n91">91</a></span>    <span class="comment">// Print debug statements</span>
<span class="line-numbers"> <a href="#n92" name="n92">92</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">######################</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"> <a href="#n93" name="n93">93</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Left array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"> <a href="#n94" name="n94">94</a></span> 
<span class="line-numbers"> <a href="#n95" name="n95">95</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; n1; i++) {
<span class="line-numbers"> <a href="#n96" name="n96">96</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, L[i]));
<span class="line-numbers"> <a href="#n97" name="n97">97</a></span>    }
<span class="line-numbers"> <a href="#n98" name="n98">98</a></span> 
<span class="line-numbers"> <a href="#n99" name="n99">99</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Right array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><strong><a href="#n100" name="n100">100</a></strong></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; n2; i++) {
<span class="line-numbers"><a href="#n101" name="n101">101</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, R[i]));
<span class="line-numbers"><a href="#n102" name="n102">102</a></span>    }
<span class="line-numbers"><a href="#n103" name="n103">103</a></span> 
<span class="line-numbers"><a href="#n104" name="n104">104</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">After Merge</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n105" name="n105">105</a></span>    <span class="keyword">for</span> (i = p; i &lt;= r; i++) {
<span class="line-numbers"><a href="#n106" name="n106">106</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]));
<span class="line-numbers"><a href="#n107" name="n107">107</a></span>    }
<span class="line-numbers"><a href="#n108" name="n108">108</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n109" name="n109">109</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="quick-sort-code">Quick sort code</h3>
<p><a href="https://www.dropbox.com/s/czbcc6seqfl1eir/Quicksort%20Example.pdf" target="_blank">Quicksort explanation</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Quick Sort</span>  <a href="http://ideone.com/qGqmLR" target="_blank">Run Code </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// Quick Sort example</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">// For input array</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">// 2 8 7 1 3 5 6 4</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="preprocessor">#define</span> IPSIZE <span class="integer">8</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span> 
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">// To enable debug messages uncomment #define</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">// #define DEBUG 1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span> 
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="preprocessor">#ifdef</span> DEBUG
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="preprocessor">#  define</span> D(x) x
<span class="line-numbers"><a href="#n14" name="n14">14</a></span><span class="preprocessor">#else</span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="preprocessor">#  define</span> D(x)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="preprocessor">#endif</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span> 
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="directive">void</span> quicksort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="predefined-type">int</span> partition(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r); 
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="directive">void</span> swap(<span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j); 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span> 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="predefined-type">int</span> arr[IPSIZE] = {<span class="integer">2</span>, <span class="integer">8</span>, <span class="integer">7</span>, <span class="integer">1</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">6</span>, <span class="integer">4</span>}; 
<span class="line-numbers"><a href="#n23" name="n23">23</a></span> 
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>{
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Input array</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= IPSIZE - <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }   
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n32" name="n32">32</a></span> 
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>    quicksort(arr, <span class="integer">0</span>, IPSIZE - <span class="integer">1</span>); 
<span class="line-numbers"><a href="#n34" name="n34">34</a></span> 
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Sorted output</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= IPSIZE - <span class="integer">1</span>; i++) {
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>        printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[i]);
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>    }   
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n40" name="n40">40</a></strong></span> 
<span class="line-numbers"><a href="#n41" name="n41">41</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n42" name="n42">42</a></span>}
<span class="line-numbers"><a href="#n43" name="n43">43</a></span> 
<span class="line-numbers"><a href="#n44" name="n44">44</a></span><span class="directive">void</span> quicksort(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"><a href="#n45" name="n45">45</a></span>{
<span class="line-numbers"><a href="#n46" name="n46">46</a></span>    <span class="keyword">if</span> (p &lt; r) {
<span class="line-numbers"><a href="#n47" name="n47">47</a></span>        <span class="predefined-type">int</span> pivotIndx = partition(arr, p, r);
<span class="line-numbers"><a href="#n48" name="n48">48</a></span> 
<span class="line-numbers"><a href="#n49" name="n49">49</a></span>        quicksort(arr, p, pivotIndx - <span class="integer">1</span>);
<span class="line-numbers"><strong><a href="#n50" name="n50">50</a></strong></span>        quicksort(arr, pivotIndx + <span class="integer">1</span>, r);
<span class="line-numbers"><a href="#n51" name="n51">51</a></span>    }
<span class="line-numbers"><a href="#n52" name="n52">52</a></span>}
<span class="line-numbers"><a href="#n53" name="n53">53</a></span> 
<span class="line-numbers"><a href="#n54" name="n54">54</a></span><span class="predefined-type">int</span> partition(<span class="predefined-type">int</span> arr[], <span class="predefined-type">int</span> p, <span class="predefined-type">int</span> r)
<span class="line-numbers"><a href="#n55" name="n55">55</a></span>{
<span class="line-numbers"><a href="#n56" name="n56">56</a></span>    <span class="predefined-type">int</span> pivot = arr[r];
<span class="line-numbers"><a href="#n57" name="n57">57</a></span>    <span class="predefined-type">int</span> i = p - <span class="integer">1</span>;
<span class="line-numbers"><a href="#n58" name="n58">58</a></span>    <span class="predefined-type">int</span> j = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n59" name="n59">59</a></span> 
<span class="line-numbers"><strong><a href="#n60" name="n60">60</a></strong></span>    <span class="comment">// Debug messages</span>
<span class="line-numbers"><a href="#n61" name="n61">61</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">############</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n62" name="n62">62</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Partition</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n63" name="n63">63</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">p=%d, r=%d, pivot=%d</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, p, r, pivot));
<span class="line-numbers"><a href="#n64" name="n64">64</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Elements</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n65" name="n65">65</a></span>    <span class="keyword">for</span> (j = p; j &lt;= r; j++) {
<span class="line-numbers"><a href="#n66" name="n66">66</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[j]));
<span class="line-numbers"><a href="#n67" name="n67">67</a></span>    }
<span class="line-numbers"><a href="#n68" name="n68">68</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n69" name="n69">69</a></span> 
<span class="line-numbers"><strong><a href="#n70" name="n70">70</a></strong></span>    <span class="keyword">for</span> (j = p; j &lt;= r - <span class="integer">1</span>; j++) {
<span class="line-numbers"><a href="#n71" name="n71">71</a></span>        <span class="keyword">if</span> (arr[j] &lt;= pivot) {
<span class="line-numbers"><a href="#n72" name="n72">72</a></span>            i++;
<span class="line-numbers"><a href="#n73" name="n73">73</a></span>            swap(i, j);
<span class="line-numbers"><a href="#n74" name="n74">74</a></span>        }
<span class="line-numbers"><a href="#n75" name="n75">75</a></span>    }
<span class="line-numbers"><a href="#n76" name="n76">76</a></span> 
<span class="line-numbers"><a href="#n77" name="n77">77</a></span>    swap(i + <span class="integer">1</span>, r);
<span class="line-numbers"><a href="#n78" name="n78">78</a></span> 
<span class="line-numbers"><a href="#n79" name="n79">79</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">Elements after partition</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><strong><a href="#n80" name="n80">80</a></strong></span>    <span class="keyword">for</span> (j = p; j &lt;= r; j++) {
<span class="line-numbers"><a href="#n81" name="n81">81</a></span>        D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%d </span><span class="delimiter">&quot;</span></span>, arr[j]));
<span class="line-numbers"><a href="#n82" name="n82">82</a></span>    }
<span class="line-numbers"><a href="#n83" name="n83">83</a></span>    D(printf(<span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>));
<span class="line-numbers"><a href="#n84" name="n84">84</a></span> 
<span class="line-numbers"><a href="#n85" name="n85">85</a></span>    <span class="keyword">return</span> (i + <span class="integer">1</span>);
<span class="line-numbers"><a href="#n86" name="n86">86</a></span>}
<span class="line-numbers"><a href="#n87" name="n87">87</a></span> 
<span class="line-numbers"><a href="#n88" name="n88">88</a></span><span class="directive">void</span> swap(<span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j)
<span class="line-numbers"><a href="#n89" name="n89">89</a></span>{
<span class="line-numbers"><strong><a href="#n90" name="n90">90</a></strong></span>    <span class="predefined-type">int</span> temp = arr[i];
<span class="line-numbers"><a href="#n91" name="n91">91</a></span>    arr[i] = arr[j];
<span class="line-numbers"><a href="#n92" name="n92">92</a></span>    arr[j] = temp;
<span class="line-numbers"><a href="#n93" name="n93">93</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="references">References</h3>
<ul>
  <li>
    <p><a href="https://www.dropbox.com/s/4kcfkbvkwmnmgib/sorting.pdf" target="_blank">Article comparing sorting</a></p>
  </li>
  <li>
    <p><a href="http://distkeys.com/blog/2013/10/12/sorting/" target="_blank">Sorting in detail</a></p>
  </li>
  <li>
    <p><a href="http://faculty.simpson.edu/lydia.sinapova/www/cmsc250/LN250_Tremblay/L06-QuickSortEX.htm" target="_blank">Median of 3 quicksort</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting]]></title>
    <link href="http://distkeys.com/blog/2013/10/12/sorting/"/>
    <updated>2013-10-12T13:08:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/12/sorting</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#dictionary-of-algorithms">Dictionary of algorithms</a></li>
  <li><a href="#sorting-visualization">Sorting Visualization</a></li>
  <li><a href="#sorting-wiki-summary">Sorting Wiki Summary</a></li>
  <li><a href="#sorting-algorithms">Sorting algorithms</a></li>
  <li><a href="#comparisons-based-sorting">Comparisons based sorting</a></li>
  <li><a href="#online-sorts">Online sorts</a></li>
  <li><a href="#stable-sorts">Stable sorts</a></li>
  <li><a href="#time-complexity-chart">Time complexity chart</a></li>
</ul>

<p>This article talks about Sorting, Sorting techniques/algorithms in computer science</p>

<p>Let’s start with Wikipedia entry about sorting</p>

<div class="wikipedia">
  
    <img src="http://distkeys.com//upload.wikimedia.org/wikipedia/commons/thumb/8/82/Sorting_stability_playing_cards.svg/220px-Sorting_stability_playing_cards.svg.png" />
  
  <h2>sorting algorithm</h2>
  <div>
    <p>A <strong>sorting algorithm</strong> is an <a href="http://en.wikipedia.org/wiki/Algorithm" title="Algorithm">algorithm</a> that puts elements of a <a href="http://en.wikipedia.org/wiki/List_(computing)" title="List (computing)" class="mw-redirect">list</a> in a certain <a href="http://en.wikipedia.org/wiki/Total_order" title="Total order">order</a>. The most-used orders are numerical order and <a href="http://en.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical order</a>. Efficient <a href="http://en.wikipedia.org/wiki/Sorting" title="Sorting">sorting</a> is important for optimizing the use of other algorithms (such as <a href="http://en.wikipedia.org/wiki/Search_algorithm" title="Search algorithm">search</a> and <a href="http://en.wikipedia.org/wiki/Merge_algorithm" title="Merge algorithm">merge</a> algorithms) which require input data to be in sorted lists; it is also often useful for <a href="http://en.wikipedia.org/wiki/Canonicalization" title="Canonicalization">canonicalizing</a> data and for producing human-readable output. More formally, the output must satisfy two conditions:
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Sorting_algorithm">Read more</a>
</div>

<!-- more -->
<p><br /></p>

<h3 id="dictionary-of-algorithms">Dictionary of algorithms</h3>

<p><a href="http://xlinux.nist.gov/dads//" target="_blank">Dictionary of algorithms</a></p>

<p><br /></p>

<h3 id="sorting-visualization">Sorting Visualization</h3>

<p><a href="http://corte.si/posts/code/visualisingsorting/index.html" target="_blank">Sorting Visualization</a></p>

<p><br /></p>

<h3 id="sorting-wiki-summary">Sorting Wiki Summary</h3>

<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank">Sorting Wiki Summary</a></p>

<p><br /></p>

<p>Sorting algorithms can be divided into categories</p>

<h3 id="sorting-algorithms">Sorting algorithms</h3>
<ol>
  <li><strong><em>Comparisons based sorts</em></strong> - 24 algorithms in this category</li>
  <li><strong><em>Online sorts</em></strong>            - 5 algorithms in this category</li>
  <li><strong><em>Stable sorts</em></strong>            - 14 algorithms in this category</li>
</ol>

<p>Donald Knuth pioneer in algorithms and field of Computer Science have divided sorting into</p>

<ol>
  <li><strong><em>Internal sorting</em></strong> - by insertion, by exchange, by selection, by merging, by distribution<br /></li>
  <li><strong><em>Optimum sorting</em></strong>  - min-comparison sorting, min-comparison merging, min-comparison selection<br /></li>
  <li><strong><em>External sorting</em></strong> <br /></li>
</ol>

<h3 id="comparisons-based-sorting">Comparisons based sorting</h3>
<p>It is particular type of sorting algorithm which read the list elements through comparison operator that determines which of two elements should occur first int he final sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a>                       - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a>         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a>                   - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a> - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="online-sorts">Online sorts</h3>

<p>These sorts can start sorting their input without having received all of it. It can process its input piece-by-piece in a serial fashion, i.e., in the order that the input is fed to the algorithm, without having the entire input available from the start.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a>                 - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a>                     - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a>                         - (S)</li>
  <li><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></li>
</ul>

<p>*(S) - Stable sorts
<br /></p>

<h3 id="stable-sorts">Stable sorts</h3>

<p>A sorting algorithm is stable if whenever there are two records R and S with the <code>same key</code> and with R appearing before S in the original list, <code>R will appear before S</code> in the sorted list.</p>

<p><strong><em>Algorithms</em></strong></p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></li>
</ul>

<h3 id="time-complexity-chart">Time complexity chart</h3>

<table>
<thead>
<tr>
    <th><code class="mygreen">Good</code></th><th><code class="myyellow">Fair</code></th><th><code class="myred">Poor</code></th>
</tr>
</thead>
</table>

<p><br /></p>

<p><sup>*</sup>(V/D) - Variant or derived from</p>

<p><br /></p>
<table>
<thead>
<tr>
    <th>Algorithm</th><th colspan="3">Time complexity</th><th>Space complexity</th><th>Notes</th>
</tr>
<tr>
    <th /><th>Best</th><th>Average</th><th>Worst</th><th /><th />
</tr>
</thead>
<tbody>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_heap_sort" target="_blank">Adaptive heap sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bogosort" target="_blank">Bogosort</a></code></td>
    <td><code class="myyellow">Ω(n)</code></td>
    <td>O(n × n!)</td>
    <td><code class="myred">Unbounded</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Comb_sort" target="_blank">Comb sort</a></code></td>
    <td>O(n)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><mrow><msup><mi>2</mi><mn>p</mn></msup></mrow></mfrac></math>)</td>
    <td>Ω(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>(V/D) - Bubble Sort</td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></code></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td><code class="mygreen">Write efficient</code></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>Bubble + Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Heapsort" target="_blank">Heapsort</a></code></td>
    <td>Ω(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="mygreen">O(1)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></code></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Introsort" target="_blank">Introsort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td />
    <td>Quick sort + Heap sort<br /><a href="https://www.dropbox.com/s/21q1ymf2y86kqcz/introsort.pdf" target="_blank"> IntroSort Paper</a></td>
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td><code class="myred">O(n)</code></td>
    <td>(V/D) - Insertion sort</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></code></td>
    <td>O(n), O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td><code class="myred">O(n)</code></td>
    <td><a href="http://distkeys.com/blog/2013/10/13/comparison-based-sorting/#table-based-comparison" target="_blank">Detailed notes</a></td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></code></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
    <td>*(V/D) - Bubble sort</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Patience_sorting" target="_blank">Patience sorting</a></code></td>
    <td />
    <td />
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td><a href="http://wordaligned.org/articles/patience-sort" target="_blank">Longest common sequence</a></td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank">Quicksort</a></code></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank">Selection sort</a></code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><code class="myyellow"><a href="http://en.wikipedia.org/wiki/Shellsort" target="_blank">Shellsort</a></code></td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>Depends on gap seq</td>
    <td>O(n)</td>
    <td>Faster on partial sorted list</td>
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Smoothsort" target="_blank">Smoothsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>*(V/D) - Heap sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Stooge_sort" target="_blank">Stooge sort</a></code></td>
    <td />
    <td />
    <td />
    <td>O(n)</td>
    <td>Slower than bubble sort</td>
</tr>
<tr>
    <td><code class="myred"><a href="http://en.wikipedia.org/wiki/Strand_sort" target="_blank">Strand sort</a></code></td>
    <td>O(n)</td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td><code class="myred">O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</code></td>
    <td>O(1)</td>
    <td />
</tr>
<tr>
    <td><code class="mygreen"><a href="http://en.wikipedia.org/wiki/Timsort" target="_blank">Timsort</a></code></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td>Merge + Insertion sort</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Online sorting</th>
    <th />
    <th />
    <th />
    <th />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cycle_sort" target="_blank">Cycle sort</a></td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>Θ(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Polyphase_merge_sort" target="_blank">Polyphase merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Stable sorting</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank">Bubble sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bucket_sort" target="_blank">Bucket sort</a></td>
    <td />
    <td>O(n + k)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n.k)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cascade_merge_sort" target="_blank">Cascade merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cocktail_sort" target="_blank">Cocktail sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank">Counting sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Gnome_sort" target="_blank">Gnome sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(1)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank">Insertion sort</a></td>
    <td>O(n)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Library_sort" target="_blank">Library sort</a></td>
    <td>O(n)</td>
    <td>O(nlogn)</td>
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Merge_sort" target="_blank">Merge sort</a></td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(nlogn)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Odd–even_sort" target="_blank">Odd–even sort</a></td>
    <td />
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Oscillating_merge_sort" target="_blank">Oscillating merge sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pigeonhole_sort" target="_blank">Pigeonhole sort</a></td>
    <td />
    <td />
    <td>O(N + n)</td>
    <td>O(N + n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td>O(n)</td>
    <td />
    <td>O(<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>n</mi><mn>2</mn></msup></math>)</td>
    <td>O(n)</td>
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Radix_sort" target="_blank">Radix sort</a></td>
    <td />
    <td />
    <td>O(kN)</td>
    <td>O(k + N)</td>
</tr>
<tr>
    <td />
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <th>Non-category Sorts</th>
    <th />
    <th />
    <th />
    <th />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Adaptive_sort" target="_blank">Adaptive sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/American_flag_sort" target="_blank">American flag sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Bead_sort" target="_blank">Bead sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Burstsort" target="_blank">Burstsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Cartesian_tree" target="_blank">Cartesian tree</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Comparison_sort" target="_blank">Comparison sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Dutch_national_flag_problem" target="_blank">Dutch national flag problem</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Elevator_algorithm" target="_blank">Elevator algorithm</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/External_sorting" target="_blank">External sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Flashsort" target="_blank">Flashsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Integer_sorting" target="_blank">Integer sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Internal_sort" target="_blank">Internal sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/J_sort" target="_blank">J sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Median_cut" target="_blank">Median cut</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Ordicate" target="_blank">Ordicate</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pairwise_sorting_network" target="_blank">Pairwise sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Pancake_sorting" target="_blank">Pancake sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Partial_sorting" target="_blank">Partial sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Proxmap_sort" target="_blank">Proxmap sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Quantum_sort" target="_blank">Quantum sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Samplesort" target="_blank">Samplesort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Sorting_network" target="_blank">Sorting network</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spaghetti_sort" target="_blank">Spaghetti sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Spreadsort" target="_blank">Spreadsort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Topological_sorting" target="_blank">Topological sorting</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tournament_sort" target="_blank">Tournament sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/Tree_sort" target="_blank">Tree sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
<tr>
    <td><a href="http://en.wikipedia.org/wiki/UnShuffle_sort" target="_blank">UnShuffle sort</a></td>
    <td />
    <td />
    <td />
    <td />
</tr>
</tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[World of Bits and Bytes]]></title>
    <link href="http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes/"/>
    <updated>2013-10-08T13:17:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/08/world-of-bits-and-bytes</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#basics">Basics</a></li>
  <li><a href="#bitwise-operators">Bitwise Operators</a></li>
  <li><a href="#bit-fields">Bit Fields</a></li>
  <li><a href="#problems">Problems</a>    <ul>
      <li><a href="#how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</a></li>
      <li><a href="#how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</a></li>
      <li><a href="#one-function-to-set-and-unset">One function to set and unset</a></li>
      <li><a href="#unset-range-of-bits">Unset range of bits</a></li>
      <li><a href="#set-range-of-bits">Set range of bits</a></li>
    </ul>
  </li>
  <li><a href="#recomended-readings">Recomended readings</a></li>
</ul>

<p>Recently, I have realized that no matter how much C, C++ or other high level languages you know it all comes down to bit and bytes view of program.<br />
I started realizing that after all it’s not that easy to actually think and write in bit/byte manipulation. This is my attempt to learn and be more comfortable about thinking in bit/bytes.</p>

<!-- more -->

<h3 id="basics">Basics</h3>

<p>Introduction <a href="http://www.codeproject.com/Articles/2247/An-introduction-to-bitwise-operators" target="_blank">here</a>
<br /><br /><br /><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Bit &amp; Byte </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>||              |               |               |              ||
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>|+- bit <span class="integer">31</span>      |               |               |       bit <span class="integer">0</span> -+|
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>|               |               |               |               |
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>+-- BYTE <span class="integer">3</span> -----+--- BYTE <span class="integer">2</span> ----+--- BYTE <span class="integer">1</span> ----+-- BYTE <span class="integer">0</span> -----+
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>|                               |                               |
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>+----------- WORD <span class="integer">1</span> ------------+----------- WORD <span class="integer">0</span> ------------+
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>|                                                               |
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>+--------------------------- DWORD -----------------------------+
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>Hexadecimal Numbers
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="integer">0</span> <span class="integer">1</span> <span class="integer">2</span> <span class="integer">3</span> <span class="integer">4</span> <span class="integer">5</span> <span class="integer">6</span> <span class="integer">7</span> <span class="integer">8</span> <span class="integer">9</span> A B C D E F
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="bitwise-operators">Bitwise Operators</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Operators</span>  <a href="http://distkeys.com/blog/2013/10/08/binary-number-operations/" target="_blank">Bitwise Operations </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>The &amp; <span class="directive">operator</span> (AND)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">1</span>   &amp;   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">1</span>   &amp;   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="integer">0</span>   &amp;   <span class="integer">1</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="integer">0</span>   &amp;   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>The | <span class="directive">operator</span> (OR)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="integer">1</span>   |   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="integer">1</span>   |   <span class="integer">0</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="integer">0</span>   |   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="integer">0</span>   |   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>The ^ <span class="directive">operator</span> (XOR)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="integer">1</span>   ^   <span class="integer">1</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span><span class="integer">1</span>   ^   <span class="integer">0</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span class="integer">0</span>   ^   <span class="integer">1</span>   ==   <span class="integer">1</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="integer">0</span>   ^   <span class="integer">0</span>   ==   <span class="integer">0</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>The ~ <span class="directive">operator</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>The ~ (Ones Complement <span class="keyword">or</span> inversion) <span class="directive">operator</span> acts only on one value
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="keyword">and</span> it inverts it.
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>The &lt;&lt; (Left Shift)
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="octal">00001100</span>  - b 
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="octal">00110000</span>  - b &lt;&lt; <span class="integer">2</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>The &gt;&gt; (Right Shift)
<span class="line-numbers"><a href="#n29" name="n29">29</a></span><span class="octal">00001100</span>  - b
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span><span class="octal">00000011</span>  - b &gt;&gt; <span class="integer">2</span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>Another example is
<span class="line-numbers"><a href="#n33" name="n33">33</a></span><span class="integer">1</span>&lt;&lt;<span class="integer">4</span>; <span class="octal">0001</span> <span class="octal">0000</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="bit-fields">Bit Fields</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>struct date-struct {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="constant">BYTE</span> day   : <span class="integer">5</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">31</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>     month : <span class="integer">4</span>,   <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">1</span> to <span class="integer">12</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>     year  : <span class="integer">14</span>;  <span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span> <span class="integer">0</span> to <span class="integer">9999</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>} date
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>|<span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> |
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>  |                           |       |         |
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  +------ year ---------------+ month +-- day --+
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>date.day = <span class="integer">12</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>dateptr = &amp;date;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>dateptr-&gt;year = <span class="integer">1852</span>;
</pre></div>
</div>
</div>

<p><a href="http://distkeys.com/blog/2013/10/08/binary-number-operations/">Basics of Binary Arithmetic</a></p>

<p><br /></p>

<h3 id="problems">Problems</h3>

<h4 id="how-set-a-single-bit-in-a-byte">How set a single bit in a byte?</h4>

<p>For e.g In byte 0000 1000 set bit no 6 will produce 0100 1000<br />
(Remember bit number starts with 0-7)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Set Bit </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">//For problems where certain bit values needs to be changed, first we</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">//need to create a bit mask.</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">//Bit mask is a temporary variable with some value. Using this value</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">//we will access and change specific bits in a byte of data.</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">//For e.g.</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">//To set 6th bit in a byte 0000 1000</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">//We have             MASK 0100 0000  (OR)</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">//                    ——————————————</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">//                         0100 1000</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="comment">//To turn on certain bit in a byte (OR) is used.</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span class="predefined-type">int</span> set-bit(<span class="predefined-type">int</span> val, <span class="predefined-type">int</span> num, <span class="predefined-type">bool</span> bitval)
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>{
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">return</span> (val | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="comment">//Here, val    = 0000 1000 = 8</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="comment">//      num    = 6 (set 6th bit)</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">//      bitval = 1 (set to 1)</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">//      0000 1000</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="comment">//(OR)  0100 0000  (1 &lt;&lt; 6)</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="comment">//      ————————-</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="comment">//      0100 0000</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h4 id="how-to-unset-single-bit-in-a-byte">How to unset single bit in a byte?</h4>

<p>For e.g In byte 0100 1000 unset bit no 6 will produce 0000 1000<br />
(Remember bit number starts with 0-7)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Unset Bit </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">//To unset specific bit we will use (AND) operation.</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">//Mask value need to be ‘0’ for the bit to unset but rest of the bits</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="comment">//need to ‘1’. The reason for rest of the bits to set as ‘1’ is as</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="comment">//we are doing (AND), we don’t want to unset other bits which are</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="comment">//already set.</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="comment">//</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="comment">//For e.g.</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="comment">//To unset 6th bit 0100 1000</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="comment">//            MASK 1011 1111 (AND)</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="comment">//                ——————————-</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="comment">//                 0000 1000   (Result)</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="predefined-type">int</span> unset-bit(<span class="predefined-type">int</span> val, <span class="predefined-type">int</span> num, <span class="predefined-type">bool</span> bitval)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>{
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">return</span> (val &amp; ~(bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="comment">//Here, val    = 0100 1000</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span class="comment">//      num    = 6</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="comment">//      bitval = 0</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="comment">//      (bitval &lt;&lt; num) = 0100 0000</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="comment">//     ~(bitval &lt;&lt; num) = 1011 1111</span>
<span class="line-numbers"><a href="#n23" name="n23">23</a></span><span class="comment">//</span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span><span class="comment">//      0100 1000</span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span><span class="comment">//      1011 1111 (AND)</span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span><span class="comment">//      —————————-</span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span><span class="comment">//      0000 1000    (Result)</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h4 id="one-function-to-set-and-unset">One function to set and unset</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Set &amp; Unset Bit </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="predefined-type">int</span> change-bit(<span class="predefined-type">int</span> val, <span class="predefined-type">int</span> num, <span class="predefined-type">bool</span> bitval)
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>{
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">return</span> (((val &amp; ~(bitval &lt;&lt; num)) | (bitval &lt;&lt; num));
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h4 id="unset-range-of-bits">Unset range of bits</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Unset range of bits</span>  <a href="http://distkeys.com/blog/2013/10/08/binary-number-operations/" target="_blank">Bitwise Operations </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
Unset range of bits
For e.g. <span class="integer">1001</span> <span class="integer">1001</span>
Unset bits from <span class="integer">2</span> to <span class="integer">5</span> i.e. <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> =&gt; <span class="integer">10</span> <span class="octal">0000</span> <span class="octal">01</span>
                               |- - - -| 
                      Bits  <span class="integer">7</span> <span class="integer">6</span> <span class="integer">5</span> <span class="integer">4</span> <span class="integer">3</span> <span class="integer">2</span> <span class="integer">1</span> <span class="integer">0</span>          

Step1
------
To unset range of bits we need to create MASK
 val  = <span class="integer">1001</span> <span class="integer">1001</span>
 Mask = <span class="integer">1100</span> <span class="octal">0011</span> (AND)
      _____________
        <span class="integer">1000</span> <span class="octal">0001</span>

Step <span class="integer">2</span>
-------
We need to construct MASK
In MASK, bits in range are <span class="integer">0</span> i.e. bits from <span class="integer">2</span>-<span class="integer">5</span> is <span class="integer">0</span> <span class="keyword">and</span>
rest of the bits are <span class="integer">1</span>
 MASK <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>
         |- - - -|
 Bits <span class="integer">7</span> <span class="integer">6</span> <span class="integer">5</span> <span class="integer">4</span> <span class="integer">3</span> <span class="integer">2</span> <span class="integer">1</span> <span class="integer">0</span>

Step <span class="integer">3</span>
-------
 <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  ((<span class="integer">1</span> &lt;&lt; <span class="integer">5</span>) - <span class="integer">1</span>) i.e. (<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>

MAX  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
     <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>  <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>  (-)
    ------------------
     <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span>  <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>         =====&gt; (<span class="integer">1</span>)

 (<span class="integer">1</span> &lt;&lt; <span class="integer">2</span>) - <span class="integer">1</span> i.e. (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>
 <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span>
 <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> (-)
------------------
 <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>                   =======&gt; (<span class="integer">2</span>)

 (<span class="integer">1</span>) OR (<span class="integer">2</span>)
 <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
 <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>   (OR)
-------------------
 <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> 

Final Step
 val  = <span class="integer">1001</span> <span class="integer">1001</span>
 Mask = <span class="integer">1100</span> <span class="octal">0011</span> (AND)
      _____________
        <span class="integer">1000</span> <span class="octal">0001</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>unsetBitsInRange</span>  <a href="http://distkeys.com/blog/2013/10/08/binary-number-operations/" target="_blank">Bitwise Operations </a></figcaption> <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// i is start of range</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">// j is end of range</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">int</span> unsetBitsInRange(<span class="predefined-type">int</span> val, <span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="predefined-type">int</span> max = ~<span class="integer">0</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> left = max - ((<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">int</span> right = (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> mask = left | right;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">return</span> (val &amp; mask);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h4 id="set-range-of-bits">Set range of bits</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Set range</span>  <a href="https://gist.github.com/coolgoose85/458a1f67d61f8def1120" target="_blank">Range Unset Mask </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
This mask is similar to Range Unset Mask created earlier with an <span class="char">'e</span>xception<span class="char">'</span>
in last

<span class="comment">/***********************************************************
//In &quot;Range UNset Mask&quot; we created following
//For e.g. 1001 1001
//Unset bits from 2 to 5 i.e. 1 0 0 1 1 0 0 1 =&gt; 10 0000 01
//                               |- - - -| 
//                      Bits  7 6 5 4 3 2 1 0    
//Step1
//------
//To unset range of bits we need to create MASK
// val  = 1001 1001
// Mask = 1100 0011 (AND)
//      _____________
//        1000 0001
***********************************************************/</span>
 
We will be creating the same mask in addition we will 
TOGGLE the bits of <span class="string"><span class="delimiter">&quot;</span><span class="content">unset mask</span><span class="delimiter">&quot;</span></span>

 Unset MASK = <span class="integer">1100</span> <span class="octal">0011</span>
 TOGGLE     = <span class="octal">0011</span> <span class="integer">1100</span>    ~(Unset Mask)

 Now perform OR will val
 val  = <span class="integer">1001</span> <span class="integer">1001</span>
 Mask = <span class="octal">0011</span> <span class="integer">1100</span> (OR)
      _____________
        <span class="integer">1011</span> <span class="integer">1101</span>
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>setBitsInRange </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">// i is start of the range</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="comment">// j is end of the range</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="predefined-type">int</span> setBitsInRange(<span class="predefined-type">int</span> val, <span class="predefined-type">int</span> i, <span class="predefined-type">int</span> j) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="predefined-type">int</span> max = ~<span class="integer">0</span>;
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">int</span> left = max - ((<span class="integer">1</span> &lt;&lt; j) - <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">int</span> right = (<span class="integer">1</span> &lt;&lt; i) - <span class="integer">1</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="predefined-type">int</span> mask = left | right;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span> (val | ~mask);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="recomended-readings">Recomended readings</h3>

<ul>
  <li><a href="http://www.gamedev.net/page/resources/_/technical/general-programming/bitwise-operations-in-c-r1563" target="_blank">Gamedev</a></li>
  <li><a href="http://www.vipan.com/htdocs/bitwisehelp.html" target="_blank">Vipan</a></li>
  <li><a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank">Stanford</a></li>
  <li><a href="http://stackoverflow.com/questions/1167956/resources-to-learn-bitwise-programming" target="_blank">Stackoverflow</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary number operations]]></title>
    <link href="http://distkeys.com/blog/2013/10/08/binary-number-operations/"/>
    <updated>2013-10-08T12:47:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/08/binary-number-operations</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#addition">Addition</a></li>
  <li><a href="#subtraction">Subtraction</a></li>
  <li><a href="#multiplication">Multiplication</a></li>
  <li><a href="#negative-binary-numbers">Negative Binary numbers</a></li>
  <li><a href="#credits">Credits</a></li>
</ul>

<h3 id="addition">Addition</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="integer">0</span> + <span class="integer">0</span> <span class="error">→</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="integer">0</span> + <span class="integer">1</span> <span class="error">→</span> <span class="integer">1</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">1</span> + <span class="integer">0</span> <span class="error">→</span> <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">1</span> + <span class="integer">1</span> <span class="error">→</span> <span class="integer">0</span>, carry <span class="integer">1</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span> For e.g
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>    (carried digits)
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>      <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>+     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    -------------
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>=   <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> = <span class="integer">36</span>
</pre></div>
</div>
</div>

<!-- more -->
<p><br /></p>

<h3 id="subtraction">Subtraction</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Subtraction </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="integer">0</span> <span class="error">−</span> <span class="integer">0</span> <span class="error">→</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">0</span> <span class="error">−</span> <span class="integer">1</span> <span class="error">→</span> <span class="integer">1</span>, borrow <span class="integer">1</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">1</span> <span class="error">−</span> <span class="integer">0</span> <span class="error">→</span> <span class="integer">1</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="integer">1</span> <span class="error">−</span> <span class="integer">1</span> <span class="error">→</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>Subtracting <span class="integer">1</span> digit from <span class="integer">0</span> digit produces the digit <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span>, <span class="keyword">while</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="integer">1</span> will have to be subtracted from the next column. This is known as
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>borrowing.
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>      *   * * *   (starred columns are borrowed from)
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>      <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span><span class="error">−</span>         <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    ----------------
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>=     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span>
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="multiplication">Multiplication</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Multiplication </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>        <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>   (A)
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>      <span class="error">×</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span>   (B)
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>       ---------
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>   <span class="error">←</span> Corresponds to the rightmost <span class="char">'z</span>ero<span class="char">' </span>in B
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>+     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>     <span class="error">←</span> Corresponds to the next <span class="char">'o</span>ne<span class="char">' </span>in B
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>+   <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>+ <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>  ---------------
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>= <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>Binary Multiplication <span class="keyword">for</span> binary point
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>                <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> . <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>       A (<span class="float">5</span><span class="float">.625</span> in decimal)
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>                <span class="error">×</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> . <span class="integer">0</span> <span class="integer">1</span>       B (<span class="float">6</span><span class="float">.25</span>  in decimal)
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>           -------------------
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>                  <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>    <span class="error">←</span> Corresponds to a <span class="char">'o</span>ne<span class="char">' </span>in B
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    +           <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>      <span class="error">←</span> Corresponds to a <span class="char">'z</span>ero<span class="char">' </span>in B
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    +         <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    +       <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    +     <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    ---------------------------
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    = <span class="integer">1</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">1</span> . <span class="integer">0</span> <span class="integer">0</span> <span class="integer">1</span> <span class="integer">0</span> <span class="integer">1</span>  (<span class="integer">3</span><span class="float">5</span><span class="float">.15625</span> in decimal)
</pre></div>
</div>
 </figure></notextile></div>

<p><br /></p>

<h3 id="negative-binary-numbers">Negative Binary numbers</h3>

<p>How can we represent a negative number? We cannot use a ‘-‘ sign because all we can store in the computer is zeros and ones.</p>

<p>There are three methods</p>

<ol>
  <li>Signed Magnitude</li>
  <li>1’s Complement</li>
  <li>2’s complement</li>
</ol>

<p><a href="https://www.dropbox.com/sh/tlcxy806qq6rvde/V3TVVs2vfH/Negative%20Binary%20Numbers.pdf“_blank">Full text</a> about binary number operations.</p>

<h3 id="credits">Credits</h3>

<p><a href="http://turing.cs.camosun.bc.ca/COMP166/resources/binary.html">CS Camosun</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process synchronization in Linux Kernel]]></title>
    <link href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-linux-kernel/"/>
    <updated>2013-10-07T20:56:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/07/process-synchronization-in-linux-kernel</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#synchronization-primitives">Synchronization Primitives</a></li>
  <li><a href="#summary-of-synchronization-primitives">Summary of Synchronization Primitives</a></li>
  <li><a href="#per-cpu-variables">Per-CPU variables</a></li>
  <li><a href="#atomic-operations">Atomic Operations</a></li>
  <li><a href="#optimization-barriers--memory-barriers">Optimization Barriers &amp; Memory Barriers</a></li>
  <li><a href="#semaphores">Semaphores</a></li>
  <li><a href="#spin-locks">Spin Locks</a>    <ul>
      <li><a href="#readwrite-spin-locks">Read/Write Spin Locks</a></li>
    </ul>
  </li>
  <li><a href="#seqlocks">SeqLocks</a></li>
  <li><a href="#read-copy-update-rcu">Read Copy Update (RCU)</a></li>
</ul>

<p>As we have discussed earlier about process synchronization, lets discuss about process synchronization primitives offered in Linux Kernel.</p>

<p>This blog is summary of this <a href="https://www.dropbox.com/s/xvo7qdl9iwjco5x/UnderstandingtheLinuxKernelThirdEditionChapter5KernelSynchronizat.pdf" target="-blank">article</a></p>

<h3 id="synchronization-primitives">Synchronization Primitives</h3>

<ol>
  <li>Per-CPU variables</li>
  <li>Atomic Operation</li>
  <li>Memory barrier</li>
  <li>Spin Lock</li>
  <li>Semaphore</li>
  <li>SeqLocks</li>
  <li>Local Interrupt disabling</li>
  <li>Local softirq disabling</li>
  <li>Read-Copy-Update</li>
</ol>

<!-- more -->

<h3 id="summary-of-synchronization-primitives">Summary of Synchronization Primitives</h3>

<table>
<tr>
<td>Technique</td><td>Description</td><td>Scope</td>
</tr>
<tr>
<td>Per-CPU variables</td><td>Duplicate a data structure among the CPUs</td><td><code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Atomic operation</td><td>Atomic read-modify-write instruction to a counter</td><td><code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Memory barrier</td><td>Avoid instruction reordering</td><td><code class="myyellow">Local CPU</code> or <code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Spin lock</td><td>Lock with busy wait</td><td><code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Semaphore</td><td>Lock with blocking wait (sleep)</td><td><code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Seqlocks</td><td>Lock based on an access counter</td><td><code class="mygreen">All CPUs</code></td>
</tr>
<tr>
<td>Local interrupt disabling</td><td>Forbid interrupt handling on a single CPU</td><td><code class="myyellow">Local CPU</code></td>
</tr>
<tr>
<td>Local softirq disabling</td><td>Forbid deferrable function handling on a single CPU</td><td><code class="myyellow">Local CPU</code></td>
</tr>
<tr>
<td>Read-copy-update (RCU)</td><td>Lock-free access to shared data structures through pointers</td><td><code class="mygreen">All CPUs</code></td>
</tr>
</table>
<p><br /></p>

<h3 id="per-cpu-variables">Per-CPU variables</h3>

<p>The best synchronization technique consists in designing the kernel so as to avoid
the need for synchronization in the first place.</p>

<blockquote><p>Basically, a per-CPU variable is an array of data structures, one element per each CPU in the system.</p></blockquote>

<p>A CPU should not access the elements of the array corresponding to the other CPUs.</p>

<p><code class="mygreen">Pros</code></p>

<ul>
  <li>Freely read and modify its own element without fear of race conditions.<br /></li>
  <li>It avoids cache line snooping and invalidations, which are costly operations.</li>
</ul>

<p><code class="myyellow">Snooping and Invalidations</code> - Snooping is the process where the individual caches monitor address lines,  for accesses to memory locations that they have cached. When a write operation is observed to a location that a cache has a copy of, the cache controller invalidates its own copy of the snooped memory location.</p>

<p><code class="myred">Cons</code></p>

<ul>
  <li>It can only be used when it make sense to <code>logically split</code> the data across the CPUs of the system<br /></li>
  <li>Do not provide <code>protection</code> against access from asynchronous functions such as <code>interrupt handlers and deferrable functions.</code><br /></li>
  <li>Per-CPU variables are variables are prone to <code>race conditions</code> caused by kernel preemption, both in uniprocessor and multiprocessor systems.<br /></li>
</ul>

<p><code class="myred">Problem</code> What would happen if a kernel control path gets the address of its local copy of a per-CPU variable, and then it is preempted and moved to another CPU: the address still refers to the element of the previous CPU.</p>

<p>As a general rule, a kernel control path should access a per-CPU variable with kernel preemption disabled.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="atomic-operations">Atomic Operations</h3>

<p><code class="myred">Problem</code> Several assembly language instructions are of type “read-modify-write” i.e. memory location is accessed twice first to read the old value and second time to write a new value</p>

<p><strong>Detailed explanation</strong><br />
Suppose that two kernel control paths running on two CPUs try to “read-modify-write” the same memory location at the same time by executing nonatomic operations.<br />
At first, <code>both CPUs try to read the same location</code>, but the memory arbiter (a hardware circuit that serializes accesses to the RAM chips) steps in to grant access to one of them and delay the other. However, when the first read operation has completed, the delayed CPU reads exactly the same (old) value from the memory location.
<code>Both CPUs then try to write the same (new) value to the memory location</code>; again, the bus memory access is serialized by the memory arbiter, and eventually both write operations succeed. However, the global result is incorrect because both CPUs write the same (new) value. Thus, the two interleaving “read-modify-write” operations act as a single one.</p>

<p><code class="mygreen">Solution</code> Reason for problem here is that Both CPU’s try to access memory location at the same time. If operation of “read-modify-write” can be made atomic then problem would be solved i.e. Every such <code>operation must be executed in a single instruction without being interrupted</code> in the middle and avoiding accesses to the same memory location by other CPUs.</p>

<ul>
  <li>Read-modify-write assembly language instructions are atomic if no other processor has taken the memory bus after the read and before the write. <code>Memory bus stealing never happens in a uniprocessor system.</code></li>
  <li>For multiprocessor system, Read-modify-write assembly language instructions whose opcode is prefixed by the <strong>Lock Byte</strong> (0xf0) are atomic. </li>
  <li>Other processors cannot access the memory location while the locked instruction is being executed.</li>
</ul>

<p>Sample functions: atomic-read(v), atomic-set(v,i), atomic-add(i,v), atomic-sub(i,v) etc…</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="optimization-barriers--memory-barriers">Optimization Barriers &amp; Memory Barriers</h3>

<p>Compilers optimize the code for efficient usage of CPU time and memory but this optimizations could be disastrous sometimes when dealing with shared data.</p>

<p>It can never be guaranteed that instructions will be performed in the same order in which they appear in source code mainly because reordering by compiler to optimize and CPU executing several instructions in parallel. This might lead to reordering of memory access patterns.</p>

<p>To avoid this behavior we need a synchronization primitive at two levels</p>

<ul>
  <li>Synchronization primitive at Compiler level - Optimization barrier</li>
  <li>Synchronization primitive at CPU level      - Memory barrier</li>
</ul>

<p>In linux <em>barrier()</em> macro acts as an <em>optimization barrier</em>. <br /></p>

<blockquote><p>Optimization barrier primitive ensures that assembly language instructions of C statements mentioned before barrier() and assembly language instructions of C statements mentioned after, remains in the same sequence.</p></blockquote>

<p>But, Optimization barrier cannot control in which fashion instructions will be executed by CPU.</p>

<p>A <em>memory barrier</em> primitive ensures that the operations placed before the primitive are finished before starting the operations placed after the primitive. Read <em>memory barrier</em> act only on instructions that read from memory, while Write <em>memory barriers</em> act only on instructions that write to memory.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="semaphores">Semaphores</h3>

<p>Please visit <a href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-os/#semaphores">Semaphore Page</a></p>

<h3 id="spin-locks">Spin Locks</h3>

<p>When a kernel control path must access a shared data structure or enter a critical section it need to acquire a lock.<br />
Spin Locks are a special kind of lock designed to work in a multiprocessor environment. </p>
<blockquote><p>If kernel control path finds Spin Lock Open it acquires the lock and continue execution else it Spin around repeatedly executing tight instruction loop, until the lock is released.</p></blockquote>

<p>The waiting kernel control path keeps running on the CPU, even if it has nothing to do besides waste time. <code>Kernel preemption is disabled</code> in CR protected by Spin Locks.
Spin locks are usually convenient, because many kernel resources are locked for a <code>fraction of a millisecond only</code>; therefore, it would be far more time-consuming to release the CPU and reacquire it later.<br />
Kernel preemption is still enabled during the busy wait phase, thus a process waiting for a spin lock to be released could be replaced by a higher priority process.</p>

<table>
<tr>
<td>Macro</td><td>Description</td>
</tr>
<tr>
<td>spin-lock-init()</td><td>Set the spin lock to 1 (unlocked)</td>
</tr>
<tr>
<td>spin-lock()</td><td>Cycle until spin lock becomes 1 (unlocked), then set it to 0 (locked)</td>
</tr>
<tr>
<td>spin-unlock()</td><td>Set the spin lock to 1 (unlocked)</td>
</tr>
<tr>
<td>spin-unlock-wait()</td><td>Wait until the spin lock becomes 1 (unlocked)</td>
</tr>
<tr>
<td>spin-is-locked()</td><td>Return 0 if the spin lock is set to 1 (unlocked); 1 otherwise</td>
</tr>
<tr>
<td>spin-trylock()</td><td>Set the spin lock to 0 (locked), and return 1 if the previous value of the lock was 1; 0 otherwise</td>
</tr>
</table>
<p><br /></p>

<p>Spin Lock with kernel preemption</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span class="regexp"><span class="delimiter">/</span><span class="delimiter">/</span></span><span class="constant">Invokes</span> preempt-disable() to disable kernel preemption.
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>; Intel syntax
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="key">locked</span>:                      ; <span class="constant">The</span> lock variable. <span class="error">1</span> = locked, <span class="integer">0</span> = unlocked.
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>dd      <span class="integer">0</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>spin-<span class="key">lock</span>:
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>mov     eax(new), <span class="integer">1</span>     ; <span class="constant">Set</span> the <span class="constant">EAX</span> register to <span class="integer">1</span>.
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>xchg    eax(new), [locked]
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>; <span class="constant">Atomically</span> swap the <span class="constant">EAX</span> register with
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>;  the lock variable.
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>; This will always store <span class="integer">1</span> to the lock, leaving
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>;  previous value <span class="keyword">in</span> the <span class="constant">EAX</span> register.
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>test    eax(new), eax(prev)
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>; <span class="constant">Test</span> <span class="constant">EAX</span> with itself. Among other things, this will
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>;  set the processor<span class="string"><span class="delimiter">'</span><span class="content">s Zero Flag if EAX is 0.</span></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="string"><span class="content">; If EAX is 0, then the lock was unlocked and</span></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span class="string"><span class="content">;  we just locked it.</span></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="string"><span class="content">; Otherwise, EAX is 1 and we didn</span><span class="delimiter">'</span></span>t acquire the lock.
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>//   <span class="constant">Enable</span> kernel preemption preempt-enable() 
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>jnz     spin-lock       ; <span class="constant">Jump</span> back to the <span class="constant">MOV</span> instruction <span class="keyword">if</span> the <span class="constant">Zero</span> <span class="constant">Flag</span> is
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>;  <span class="keyword">not</span> set; the lock was previously locked, <span class="keyword">and</span> so
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>; we need to spin <span class="keyword">until</span> it becomes unlocked.
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>ret                     ; <span class="constant">The</span> lock has been acquired, <span class="keyword">return</span> to the calling
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>;  function.
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>spin-<span class="key">unlock</span>:
<span class="line-numbers"><a href="#n34" name="n34">34</a></span>mov     eax, <span class="integer">0</span>          ; <span class="constant">Set</span> the <span class="constant">EAX</span> register to <span class="integer">0</span>.
<span class="line-numbers"><a href="#n35" name="n35">35</a></span>
<span class="line-numbers"><a href="#n36" name="n36">36</a></span>xchg    eax, [locked]   ; <span class="constant">Atomically</span> swap the <span class="constant">EAX</span> register with
<span class="line-numbers"><a href="#n37" name="n37">37</a></span>;  the lock variable.
<span class="line-numbers"><a href="#n38" name="n38">38</a></span>
<span class="line-numbers"><a href="#n39" name="n39">39</a></span>ret                     ; <span class="constant">The</span> lock has been released.
</pre></div>
</div>
</div>

<p>In case of kernel preemption, the first step is to disable kernel preemption, preempt-disable()
In the above example <code>Lock is 1 and Unlock is 0</code></p>

<ul>
  <li>In EAX register we push “1” as we wish to acquire lock.<br /></li>
  <li>xchg command will exchange value from EAX register to lock variable but not vice versa. So by step 2, EAX register has value of “1” and lock variable also has value of “1”. This is an atomic operation.<br /></li>
  <li>Step 3, test or validate the current value of lock. If current value of lock(EAX prev) is “1“ i.e. processor zero flag is already set, hence <code>lock is not available.</code> <br /></li>
  <li>Enable kernel preemption and Jump(Spin) back.<br /></li>
  <li>In Step 3, if current value of lock (EAX prev) is “0” then set it with “1” i.e. <code>Lock has been acquired.</code></li>
</ul>

<p>It might happen that process can spin for a long time. If the break-lock field is set then owning process can learn whether there are other processes waiting for the lock. It may decide to release it prematurely to allow other processes.</p>

<h4 id="readwrite-spin-locks">Read/Write Spin Locks</h4>

<p>Read Spin Locks is used to increase the concurrency within kernel. </p>

<blockquote><p>Idea is that allow several kernel control path to access same data structure for “Read” using Read Spin Locks. No kernel control path can modify the data structure using Read Spin Locks.</p></blockquote>

<p>To modify shared data structure kernel control path needs to acquire Write Spin Locks. Write Spin Lock is granted when no kernel control path have Read Spin Locks.</p>

<p>Reader and Writer Spin Locks have same priority in this case.</p>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="seqlocks">SeqLocks</h3>

<p>In Read/Write spin locks reader and write have same priority. Reader must wait until the writer has finished and vice versa.<br /></p>
<blockquote><p>SeqLocks are similar to read/write locks except that they give a much higher priority to writers: in fact a writer is allowed to proceed even when readers are active.</p></blockquote>

<p>Writer never waits but reader may be forced to read the data several times until it get valid copy. Each reader must read sequence counter twice i.e. before and after reading the data and then check whether sequence counter values are same. If its not equal then it means that writer must has become active and has increased the sequence counter, thus implicitly telling the reader that the data just read is not valid.</p>

<p>Every time writer acquire and release sequence lock it must increment sequence counter. When counter is odd means writer is in progress and when counter is even means writer is done.<br />
When a reader enters a critical region, it <code>does not need to disable kernel preemption</code>; on the other hand, the <code>writer automatically disables kernel preemption</code> when entering the critical region, because it acquires the spin lock.</p>

<p>SeqLocks must <code class="myred">not</code> be used for </p>

<ul>
  <li>The data structure to be protected does not include pointers that are modified by the writers and dereferenced by the readers (otherwise, a writer could change the pointer under the nose of the readers)</li>
  <li>The code in the critical regions of the readers does not have side effects (otherwise, multiple reads would have different effects from a single read)</li>
</ul>

<hr style="border-top: 1.5px dotted black" />
<p><br /></p>

<h3 id="read-copy-update-rcu">Read Copy Update (RCU)</h3>

<p>This technique is designed to <code>protect</code> data structures that are mostly <code>accessed for reading</code> by several CPUs.<br />
The key idea consists of limiting the scope of RCU as follows:</p>

<ol>
  <li>Only data structures that are dynamically allocated and referenced by means of pointers can be protected by RCU.</li>
  <li>No kernel control path can sleep inside a critical region protected by RCU.</li>
</ol>

<p><strong>Writer</strong></p>

<ul>
  <li>When a writer wants to update the data structure, it dereferences the pointer and makes a copy of the whole data structure.<br /></li>
  <li>Next, the writer modifies the copy.<br /></li>
  <li>Once finished, the writer changes the pointer to the data structure so as to make it point to the updated copy.<br /></li>
</ul>

<p>Because <code>changing the value of the pointer is an atomic operation</code>, each reader or writer sees either the old copy or the new one: no corruption in the data structure may occur.</p>

<p>Memory barrier is required to ensure that the updated pointer is seen by the other CPUs only after the data structure has been modified. </p>

<p>Spin lock is coupled with RCU to forbid the concurrent execution of writers.</p>

<p><code class="myred">Problem</code> Old copy of the data structure cannot be freed right away when the writer updates the pointer. In fact, the readers that were accessing the data structure when the writer started its update could still be reading the old copy. The old copy can be freed only after all (potential) readers on the CPUs have executed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process synchronization in OS]]></title>
    <link href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-os/"/>
    <updated>2013-10-07T11:54:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/07/process-synchronization-in-os</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-a-process">What is a Process?</a></li>
  <li><a href="#issues-with-sharing">3 Issues with Sharing</a></li>
  <li><a href="#carls-jr-restaurant">Carl’s Jr. Restaurant</a></li>
  <li><a href="#algorithmic-approach">Algorithmic approach</a></li>
  <li><a href="#software-primitives">Software Primitives</a></li>
  <li><a href="#semaphores">Semaphores</a></li>
  <li><a href="#locks">Locks</a></li>
  <li><a href="#concurrent-programming-construct">Concurrent Programming Construct</a></li>
  <li><a href="#condition-variables">Condition Variables</a></li>
  <li><a href="#producer-consumer-problem">Producer-Consumer Problem</a></li>
  <li><a href="#recommended-reading">Recommended reading</a></li>
</ul>

<h3 id="what-is-a-process">What is a Process?</h3>

<p>Operating system(OS) <code>objective</code> is to keep as many as of the computer resources as busy as possible. It is used to keep track of all the things an OS must remember about the state of user program.</p>

<p>Process is like a box, a complete entity in itself which does a step by step task written in program. More formally it is called <code class="myyellow">program in execution.</code></p>

<p>Lets consider a very basic operating system with very least complexity. This operating system can run only <code>one process</code> at a time. Since, only one process is working at a time, it may happen that all the resources occupied by process will not be used at the same time. 
<!-- more -->
<span class="pullquote-right" data-pullquote="Process = Code + Allocated Resources + Book keeping information">
To maximize the resource utilization, we need to have entities running at the same time. For multiple entities, it is logical that either we need to have multiple process running at the same time or light weight multiple entities running inside process as a part of process.
Process = Code + Allocated Resources + Book keeping information
</span></p>

<p>Lets explore the second option, now consider process is like a box and it has resources inside the box. We create multiple <code class="myyellow">child of process which is called thread.</code></p>

<p>Thread is a child of process and hence it will use resources of process. Theoretically, there is no limit on number of child threads a process can have but it seems logical that process should have enough resource for administrative purpose for these threads. </p>

<p>Once there are multiple threads they are going to ask for same resource at the same time. For example, if two children are in one room then they will always fight for same toy. Same applies to threads.</p>

<h3 id="issues-with-sharing">3 Issues with Sharing</h3>
<ol>
  <li>How to <code>Share data</code>?</li>
  <li>How to ensure threads in a process, <code>executes one</code> at a time?</li>
  <li>How to ensure proper <code>sequencing</code> of events?</li>
</ol>

<p>To understand it better, lets take a real world example</p>

<h3 id="carls-jr-restaurant">Carl’s Jr. Restaurant</h3>
<p>Process</p>

<ol>
  <li>Customer arrives</li>
  <li>Employee takes order</li>
  <li>Employee cooks food</li>
  <li>Employee bag food</li>
  <li>Employee takes money</li>
  <li>Customer gets food and leaves</li>
</ol>

<p>If a single employee is doing steps from 1-6 then all other customers have to <code>wait</code> in line and its going to be long wait.
Instead, lets have multiple employees for taking order, cook food, bag food, take money. Each of these ‘employees’ are multiple threads on Process ‘Restaurant’. Each thread is responsible for doing <code>specialized task</code>.</p>

<p>Lets associate <code>3 issues</code> in current situation</p>

<ol>
  <li>What is shared data? - In step 2-3, Quantity of food. In step 3-4, how much food to bag</li>
  <li>Does sequence matters? -  Cook can’t cook food until order arrives. Employee can’t bag food until it is cooked. So, sequencing matters.</li>
</ol>

<p>Shared data can be passed for sharing either using <code>message passing</code> or storing that data in <code>global memory</code> of process and each thread read from that memory location.</p>

<p>The next logical question is how to ensure threads in a process executes one at a time i.e. in <code>exclusion</code>?
More formally there are three types of solution categories</p>

<ol>
  <li>Algorithmic approach</li>
  <li>Software Primitives</li>
  <li>Concurrent programming construct</li>
</ol>

<h3 id="algorithmic-approach">Algorithmic approach</h3>
<p>The algorithmic approach to process synchronization does not use any assistance from the computer architecture or the OS kernel. Instead it uses an arrangement of logical conditions to satisfy the desired synchronization requirements. <a href="http://books.google.com/books/about/Operating_Systems.html?id=kbBn4X9x2mcC" target="_blank">[Dhamdhere]</a></p>

<ul>
  <li>Two process algorithms</li>
  <li><a href="http://en.wikipedia.org/wiki/Dekker's_algorithm" target="_blank">Dekker’s Algorithm</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Peterson's_algorithm" target="_blank">Peterson’s Algorithm</a></li>
  <li>n process algorithm</li>
  <li><a href="http://en.wikipedia.org/wiki/Lamport's_bakery_algorithm" target="_blank">Bakery’s Algorithm</a></li>
</ul>

<h3 id="software-primitives">Software Primitives</h3>
<p>A set of software primitives for mutual exclusion e.g Semaphore, Locks etc. were developed to overcome the logical complexity of algorithmic implementations. This is implemented using some special architectural features of computer systems. But, ease of use and correctness still remained the major obstacle in a development of large concurrent systems.</p>

<h3 id="semaphores">Semaphores</h3>
<p>It is a shared integer variable with <code>non-negative</code> values that have <code>initialization, wait and signal</code> as a indivisible operation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Semaphore Class </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">class</span> <span class="class">Semaphore</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span>:
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="comment">//Constructor</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    Semaphore(<span class="predefined-type">char</span> *debugName, <span class="predefined-type">int</span> initialValue);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">//Destructor</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    ~Semaphore();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="directive">private</span>:
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">int</span> value;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    List *waitQueue;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="predefined-type">char</span> *name;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>};
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Semaphore Constructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>Semaphore(<span class="predefined-type">char</span> * debugName, <span class="predefined-type">int</span> initialValue) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    name      = debugName;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    value     = initialValue;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    waitQueue = <span class="keyword">new</span> List;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Semaphore Destructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>~Semaphore() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="keyword">delete</span> waitQueue;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Semaphore Wait </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">//P() - Semaphore Wait</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>Semaphore::P() {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span class="comment">//Disable interrupts</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">//Semaphore not available</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">while</span> (value == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    waitQueue-&gt;Append((<span class="directive">void</span> *)currentThread);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="comment">//Semaphore now availble</span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value--;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Semaphore Signal </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="comment">//Semaphore Signal</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>Semaphore::V() {
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Thread *thread;  
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">//Remove first thread from wait queue</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    thread-&gt;(Thread *)waitQueue-&gt;Remove();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="keyword">if</span> (thread != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    scheduler-&gt;ReadyToRun(thread);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    value++;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="locks">Locks</h3>
<p>The basic idea is to <code>close/acquire</code> a lock at the start of critical section or an indivisible operation and <code>open/release</code> it at the end of the critical section or the indivisible operation.</p>

<p>Locks solves how to ensure threads in a process executes one at a time but not the <code>sequencing problem.</code></p>

<p>Lock Class</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Class </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">class</span> <span class="class">Lock</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span>:
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Lock (<span class="predefined-type">char</span> *debugName);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    ~Lock();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">char</span>* getName() { <span class="keyword">return</span> name; }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="directive">void</span> acquire();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="directive">void</span> release();
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="predefined-type">bool</span> isHeldByCurrentThread;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="directive">private</span>:
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">char</span>*   name;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    List*   lockWaitQueue;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="predefined-type">bool</span>    lockFree;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    Thread* currentLockThread;
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>};
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Constructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">//Lock Constructor</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>Lock::Lock(<span class="predefined-type">char</span> * debugName) {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    name              = debugName;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    currentLockThread = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    lockFree          = TRUE;
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>    lockWaitQueue     = <span class="keyword">new</span> List;
<span class="line-numbers"><a href="#n8" name="n8">8</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Destructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="comment">//Lock Destructor</span>
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>~Lock() {
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    <span class="keyword">delete</span> lockWaitQueue;  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Acquire </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>Lock::acquire() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="comment">//Disable interrupts</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">//Check if current thread is an owner</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="keyword">if</span> (currentThread == currentLockThread) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">//Already owner  </span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    }
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="keyword">if</span>(lockFree == TRUE) {
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    lockFree = FALSE;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    currentLockThread = currentThread;      
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    lockWaitQueue-&gt;Append((<span class="directive">void</span>*) currentThread);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Release </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>Lock::release() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    Thread* waitingThread;
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> (!isHeldByCurrentThread()) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">//Thread is not valid owner of lock its</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">//trying to release</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    DEBUG(<span class="string"><span class="delimiter">&quot;</span><span class="content">Not a lock owner</span><span class="delimiter">&quot;</span></span>);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">return</span>;      
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    }
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    waitingThread = (Thread*)lockWaitQueue-&gt;Remove();
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span class="keyword">if</span> (waitingThread != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    scheduler-&gt;ReadyToRun(waitingThread);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    currentLockThread = waitingThread;      
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    } <span class="keyword">else</span> {
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    lockFree = TRUE;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    currentLockThread = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    (<span class="directive">void</span>)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Lock Owner </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span class="predefined-type">bool</span> Lock::isHeldByCurrentThread() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="keyword">return</span> ((currentThread != currentLockThread) ?  FALSE : TRUE);
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="concurrent-programming-construct">Concurrent Programming Construct</h3>
<p>Locks can only solve <code>mutual exclusion</code> problem, they can not solve <code>sequencing problem</code>. We need another mechanism <code>Monitors</code></p>

<p>Monitors is a programming language construct that supports both data access synchronization and control synchronization.</p>

<p>Monitors have 3 parts</p>

<ol>
  <li><code>Lock</code> for mutual exclusion</li>
  <li>1 or more <code>condition variables</code> for sequencing</li>
  <li>Monitor variables for make sequencing decisions -&gt; Shared data</li>
</ol>

<h3 id="condition-variables">Condition Variables</h3>
<p>Each condition variable is only associated with one lock.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Condition Class </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">class</span> <span class="class">Condition</span> {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span class="directive">public</span>:
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    Condition(<span class="predefined-type">char</span> *debugName);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    ~Conditon();
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="predefined-type">char</span>* getName() { <span class="keyword">return</span> name; }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="directive">void</span> wait(Lock* conditionLock);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="directive">void</span> signal(Lock* conditionLock);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="directive">void</span> broadcast(Lock* conditionLock);
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="directive">private</span>:
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="predefined-type">char</span>* name;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    List* cvQueue;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    Lock* cvLock;  
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>};
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>CV Constructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>Condition::Condition(<span class="predefined-type">char</span> * debugName) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    name    = debugName;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    cvQueue = <span class="keyword">new</span> List;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    cvLock  = <span class="predefined-constant">NULL</span>;  
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>CV Destructor </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>Condition::~Condition() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    <span class="keyword">delete</span> cvQueue;    
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>CV Wait </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">void</span> Condition::wait(Lock* conditionLock) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">//This lock is now associated with CV and</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span class="comment">//only removed when last entry is removed</span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="comment">//from cvQueue.</span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    cvLock = conditionLock;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">if</span> (conditionLock == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    interrupt-&gt;SetLevel(oldLevel);  
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    conditionLock-&gt;release();
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    cvQueue-&gt;Append((<span class="directive">void</span>*) currentThread);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    currentThread-&gt;Sleep();
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span class="comment">//Acquire lock when get up</span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    conditionLock-&gt;acquire();
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    interrupt-&gt;SetLevel(oldLevel);    
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>CV Signal </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="directive">void</span> Conditon::signal(Lock * conditionLock) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    IntStatus oldLevel = interrupt-&gt;SetLevel(IntOff);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="comment">//If nobody to signal, return</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="keyword">if</span> (cvQueue-&gt;Empty()) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span class="comment">//Verify right lock is signalled</span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="keyword">if</span> (cvLock != conditionLock) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span class="keyword">return</span>;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    }
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    thread = cvQueue-&gt;Remove();
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span class="keyword">if</span> (thread != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    scheduler-&gt;ReadyToRun(thread);
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    }
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    <span class="keyword">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    cvLock = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="producer-consumer-problem">Producer-Consumer Problem</h3>

<p>Lets consider we have <code>infinite buffer</code></p>

<p>monitor variable  =&gt; int itemCount = 0;<br />
monitor lock      =&gt; monitorLock;<br />
monitor condition =&gt; needItem;<br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Producer </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">while</span> (<span class="predefined-constant">true</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="comment">//Produce item</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span class="comment">//Put in a buffer</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    itemCount++;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    needItem.signal(&amp;monitorLock);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    monitorLock.Release();    
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Consumer </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="keyword">while</span> (<span class="predefined-constant">true</span>) {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span class="keyword">while</span>(intemCount == <span class="integer">0</span>) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    needItem.wait(&amp;monitorLock);      
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    }
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="comment">//Buffer has atleast one item</span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    itemCount--;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    monitorLock.Relase();
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<h3 id="recommended-reading">Recommended reading</h3>

<ul>
  <li><a href="https://www.dropbox.com/s/8naej9kd0612gkr/implementingcvs.pdf" target="_blank">Implementing CV using semaphore</a></li>
  <li><a href="https://www.dropbox.com/s/gaallrwximrm14g/Monitors.pdf" target="_blank">Monitors by C.A.R Hoare </a></li>
  <li><a href="http://distkeys.com/blog/2013/10/07/process-synchronization-in-linux-kernel/" target="_blank">Process synchronization in Linux Kernel</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://distkeys.com/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://distkeys.com/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[
<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br />
<!-- more --></p>

<h3>Code snippet</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>Print bit values </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="preprocessor">#include</span> <span class="include">&lt;stdlib.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="preprocessor">#include</span> <span class="include">&lt;string.h&gt;</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="predefined-type">int</span> main()
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>{
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span class="predefined-type">char</span> **container = (<span class="predefined-type">char</span> **)malloc(<span class="integer">10</span> * <span class="keyword">sizeof</span>(<span class="predefined-type">char</span>*));
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span class="predefined-type">char</span> **start = container;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span class="predefined-type">char</span> *node;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span class="predefined-type">char</span> name[] = <span class="string"><span class="delimiter">&quot;</span><span class="content">Vaibhav</span><span class="delimiter">&quot;</span></span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    <span class="predefined-type">int</span> i = <span class="integer">0</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    <span class="keyword">if</span> (container == <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    }
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt;= <span class="integer">2</span>; i++) {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    node = (<span class="predefined-type">char</span> *)malloc(<span class="integer">10</span> * <span class="keyword">sizeof</span>(<span class="predefined-type">char</span>));
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    memcpy(node, &amp;name, strlen(name) + <span class="integer">1</span>); 
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    *container = node;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    container++;
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    }
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    *container = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>    <span class="keyword">while</span> (*start != <span class="predefined-constant">NULL</span>) {
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>    printf(<span class="string"><span class="delimiter">&quot;</span><span class="content">%s</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>, *start);
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    start++;
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>    }
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>    <span class="keyword">return</span> <span class="integer">0</span>;
<span class="line-numbers"><a href="#n33" name="n33">33</a></span>}
</pre></div>
</div>
 </figure></notextile></div>

<p><br />
Focusing on following code section</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; = <span class="integer">2</span>; i++) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    node = (<span class="predefined-type">char</span> *)malloc(<span class="integer">10</span> * <span class="keyword">sizeof</span>(<span class="predefined-type">char</span>));
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    memcpy(node, &amp;name, strlen(name) + <span class="integer">1</span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    *container = node;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    container++;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p><br />In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<blockquote><p>Compile code using for GDB<br />gcc -g fileName.c</p></blockquote>

<p><br /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header"><span>GDB Trace </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>(gdb) l
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span class="integer">16</span>      }
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span class="integer">17</span>    
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span class="integer">18</span>        <span class="keyword">for</span> (i = <span class="integer">0</span>; i &lt; = <span class="integer">2</span>; i++) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span class="integer">19</span>            node = (<span class="predefined-type">char</span> *)malloc(<span class="integer">10</span> * <span class="keyword">sizeof</span>(<span class="predefined-type">char</span>));
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span class="integer">20</span>            memcpy(node, &amp;name, strlen(name) + <span class="integer">1</span>);
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span class="integer">21</span>            *container = node;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span class="integer">22</span>            container++;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span class="integer">23</span>        }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span class="integer">24</span>        *container = <span class="predefined-constant">NULL</span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span><span class="integer">25</span>    
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>(gdb) ptype node
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>type = <span class="predefined-type">char</span> *
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>(gdb) p node
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>$<span class="integer">1</span> = <span class="hex">0x1001000e0</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">Vaibhav</span><span class="delimiter">&quot;</span></span>
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>(gdb) x/<span class="integer">8</span>bb node
<span class="line-numbers"><a href="#n18" name="n18">18</a></span><span class="hex">0x1001000e0</span>:    <span class="hex">0x56</span>    <span class="hex">0x61</span>    <span class="hex">0x69</span>    <span class="hex">0x62</span>    <span class="hex">0x68</span>    <span class="hex">0x61</span>    <span class="hex">0x76</span>    <span class="hex">0x00</span>
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>(gdb) x/<span class="integer">8</span>ub node
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span><span class="hex">0x1001000e0</span>:    <span class="integer">86</span>    <span class="integer">97</span>    <span class="integer">105</span>    <span class="integer">98</span>    <span class="integer">104</span>    <span class="integer">97</span>    <span class="integer">118</span>    <span class="integer">0</span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>(gdb) x/<span class="integer">8</span>tb node
<span class="line-numbers"><a href="#n22" name="n22">22</a></span><span class="hex">0x1001000e0</span>:    <span class="octal">01010110</span>    <span class="octal">01100001</span>    <span class="octal">01101001</span>    <span class="octal">01100010</span>    <span class="octal">01101000</span>    <span class="octal">01100001</span>    <span class="octal">01110110</span>    <span class="octal">00000000</span>
</pre></div>
</div>
 </figure></notextile></div>

]]></content>
  </entry>
  
</feed>
