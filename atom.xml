<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learnings]]></title>
  <link href="http://learnwrite.github.io/atom.xml" rel="self"/>
  <link href="http://learnwrite.github.io/"/>
  <updated>2013-10-07T20:48:08-07:00</updated>
  <id>http://learnwrite.github.io/</id>
  <author>
    <name><![CDATA[Vaibhav Gautam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Process synchronization in OS]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os/"/>
    <updated>2013-10-07T11:54:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/07/process-synchronization-in-os</id>
    <content type="html"><![CDATA[<h3>What is a Process?</h3>
<p>OS <code>objective</code> is to keep as many as of the computer resources as busy as possible. It is used to keep track of all the things an OS must remember about the state of user program.</p>

<p>Process = Code + Allocated Resources + Book keeping information</p>

<p>Process is like a box, a complete entity in itself which does a step by step task written in progam. More formally it is called program in execution.</p>

<p>Lets consider a very basic operating system with very least complexity. This operating system can run only <code>one process</code> at a time. Since, only one process is working at a time, it may happen that all the resources occupied by process will not be used at the same time.</p>

<p>To maximize the resource utilization, we need to have entities running at the same time. When its said multiple entities it is logical that either we need to have multiple process running at the same time or light weight multiple entities running inside process.</p>

<p>Lets explore the second option, now consider process is like a box and it has resources inside the box. We create multiple child of process which is called thread.</p>

<p>Thread is a child of process and hence it will use resource Process have. Theoretically, there is no limit on number of child threads a process can have but it seems logical that process should have enough resource for administrative purpose for these threads. </p>

<p>Once there are multiple threads they are going to ask for same resource at the same time. For example, if two children are in one room then they will always fight for same toy. Same applies to threads.</p>

<p><br /></p>
<h3>3 Issues with Sharing </h3>
<ol>
  <li>How to <code>Share data</code>?</li>
  <li>How to ensure threads in a process, <code>executes one</code> at a time?</li>
  <li>How to ensure proper <code>sequencing</code> of events?</li>
</ol>

<p>To understand it better, lets take a real world example
<br /><br /></p>
<h3>Carl’s Jr. Restaurant</h3>
<p>Process</p>

<ol>
  <li>Customer arrives</li>
  <li>Employee takes order</li>
  <li>Employee cooks food</li>
  <li>Employee bag food</li>
  <li>Employee takes money</li>
  <li>Customer gets food and leaves</li>
</ol>

<p>If a single employee is doing steps from 1-6 then all other customers have to <code>wait</code> in line and its going to be long wait.
Instead, lets have multiple employees for taking order, cook food, bag food, take money. Each of these ‘employees’ are multiple threads on Process ‘Restaurant’. Each thread is responsible for doing <code>specialized task</code>.</p>

<p>Lets associate <code>3 issues</code> in current situation</p>

<ol>
  <li>What is shared data? - In step 2-3, Quantity of food. In step 3-4, how much food to bag</li>
  <li>Does sequence matters? -  Cook can’t cook food until order arrives. Employee can’t bag food until it is cooked. So, sequencing matters.</li>
</ol>

<p>Shared data can be passed for sharing either using <code>message passing</code> or storing that data in <code>global memoryi</code> of process and each thread read from that memory location.</p>

<p>The next logical question is how to ensure threads in a process executes one at a time i.e. in <code>exclusion</code>?
More formally there are three types of solution categories</p>

<ol>
  <li>Algorithmic approach</li>
  <li>Software Primitives</li>
  <li>Concurrent programming construct</li>
</ol>

<h3>Algorithmic approach</h3>
<p>The algorithmic approach to process synchronization does not use any assistance from the computer architecture or the OS kernel. Instead it uses an arrangement of logical conditions to satisfy the desired synchronization requirements. <a href="http://books.google.com/books/about/Operating_Systems.html?id=kbBn4X9x2mcC" target="_blank">[Dhamdhere]</a></p>

<ul>
  <li>Two process algorithms</li>
  <li><a href="http://en.wikipedia.org/wiki/Dekker's_algorithm" target="_blank">Dekker’s Algorithm</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Peterson's_algorithm" target="_blank">Peterson’s Algorithm</a></li>
  <li>n process algorithm</li>
  <li><a href="http://en.wikipedia.org/wiki/Lamport's_bakery_algorithm" target="_blank">Bakery’s Algorithm</a></li>
</ul>

<h3>Software Primitives</h3>
<p>A set of software primitives for mutual exclusion e.g Semaphore, Locks etc. were developed to overcome the logical complexity of algorithmic implementations. This is implemented using some special architectural features of computer systems. But, ease of use and correctness still remained the major obstacle in a development of large concurrent systems.</p>

<h3>Semaphores</h3>
<p>It is a shared integer variable with <code>non-negative</code> values that have <code>initialization, wait and signali</code> as a indivisible operation.</p>

<p>Semaphore Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Semaphore</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Constructor</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        Semaphore(char *debugName, int initialValue);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Destructor</span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        ~Semaphore();
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        int value;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span style="color:#036;font-weight:bold">List</span> *waitQueue;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        char *name;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>};
</pre></div>
</div>
</div>

<p>Semaphore Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>Semaphore(char * debugName, int initialValue) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    name      = debugName;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    value     = initialValue;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    waitQueue = newList;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Destructors</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>~Semaphore() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    delete waitQueue;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Wait</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>P() - <span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Wait</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::P() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Disable</span> interrupts
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#080;font-weight:bold">not</span> available
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#080;font-weight:bold">while</span> (value == <span style="color:#00D">0</span>) {
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        waitQueue-&gt;Append((void *)currentThread);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        currentThread-&gt;Sleep();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> now availble
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>    value--;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>}
</pre></div>
</div>
</div>

<p>Semaphore Signal</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Semaphore</span> <span style="color:#036;font-weight:bold">Signal</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Semaphore</span>::V() {
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">Thread</span> *thread;  
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Remove</span> first thread from wait queue
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    thread-&gt;(<span style="color:#036;font-weight:bold">Thread</span> *)waitQueue-&gt;Remove();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="color:#080;font-weight:bold">if</span> (thread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        scheduler-&gt;ReadyToRun(thread);  
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    value++;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>
<h3>Locks</h3>
<p>The basic idea is to <code>close/acquire</code> a lock at the start of critical section or an indivisible operation and <code>open/release</code> it at the end of the critical section or the indivisible operation.</p>

<p>Locks solves how to ensure threads in a process executes one at a time but not the <code>sequencing problem.</code></p>

<p>Lock Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Lock</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        <span style="color:#036;font-weight:bold">Lock</span> (char *debugName);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ~Lock();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        char* getName() { <span style="color:#080;font-weight:bold">return</span> name; }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        void acquire();
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        void release();
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        bool isHeldByCurrentThread;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        char*   name;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span style="color:#036;font-weight:bold">List</span>*   lockWaitQueue;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        bool    lockFree;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        <span style="color:#036;font-weight:bold">Thread</span>* currentLockThread;
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>};
</pre></div>
</div>
</div>

<p>Lock Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Lock</span> <span style="color:#036;font-weight:bold">Constructor</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span><span style="color:#036;font-weight:bold">Lock</span>::Lock(char * debugName) {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    name              = debugName;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    currentLockThread = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    lockFree          = <span style="color:#069">TRUE</span>;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>    lockWaitQueue     = new <span style="color:#036;font-weight:bold">List</span>;
<span class="line-numbers"><a href="#n7" name="n7">7</a></span>}
</pre></div>
</div>
</div>

<p>Lock Destructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Lock</span> <span style="color:#036;font-weight:bold">Destructor</span>
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>~Lock() {
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    delete lockWaitQueue;  
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>}
</pre></div>
</div>
</div>

<p>Lock Acquire</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Lock</span>::acquire() {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Disable</span> interrupts
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Check</span> <span style="color:#080;font-weight:bold">if</span> current thread is an owner
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    <span style="color:#080;font-weight:bold">if</span> (currentThread == currentLockThread) {
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Already</span> owner  
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    }
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#080;font-weight:bold">if</span>(lockFree == <span style="color:#069">TRUE</span>) {
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        lockFree = <span style="color:#069">FALSE</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        currentLockThread = currentThread;      
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>        lockWaitQueue-&gt;Append((void*) currentThread);
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    }
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>}
</pre></div>
</div>
</div>

<p>Lock Release</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Lock</span>::release() {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">Thread</span>* waitingThread;
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">if</span> (!isHeldByCurrentThread()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Thread</span> is <span style="color:#080;font-weight:bold">not</span> valid owner of lock its
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>trying to release
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        DEBUG(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Not a lock owner</span><span style="color:#710">&quot;</span></span>);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>        <span style="color:#080;font-weight:bold">return</span>;      
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    }
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    waitingThread = (<span style="color:#036;font-weight:bold">Thread</span>*)lockWaitQueue-&gt;Remove();
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    <span style="color:#080;font-weight:bold">if</span> (waitingThread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>        scheduler-&gt;ReadyToRun(waitingThread);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        currentLockThread = waitingThread;      
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    } <span style="color:#080;font-weight:bold">else</span> {
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        lockFree = <span style="color:#069">TRUE</span>;
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        currentLockThread = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    }
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    (void)interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>}
</pre></div>
</div>
</div>

<p>Lock Owner</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span>bool <span style="color:#036;font-weight:bold">Lock</span>::isHeldByCurrentThread() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    <span style="color:#080;font-weight:bold">return</span> ((currentThread != currentLockThread) ?  <span style="color:#069">FALSE</span> : <span style="color:#069">TRUE</span>);
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>
<h3>Concurrent Programming Construct</h3>
<p>Locks can only solve <code>mutual exclusion</code> problem, they can not solve <code>sequencing problem</code>. We need another mechanism <code>Monitors</code></p>

<p>Monitors is a programming language construct that supports both data access synchronization and control synchronization.</p>

<p>Monitors have 3 parts</p>

<ol>
  <li><code>Lock</code> for mutual exclusion</li>
  <li>1 or more <code>condition variables</code> for sequencing</li>
  <li>Monitor variables for make sequencing decisions -&gt; Shared data</li>
</ol>

<h3>Condition Variables</h3>
<p>Each condition variable is only associated with one lock.</p>

<p>Condition Class</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Condition</span> {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#606">public</span>:
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>        Condition(char *debugName);
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>        ~Conditon();
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        char* getName() { <span style="color:#080;font-weight:bold">return</span> name; }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        void wait(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>        void signal(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>        void broadcast(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock);
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#606">private</span>:
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        char* name;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>        <span style="color:#036;font-weight:bold">List</span>* cvQueue;
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span style="color:#036;font-weight:bold">Lock</span>* cvLock;  
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>};
</pre></div>
</div>
</div>

<p>CV Constructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Condition</span>::Condition(char * debugName) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    name    = debugName;
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    cvQueue = new <span style="color:#036;font-weight:bold">List</span>;
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    cvLock  = <span style="color:#036;font-weight:bold">NULL</span>;  
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>}
</pre></div>
</div>
</div>

<p>CV Destructor</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#036;font-weight:bold">Condition</span>::~Condition() {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    delete cvQueue;    
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>}
</pre></div>
</div>
</div>

<p>CV Wait</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>void <span style="color:#036;font-weight:bold">Condition</span>::wait(<span style="color:#036;font-weight:bold">Lock</span>* conditionLock) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">This</span> lock is now associated with <span style="color:#036;font-weight:bold">CV</span> <span style="color:#080;font-weight:bold">and</span>
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span><span style="color:#C2C">on</span></span>ly removed <span style="color:#080;font-weight:bold">when</span> last entry is removed
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>from cvQueue.
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>        cvLock = conditionLock;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#080;font-weight:bold">if</span> (conditionLock == <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        interrupt-&gt;SetLevel(oldLevel);  
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    conditionLock-&gt;release();
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    cvQueue-&gt;Append((void*) currentThread);
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    currentThread-&gt;Sleep();
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Acquire</span> lock <span style="color:#080;font-weight:bold">when</span> get up
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    conditionLock-&gt;acquire();
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>    interrupt-&gt;SetLevel(oldLevel);    
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>}
</pre></div>
</div>
</div>

<p>CV Signal</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>void <span style="color:#036;font-weight:bold">Conditon</span>::signal(<span style="color:#036;font-weight:bold">Lock</span> * conditionLock) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    <span style="color:#036;font-weight:bold">IntStatus</span> oldLevel = interrupt-&gt;SetLevel(<span style="color:#036;font-weight:bold">IntOff</span>);
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">If</span> nobody to signal, <span style="color:#080;font-weight:bold">return</span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;Empty()) {
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>        interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    }
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Verify</span> right lock is signalled
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvLock != conditionLock) {
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>        interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>        <span style="color:#080;font-weight:bold">return</span>;
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    }
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    thread = cvQueue-&gt;Remove();
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>    <span style="color:#080;font-weight:bold">if</span> (thread != <span style="color:#036;font-weight:bold">NULL</span>) {
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>        scheduler-&gt;ReadyToRun(thread);
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>    }
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>    <span style="color:#080;font-weight:bold">if</span> (cvQueue-&gt;isEmpty()) {
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        cvLock = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>    interrupt-&gt;SetLevel(oldLevel);
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>
<h3>Producer-Consumer Problem</h3>

<p>Lets consider we have <code>infinite buffer</code></p>

<p>monitor variable  =&gt; int itemCount = 0;<br />
monitor lock      =&gt; monitorLock;<br />
monitor condition =&gt; needItem;<br /></p>

<p>Producer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#069">true</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Produce</span> item
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Put</span> <span style="color:#080;font-weight:bold">in</span> a buffer
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    itemCount++;
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    needItem.signal(&amp;monitorLock);
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>    monitorLock.Release();    
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>}
</pre></div>
</div>
</div>

<p>Consumer</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">while</span> (<span style="color:#069">true</span>) {
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span>    monitorLock.acquire();
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>    <span style="color:#080;font-weight:bold">while</span>(intemCount == <span style="color:#00D">0</span>) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span>        needItem.wait(&amp;monitorLock);      
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>    }
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span><span style="color:#036;font-weight:bold">Buffer</span> has atleast one item
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    itemCount--;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    monitorLock.Relase();
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>}
</pre></div>
</div>
</div>

<p><br /></p>
<h3>Recommended reading</h3>

<ul>
  <li><a href="https://docs.google.com/file/d/0BySPJjyZBnC2Q20yU2lHeGdKQ3c/edit?usp=sharing" target="_blank">Implementing CV using semaphore</a></li>
  <li><a href="https://docs.google.com/file/d/0BySPJjyZBnC2ekFOMDlwNmNiQlk/edit?usp=sharing" target="_blank">Monitors by C.A.R Hoare </a></li>
  <li>Process synchronization in Linux Kernel</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GDB - Print Bit values of bytes]]></title>
    <link href="http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes/"/>
    <updated>2013-10-06T21:06:00-07:00</updated>
    <id>http://learnwrite.github.io/blog/2013/10/06/gdb-print-bit-values-of-bytes</id>
    <content type="html"><![CDATA[
<h2>Print bit values in a byte</h2>

<p>Recently, I have been working on interesting piece of code whose crux is to create a array of pointer addresses.
Each entry in this array is address pointing to memory location.</p>

<p>For example<br />
Container array contains char addresses. Here, 100 is memory address where char value resides.</p>
<table><td>100</td><td>1000</td><td>2000</td></table>
<p><br />
Address 100<br /></p>
<table><td>v</td><td>a</td><td>i</td><td>b</td><td>h</td><td>a</td><td>v</td><td>\0</td></table>
<p><br />
Sometimes char data type is used as a package of 8 bits not as a valid char value.<br /></p>

<h3>Code snippet</h3>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdio.h&gt;</span>
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;stdlib.h&gt;</span>
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#579">#include</span> <span style="color:#B44;font-weight:bold">&lt;string.h&gt;</span>
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span>
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#0a8;font-weight:bold">int</span> main()
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span>{
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **container = (<span style="color:#0a8;font-weight:bold">char</span> **)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>*));
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span>    <span style="color:#0a8;font-weight:bold">char</span> **start = container;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span>    <span style="color:#0a8;font-weight:bold">char</span> *node;
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span>
<span class="line-numbers"><a href="#n11" name="n11">11</a></span>    <span style="color:#0a8;font-weight:bold">char</span> name[] = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>;
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>    <span style="color:#0a8;font-weight:bold">int</span> i = <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>    <span style="color:#080;font-weight:bold">if</span> (container == <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n15" name="n15">15</a></span>        <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>    }
<span class="line-numbers"><a href="#n17" name="n17">17</a></span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>    <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt;= <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n19" name="n19">19</a></span>        node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>        memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n21" name="n21">21</a></span>        *container = node;
<span class="line-numbers"><a href="#n22" name="n22">22</a></span>        container++;
<span class="line-numbers"><a href="#n23" name="n23">23</a></span>    }
<span class="line-numbers"><a href="#n24" name="n24">24</a></span>    *container = <span style="color:#069">NULL</span>;
<span class="line-numbers"><a href="#n25" name="n25">25</a></span>
<span class="line-numbers"><a href="#n26" name="n26">26</a></span>    <span style="color:#080;font-weight:bold">while</span> (*start != <span style="color:#069">NULL</span>) {
<span class="line-numbers"><a href="#n27" name="n27">27</a></span>        printf(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%s</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>, *start);
<span class="line-numbers"><a href="#n28" name="n28">28</a></span>        start++;
<span class="line-numbers"><a href="#n29" name="n29">29</a></span>    }
<span class="line-numbers"><strong><a href="#n30" name="n30">30</a></strong></span>
<span class="line-numbers"><a href="#n31" name="n31">31</a></span>    <span style="color:#080;font-weight:bold">return</span> <span style="color:#00D">0</span>;
<span class="line-numbers"><a href="#n32" name="n32">32</a></span>}
</pre></div>
</div>
</div>
<p><br />
Focusing on following code section</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"><a href="#n1" name="n1">1</a></span><span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"><a href="#n2" name="n2">2</a></span>    node = (<span style="color:#0a8;font-weight:bold">char</span> *)malloc(<span style="color:#00D">10</span> * <span style="color:#080;font-weight:bold">sizeof</span>(<span style="color:#0a8;font-weight:bold">char</span>));
<span class="line-numbers"><a href="#n3" name="n3">3</a></span>    memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>); 
<span class="line-numbers"><a href="#n4" name="n4">4</a></span>    *container = node;
<span class="line-numbers"><a href="#n5" name="n5">5</a></span>    container++;
<span class="line-numbers"><a href="#n6" name="n6">6</a></span>}
</pre></div>
</div>
</div>

<p><br />In this section, a memory of 10 chars is being allocated, initialized and finally assigned to container array.
<br />Lets observer, if we have set the right information in each char bit.</p>

<blockquote><p>Compile code using<br />gcc -g fileName.c</p></blockquote>

<div><div class="CodeRay">
  <div class="code"><pre><span class="line-numbers"> <a href="#n1" name="n1">1</a></span>(gdb) l
<span class="line-numbers"> <a href="#n2" name="n2">2</a></span><span style="color:#00D">16</span>      }
<span class="line-numbers"> <a href="#n3" name="n3">3</a></span><span style="color:#00D">17</span>        
<span class="line-numbers"> <a href="#n4" name="n4">4</a></span><span style="color:#00D">18</span>            <span style="color:#080;font-weight:bold">for</span> (i = <span style="color:#00D">0</span>; i &lt; = <span style="color:#00D">2</span>; i++) {
<span class="line-numbers"> <a href="#n5" name="n5">5</a></span><span style="color:#00D">19</span>                node = (char *)malloc(<span style="color:#00D">10</span> * sizeof(char));
<span class="line-numbers"> <a href="#n6" name="n6">6</a></span><span style="color:#00D">20</span>                memcpy(node, &amp;name, strlen(name) + <span style="color:#00D">1</span>);
<span class="line-numbers"> <a href="#n7" name="n7">7</a></span><span style="color:#00D">21</span>                *container = node;
<span class="line-numbers"> <a href="#n8" name="n8">8</a></span><span style="color:#00D">22</span>                container++;
<span class="line-numbers"> <a href="#n9" name="n9">9</a></span><span style="color:#00D">23</span>            }
<span class="line-numbers"><strong><a href="#n10" name="n10">10</a></strong></span><span style="color:#00D">24</span>            *container = <span style="color:#036;font-weight:bold">NULL</span>;
<span class="line-numbers"><a href="#n11" name="n11">11</a></span><span style="color:#00D">25</span>        
<span class="line-numbers"><a href="#n12" name="n12">12</a></span>(gdb) ptype node
<span class="line-numbers"><a href="#n13" name="n13">13</a></span>type = char *
<span class="line-numbers"><a href="#n14" name="n14">14</a></span>(gdb) p node
<span class="line-numbers"><a href="#n15" name="n15">15</a></span><span style="color:#d70">$1</span> = <span style="color:#00D">0x1001000e0</span> <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Vaibhav</span><span style="color:#710">&quot;</span></span>
<span class="line-numbers"><a href="#n16" name="n16">16</a></span>(gdb) x/<span style="color:#00D">8</span>bb node
<span class="line-numbers"><a href="#n17" name="n17">17</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">0x56</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x69</span>        <span style="color:#00D">0x62</span>        <span style="color:#00D">0x68</span>        <span style="color:#00D">0x61</span>        <span style="color:#00D">0x76</span>        <span style="color:#00D">0x00</span>
<span class="line-numbers"><a href="#n18" name="n18">18</a></span>(gdb) x/<span style="color:#00D">8</span>ub node
<span class="line-numbers"><a href="#n19" name="n19">19</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">86</span>        <span style="color:#00D">97</span>        <span style="color:#00D">105</span>        <span style="color:#00D">98</span>        <span style="color:#00D">104</span>        <span style="color:#00D">97</span>        <span style="color:#00D">118</span>        <span style="color:#00D">0</span>
<span class="line-numbers"><strong><a href="#n20" name="n20">20</a></strong></span>(gdb) x/<span style="color:#00D">8</span>tb node
<span class="line-numbers"><a href="#n21" name="n21">21</a></span><span style="color:#00D">0x1001000e0</span>:        <span style="color:#00D">01010110</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01101001</span>        <span style="color:#00D">01100010</span>        <span style="color:#00D">01101000</span>        <span style="color:#00D">01100001</span>        <span style="color:#00D">01110110</span>        <span style="color:#00D">00000000</span>
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
